ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccuR5RPg.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32wlxx_hal_flash.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.rodata.CHANNEL_OFFSET_TAB,"a"
  18              		.align	2
  21              	CHANNEL_OFFSET_TAB:
  22 0000 081C3044 		.ascii	"\010\0340DXl\200"
  22      586C80
  23              		.global	pFlash
  24              		.section	.bss.pFlash,"aw",%nobits
  25              		.align	2
  28              	pFlash:
  29 0000 00000000 		.space	24
  29      00000000 
  29      00000000 
  29      00000000 
  29      00000000 
  30              		.section	.text.HAL_FLASH_Program,"ax",%progbits
  31              		.align	1
  32              		.global	HAL_FLASH_Program
  33              		.syntax unified
  34              		.thumb
  35              		.thumb_func
  37              	HAL_FLASH_Program:
  38              	.LFB844:
  39              		.file 1 "Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c"
   1:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** /**
   2:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   ******************************************************************************
   3:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   * @file    stm32wlxx_hal_flash.c
   4:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   * @author  MCD Application Team
   5:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   * @brief   FLASH HAL module driver.
   6:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   *          This file provides firmware functions to manage the following
   7:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   *          functionalities of the internal FLASH memory:
   8:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   *           + Program operations functions
   9:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   *           + Memory Control functions
  10:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   *           + Peripheral Errors functions
  11:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   *
  12:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   ******************************************************************************
  13:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   * @attention
  14:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   *
  15:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   * Copyright (c) 2020 STMicroelectronics.
  16:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   * All rights reserved.
  17:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   *
  18:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   * This software is licensed under terms that can be found in the LICENSE file
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccuR5RPg.s 			page 2


  19:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   * in the root directory of this software component.
  20:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  21:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   *
  22:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   ******************************************************************************
  23:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****  @verbatim
  24:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   ==============================================================================
  25:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****                         ##### FLASH peripheral features #####
  26:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   ==============================================================================
  27:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
  28:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   [..] The Flash memory interface manages CPU AHB I-Code and D-Code accesses
  29:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****        to the Flash memory. It implements the erase and program Flash memory operations
  30:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****        and the read and write protection mechanisms.
  31:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
  32:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   [..] The Flash memory interface accelerates code execution with a system of instruction
  33:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****        prefetch and cache lines.
  34:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
  35:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   [..] The FLASH main features are:
  36:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****       (+) Flash memory read operations
  37:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****       (+) Flash memory program/erase operations
  38:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****       (+) Program and Erase suspension
  39:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****       (+) Read / write protections (2 areas per features)
  40:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****       (+) CPU2 Security area
  41:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****       (+) Option bytes programming
  42:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****       (+) Prefetch on CPU1 I-Code and CPU2 S-bus
  43:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****       (+) 32 instruction cache lines of 4*64 bits on I-Code for CPU1
  44:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****       (+) 8 data cache lines of 4*64 bits on D-Code for CPU1
  45:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****       (+) 4 instruction cache lines of 1*64 bits on S-bus for CPU2
  46:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****       (+) 4 data cache lines of 1*64 bits on S-Bus for CPU2
  47:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****       (+) Error code correction (ECC) : Data in flash are 72-bits word
  48:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****           (8 bits added per double word)
  49:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
  50:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****                         ##### How to use this driver #####
  51:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****  ==============================================================================
  52:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****     [..]
  53:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****       This driver provides functions and macros to configure and program the FLASH
  54:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****       memory of all STM32WLxx devices.
  55:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
  56:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****       (#) Flash Memory IO Programming functions:
  57:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****            (++) Lock and Unlock the FLASH interface using HAL_FLASH_Unlock() and
  58:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****                 HAL_FLASH_Lock() functions
  59:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****            (++) Program functions: double word and fast program (full row programming)
  60:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****            (++) There are two modes of programming:
  61:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****             (+++) Polling mode using HAL_FLASH_Program() function
  62:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****             (+++) Interrupt mode using HAL_FLASH_Program_IT() function
  63:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
  64:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****       (#) Interrupts and flags management functions:
  65:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****            (++) Handle FLASH interrupts by calling HAL_FLASH_IRQHandler()
  66:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****            (++) Callback functions are called when the flash operations are finished :
  67:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****                 HAL_FLASH_EndOfOperationCallback() when everything is ok, otherwise
  68:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****                 HAL_FLASH_OperationErrorCallback()
  69:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****            (++) Get error flag status by calling HAL_GetError()
  70:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
  71:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****       (#) Option bytes management functions :
  72:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****            (++) Lock and Unlock the option bytes using HAL_FLASH_OB_Unlock() and
  73:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****                 HAL_FLASH_OB_Lock() functions
  74:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****            (++) Launch the reload of the option bytes using HAL_FLASH_OB_Launch() function.
  75:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****                 In this case, a reset is generated
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccuR5RPg.s 			page 3


  76:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
  77:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****     [..]
  78:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****       In addition to these functions, this driver includes a set of macros allowing
  79:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****       to handle the following operations:
  80:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****        (+) Set the latency
  81:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****        (+) Enable/Disable the prefetch buffer
  82:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****        (+) Enable/Disable the suspend program or erase request
  83:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****        (+) Enable/Disable the Instruction cache and the Data cache
  84:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****        (+) Reset the Instruction cache and the Data cache
  85:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****        (+) Enable/Disable the Flash interrupts
  86:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****        (+) Monitor the Flash flags status
  87:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
  88:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****  @endverbatim
  89:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   ******************************************************************************
  90:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   */
  91:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
  92:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** /* Includes ------------------------------------------------------------------*/
  93:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** #include "stm32wlxx_hal.h"
  94:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
  95:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** /** @addtogroup STM32WLxx_HAL_Driver
  96:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   * @{
  97:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   */
  98:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
  99:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** /** @defgroup FLASH FLASH
 100:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   * @brief FLASH HAL module driver
 101:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   * @{
 102:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   */
 103:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
 104:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** #ifdef HAL_FLASH_MODULE_ENABLED
 105:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
 106:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** /* Private typedef -----------------------------------------------------------*/
 107:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** /* Private defines -----------------------------------------------------------*/
 108:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** /** @addtogroup FLASH_Private_Constants
 109:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   * @{
 110:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   */
 111:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** #define FLASH_NB_DOUBLE_WORDS_IN_ROW  32
 112:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** /**
 113:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   * @}
 114:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   */
 115:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
 116:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** /* Private macros ------------------------------------------------------------*/
 117:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** /* Private variables ---------------------------------------------------------*/
 118:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** /** @defgroup FLASH_Private_Variables FLASH Private Variables
 119:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****  * @{
 120:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****  */
 121:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** /**
 122:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   * @brief  Variable used for Program/Erase sectors under interruption
 123:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   */
 124:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** FLASH_ProcessTypeDef pFlash = {.Lock = HAL_UNLOCKED, \
 125:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****                                .ErrorCode = HAL_FLASH_ERROR_NONE, \
 126:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****                                .ProcedureOnGoing = 0U, \
 127:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****                                .Address = 0U, \
 128:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****                                .Page = 0U, \
 129:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****                                .NbPagesToErase = 0U
 130:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****                               };
 131:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** /**
 132:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   * @}
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccuR5RPg.s 			page 4


 133:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   */
 134:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
 135:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** /* Private function prototypes -----------------------------------------------*/
 136:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** /** @defgroup FLASH_Private_Functions FLASH Private Functions
 137:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****  * @{
 138:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****  */
 139:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** static void          FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data);
 140:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** static void          FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress);
 141:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** /**
 142:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   * @}
 143:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   */
 144:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
 145:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** /* Exported functions --------------------------------------------------------*/
 146:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** /** @defgroup FLASH_Exported_Functions FLASH Exported Functions
 147:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   * @{
 148:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   */
 149:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
 150:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** /** @defgroup FLASH_Exported_Functions_Group1 Programming operation functions
 151:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****  *  @brief   Programming operation functions
 152:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****  *
 153:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** @verbatim
 154:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****  ===============================================================================
 155:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****                   ##### Programming operation functions #####
 156:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****  ===============================================================================
 157:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****     [..]
 158:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****     This subsection provides a set of functions allowing to manage the FLASH
 159:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****     program operations.
 160:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
 161:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** @endverbatim
 162:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   * @{
 163:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   */
 164:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
 165:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** /**
 166:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   * @brief  Program double word or fast program of a row at a specified address.
 167:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   * @note   Before any operation, it is possible to check there is no operation suspended
 168:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   *         by call HAL_FLASHEx_IsOperationSuspended()
 169:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   * @param  TypeProgram Indicate the way to program at a specified address
 170:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   *                       This parameter can be a value of @ref FLASH_TYPE_PROGRAM
 171:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   * @param  Address Specifies the address to be programmed.
 172:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   * @param  Data Specifies the data to be programmed
 173:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   *                This parameter is the data for the double word program and the address where
 174:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   *                are stored the data for the row fast program.
 175:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   *
 176:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   * @retval HAL_StatusTypeDef HAL Status
 177:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   */
 178:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
 179:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** {
  40              		.loc 1 179 1
  41              		.cfi_startproc
  42              		@ args = 0, pretend = 0, frame = 24
  43              		@ frame_needed = 1, uses_anonymous_args = 0
  44 0000 80B5     		push	{r7, lr}
  45              	.LCFI0:
  46              		.cfi_def_cfa_offset 8
  47              		.cfi_offset 7, -8
  48              		.cfi_offset 14, -4
  49 0002 86B0     		sub	sp, sp, #24
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccuR5RPg.s 			page 5


  50              	.LCFI1:
  51              		.cfi_def_cfa_offset 32
  52 0004 00AF     		add	r7, sp, #0
  53              	.LCFI2:
  54              		.cfi_def_cfa_register 7
  55 0006 F860     		str	r0, [r7, #12]
  56 0008 B960     		str	r1, [r7, #8]
  57 000a C7E90023 		strd	r2, [r7]
 180:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   HAL_StatusTypeDef status;
 181:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
 182:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   /* Check the parameters */
 183:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
 184:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   assert_param(IS_ADDR_ALIGNED_64BITS(Address));
 185:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));
 186:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
 187:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   /* Process Locked */
 188:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   __HAL_LOCK(&pFlash);
  58              		.loc 1 188 3
  59 000e 1C4B     		ldr	r3, .L7
  60 0010 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  61 0012 012B     		cmp	r3, #1
  62 0014 01D1     		bne	.L2
  63              		.loc 1 188 3 is_stmt 0 discriminator 1
  64 0016 0223     		movs	r3, #2
  65 0018 2DE0     		b	.L3
  66              	.L2:
  67              		.loc 1 188 3 discriminator 2
  68 001a 194B     		ldr	r3, .L7
  69 001c 0122     		movs	r2, #1
  70 001e 1A70     		strb	r2, [r3]
 189:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
 190:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   /* Reset error code */
 191:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
  71              		.loc 1 191 20 is_stmt 1 discriminator 2
  72 0020 174B     		ldr	r3, .L7
  73 0022 0022     		movs	r2, #0
  74 0024 5A60     		str	r2, [r3, #4]
 192:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
 193:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   /* Verify that next operation can be proceed */
 194:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
  75              		.loc 1 194 12 discriminator 2
  76 0026 4FF47A70 		mov	r0, #1000
  77 002a FFF7FEFF 		bl	FLASH_WaitForLastOperation
  78 002e 0346     		mov	r3, r0
  79 0030 FB75     		strb	r3, [r7, #23]
 195:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
 196:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   if (status == HAL_OK)
  80              		.loc 1 196 6 discriminator 2
  81 0032 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
  82 0034 002B     		cmp	r3, #0
  83 0036 1AD1     		bne	.L4
 197:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   {
 198:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****     if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
  84              		.loc 1 198 8
  85 0038 FB68     		ldr	r3, [r7, #12]
  86 003a 012B     		cmp	r3, #1
  87 003c 05D1     		bne	.L5
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccuR5RPg.s 			page 6


 199:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****     {
 200:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****       /* Check the parameters */
 201:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****       assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));
 202:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
 203:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****       /* Program double-word (64-bit) at a specified address */
 204:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****       FLASH_Program_DoubleWord(Address, Data);
  88              		.loc 1 204 7
  89 003e D7E90023 		ldrd	r2, [r7]
  90 0042 B868     		ldr	r0, [r7, #8]
  91 0044 FFF7FEFF 		bl	FLASH_Program_DoubleWord
  92 0048 04E0     		b	.L6
  93              	.L5:
 205:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****     }
 206:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****     else
 207:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****     {
 208:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****       /* Check the parameters */
 209:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****       assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));
 210:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
 211:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****       /* Fast program a 32 double-word (64-bit) row at a specified address */
 212:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****       FLASH_Program_Fast(Address, (uint32_t)Data);
  94              		.loc 1 212 7
  95 004a 3B68     		ldr	r3, [r7]
  96 004c 1946     		mov	r1, r3
  97 004e B868     		ldr	r0, [r7, #8]
  98 0050 FFF7FEFF 		bl	FLASH_Program_Fast
  99              	.L6:
 213:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****     }
 214:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
 215:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****     /* Wait for last operation to be completed */
 216:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****     status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 100              		.loc 1 216 14
 101 0054 4FF47A70 		mov	r0, #1000
 102 0058 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 103 005c 0346     		mov	r3, r0
 104 005e FB75     		strb	r3, [r7, #23]
 217:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
 218:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****     /* If the program operation is completed, disable the PG or FSTPG Bit */
 219:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** #ifdef CORE_CM0PLUS
 220:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****     CLEAR_BIT(FLASH->C2CR, TypeProgram);
 221:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** #else
 222:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****     CLEAR_BIT(FLASH->CR, TypeProgram);
 105              		.loc 1 222 5
 106 0060 084B     		ldr	r3, .L7+4
 107 0062 5A69     		ldr	r2, [r3, #20]
 108 0064 FB68     		ldr	r3, [r7, #12]
 109 0066 DB43     		mvns	r3, r3
 110 0068 0649     		ldr	r1, .L7+4
 111 006a 1340     		ands	r3, r3, r2
 112 006c 4B61     		str	r3, [r1, #20]
 113              	.L4:
 223:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** #endif
 224:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   }
 225:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
 226:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   /* Process Unlocked */
 227:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   __HAL_UNLOCK(&pFlash);
 114              		.loc 1 227 3
 115 006e 044B     		ldr	r3, .L7
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccuR5RPg.s 			page 7


 116 0070 0022     		movs	r2, #0
 117 0072 1A70     		strb	r2, [r3]
 228:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
 229:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   /* return status */
 230:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   return status;
 118              		.loc 1 230 10
 119 0074 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 120              	.L3:
 231:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** }
 121              		.loc 1 231 1
 122 0076 1846     		mov	r0, r3
 123 0078 1837     		adds	r7, r7, #24
 124              	.LCFI3:
 125              		.cfi_def_cfa_offset 8
 126 007a BD46     		mov	sp, r7
 127              	.LCFI4:
 128              		.cfi_def_cfa_register 13
 129              		@ sp needed
 130 007c 80BD     		pop	{r7, pc}
 131              	.L8:
 132 007e 00BF     		.align	2
 133              	.L7:
 134 0080 00000000 		.word	pFlash
 135 0084 00400058 		.word	1476411392
 136              		.cfi_endproc
 137              	.LFE844:
 139              		.section	.text.HAL_FLASH_Program_IT,"ax",%progbits
 140              		.align	1
 141              		.global	HAL_FLASH_Program_IT
 142              		.syntax unified
 143              		.thumb
 144              		.thumb_func
 146              	HAL_FLASH_Program_IT:
 147              	.LFB845:
 232:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
 233:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** /**
 234:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   * @brief  Program double word or fast program of a row at a specified address with interrupt enab
 235:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   * @note   Before any operation, it is possible to check there is no operation suspended
 236:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   *         by call HAL_FLASHEx_IsOperationSuspended()
 237:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   * @param  TypeProgram Indicate the way to program at a specified address.
 238:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   *                           This parameter can be a value of @ref FLASH_TYPE_PROGRAM
 239:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   * @param  Address Specifies the address to be programmed.
 240:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   * @param  Data Specifies the data to be programmed
 241:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   *                This parameter is the data for the double word program and the address where
 242:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   *                are stored the data for the row fast program.
 243:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   *
 244:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   * @retval HAL Status
 245:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   */
 246:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** HAL_StatusTypeDef HAL_FLASH_Program_IT(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
 247:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** {
 148              		.loc 1 247 1
 149              		.cfi_startproc
 150              		@ args = 0, pretend = 0, frame = 24
 151              		@ frame_needed = 1, uses_anonymous_args = 0
 152 0000 80B5     		push	{r7, lr}
 153              	.LCFI5:
 154              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccuR5RPg.s 			page 8


 155              		.cfi_offset 7, -8
 156              		.cfi_offset 14, -4
 157 0002 86B0     		sub	sp, sp, #24
 158              	.LCFI6:
 159              		.cfi_def_cfa_offset 32
 160 0004 00AF     		add	r7, sp, #0
 161              	.LCFI7:
 162              		.cfi_def_cfa_register 7
 163 0006 F860     		str	r0, [r7, #12]
 164 0008 B960     		str	r1, [r7, #8]
 165 000a C7E90023 		strd	r2, [r7]
 248:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   HAL_StatusTypeDef status;
 249:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
 250:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   /* Check the parameters */
 251:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
 252:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   assert_param(IS_ADDR_ALIGNED_64BITS(Address));
 253:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));
 254:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
 255:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   /* Process Locked */
 256:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   __HAL_LOCK(&pFlash);
 166              		.loc 1 256 3
 167 000e 1F4B     		ldr	r3, .L15
 168 0010 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 169 0012 012B     		cmp	r3, #1
 170 0014 01D1     		bne	.L10
 171              		.loc 1 256 3 is_stmt 0 discriminator 1
 172 0016 0223     		movs	r3, #2
 173 0018 33E0     		b	.L11
 174              	.L10:
 175              		.loc 1 256 3 discriminator 2
 176 001a 1C4B     		ldr	r3, .L15
 177 001c 0122     		movs	r2, #1
 178 001e 1A70     		strb	r2, [r3]
 257:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
 258:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   /* Reset error code */
 259:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 179              		.loc 1 259 20 is_stmt 1 discriminator 2
 180 0020 1A4B     		ldr	r3, .L15
 181 0022 0022     		movs	r2, #0
 182 0024 5A60     		str	r2, [r3, #4]
 260:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
 261:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   /* Verify that next operation can be proceed */
 262:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 183              		.loc 1 262 12 discriminator 2
 184 0026 4FF47A70 		mov	r0, #1000
 185 002a FFF7FEFF 		bl	FLASH_WaitForLastOperation
 186 002e 0346     		mov	r3, r0
 187 0030 FB75     		strb	r3, [r7, #23]
 263:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
 264:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   if (status != HAL_OK)
 188              		.loc 1 264 6 discriminator 2
 189 0032 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 190 0034 002B     		cmp	r3, #0
 191 0036 03D0     		beq	.L12
 265:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   {
 266:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****     /* Process Unlocked */
 267:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****     __HAL_UNLOCK(&pFlash);
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccuR5RPg.s 			page 9


 192              		.loc 1 267 5
 193 0038 144B     		ldr	r3, .L15
 194 003a 0022     		movs	r2, #0
 195 003c 1A70     		strb	r2, [r3]
 196 003e 1FE0     		b	.L13
 197              	.L12:
 268:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   }
 269:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   else
 270:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   {
 271:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****     /* Set internal variables used by the IRQ handler */
 272:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****     pFlash.ProcedureOnGoing = TypeProgram;
 198              		.loc 1 272 29
 199 0040 124A     		ldr	r2, .L15
 200 0042 FB68     		ldr	r3, [r7, #12]
 201 0044 9360     		str	r3, [r2, #8]
 273:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****     pFlash.Address = Address;
 202              		.loc 1 273 20
 203 0046 114A     		ldr	r2, .L15
 204 0048 BB68     		ldr	r3, [r7, #8]
 205 004a D360     		str	r3, [r2, #12]
 274:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
 275:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****     /* Enable End of Operation and Error interrupts */
 276:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****     __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR | FLASH_IT_ECCC);
 206              		.loc 1 276 5
 207 004c 104B     		ldr	r3, .L15+4
 208 004e 9B69     		ldr	r3, [r3, #24]
 209 0050 0F4A     		ldr	r2, .L15+4
 210 0052 43F08073 		orr	r3, r3, #16777216
 211 0056 9361     		str	r3, [r2, #24]
 212 0058 0D4B     		ldr	r3, .L15+4
 213 005a 5B69     		ldr	r3, [r3, #20]
 214 005c 0C4A     		ldr	r2, .L15+4
 215 005e 43F04073 		orr	r3, r3, #50331648
 216 0062 5361     		str	r3, [r2, #20]
 277:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
 278:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****     if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 217              		.loc 1 278 8
 218 0064 FB68     		ldr	r3, [r7, #12]
 219 0066 012B     		cmp	r3, #1
 220 0068 05D1     		bne	.L14
 279:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****     {
 280:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****       /* Check the parameters */
 281:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****       assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));
 282:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
 283:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****       /* Program double-word (64-bit) at a specified address */
 284:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****       FLASH_Program_DoubleWord(Address, Data);
 221              		.loc 1 284 7
 222 006a D7E90023 		ldrd	r2, [r7]
 223 006e B868     		ldr	r0, [r7, #8]
 224 0070 FFF7FEFF 		bl	FLASH_Program_DoubleWord
 225 0074 04E0     		b	.L13
 226              	.L14:
 285:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****     }
 286:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****     else
 287:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****     {
 288:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****       /* Check the parameters */
 289:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****       assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccuR5RPg.s 			page 10


 290:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
 291:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****       /* Fast program a 32 double-word (64-bit) row at a specified address */
 292:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****       FLASH_Program_Fast(Address, (uint32_t)Data);
 227              		.loc 1 292 7
 228 0076 3B68     		ldr	r3, [r7]
 229 0078 1946     		mov	r1, r3
 230 007a B868     		ldr	r0, [r7, #8]
 231 007c FFF7FEFF 		bl	FLASH_Program_Fast
 232              	.L13:
 293:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****     }
 294:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   }
 295:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
 296:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   /* return status */
 297:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   return status;
 233              		.loc 1 297 10
 234 0080 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 235              	.L11:
 298:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** }
 236              		.loc 1 298 1
 237 0082 1846     		mov	r0, r3
 238 0084 1837     		adds	r7, r7, #24
 239              	.LCFI8:
 240              		.cfi_def_cfa_offset 8
 241 0086 BD46     		mov	sp, r7
 242              	.LCFI9:
 243              		.cfi_def_cfa_register 13
 244              		@ sp needed
 245 0088 80BD     		pop	{r7, pc}
 246              	.L16:
 247 008a 00BF     		.align	2
 248              	.L15:
 249 008c 00000000 		.word	pFlash
 250 0090 00400058 		.word	1476411392
 251              		.cfi_endproc
 252              	.LFE845:
 254              		.section	.text.HAL_FLASH_IRQHandler,"ax",%progbits
 255              		.align	1
 256              		.global	HAL_FLASH_IRQHandler
 257              		.syntax unified
 258              		.thumb
 259              		.thumb_func
 261              	HAL_FLASH_IRQHandler:
 262              	.LFB846:
 299:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
 300:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** /**
 301:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   * @brief Handle FLASH interrupt request.
 302:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   * @retval None
 303:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   */
 304:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** void HAL_FLASH_IRQHandler(void)
 305:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** {
 263              		.loc 1 305 1
 264              		.cfi_startproc
 265              		@ args = 0, pretend = 0, frame = 8
 266              		@ frame_needed = 1, uses_anonymous_args = 0
 267 0000 80B5     		push	{r7, lr}
 268              	.LCFI10:
 269              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccuR5RPg.s 			page 11


 270              		.cfi_offset 7, -8
 271              		.cfi_offset 14, -4
 272 0002 82B0     		sub	sp, sp, #8
 273              	.LCFI11:
 274              		.cfi_def_cfa_offset 16
 275 0004 00AF     		add	r7, sp, #0
 276              	.LCFI12:
 277              		.cfi_def_cfa_register 7
 306:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   uint32_t param = 0xFFFFFFFFU;
 278              		.loc 1 306 12
 279 0006 4FF0FF33 		mov	r3, #-1
 280 000a 7B60     		str	r3, [r7, #4]
 307:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   uint32_t error;
 308:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
 309:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   /* Save flash errors. Only ECC detection can be checked here as ECCC
 310:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****      generates NMI */
 311:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** #ifdef CORE_CM0PLUS
 312:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   error = (FLASH->C2SR & FLASH_FLAG_SR_ERRORS);
 313:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
 314:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   /* Clear Current operation */
 315:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   CLEAR_BIT(FLASH->C2CR, pFlash.ProcedureOnGoing);
 316:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** #else
 317:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 281              		.loc 1 317 17
 282 000c 444B     		ldr	r3, .L29
 283 000e 1A69     		ldr	r2, [r3, #16]
 284              		.loc 1 317 9
 285 0010 4CF2FA33 		movw	r3, #50170
 286 0014 1340     		ands	r3, r3, r2
 287 0016 3B60     		str	r3, [r7]
 318:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
 319:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   /* Clear Current operation */
 320:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   CLEAR_BIT(FLASH->CR, pFlash.ProcedureOnGoing);
 288              		.loc 1 320 3
 289 0018 414B     		ldr	r3, .L29
 290 001a 5A69     		ldr	r2, [r3, #20]
 291 001c 414B     		ldr	r3, .L29+4
 292 001e 9B68     		ldr	r3, [r3, #8]
 293 0020 DB43     		mvns	r3, r3
 294 0022 3F49     		ldr	r1, .L29
 295 0024 1340     		ands	r3, r3, r2
 296 0026 4B61     		str	r3, [r1, #20]
 321:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** #endif
 322:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
 323:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   /* A] Set parameter for user or error callbacks */
 324:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   /* check operation was a program or erase */
 325:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   if ((pFlash.ProcedureOnGoing & (FLASH_TYPEPROGRAM_DOUBLEWORD | FLASH_TYPEPROGRAM_FAST)) != 0U)
 297              		.loc 1 325 14
 298 0028 3E4B     		ldr	r3, .L29+4
 299 002a 9A68     		ldr	r2, [r3, #8]
 300              		.loc 1 325 32
 301 002c 3E4B     		ldr	r3, .L29+8
 302 002e 1340     		ands	r3, r3, r2
 303              		.loc 1 325 6
 304 0030 002B     		cmp	r3, #0
 305 0032 03D0     		beq	.L18
 326:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   {
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccuR5RPg.s 			page 12


 327:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****     /* return address being programmed */
 328:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****     param = pFlash.Address;
 306              		.loc 1 328 11
 307 0034 3B4B     		ldr	r3, .L29+4
 308 0036 DB68     		ldr	r3, [r3, #12]
 309 0038 7B60     		str	r3, [r7, #4]
 310 003a 08E0     		b	.L19
 311              	.L18:
 329:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   }
 330:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   else if ((pFlash.ProcedureOnGoing & (FLASH_TYPEERASE_MASSERASE | FLASH_TYPEERASE_PAGES)) != 0U)
 312              		.loc 1 330 19
 313 003c 394B     		ldr	r3, .L29+4
 314 003e 9B68     		ldr	r3, [r3, #8]
 315              		.loc 1 330 37
 316 0040 03F00603 		and	r3, r3, #6
 317              		.loc 1 330 11
 318 0044 002B     		cmp	r3, #0
 319 0046 02D0     		beq	.L19
 331:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   {
 332:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****     /* return page number being erased (0 for mass erase) */
 333:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****     param = pFlash.Page;
 320              		.loc 1 333 11
 321 0048 364B     		ldr	r3, .L29+4
 322 004a 1B69     		ldr	r3, [r3, #16]
 323 004c 7B60     		str	r3, [r7, #4]
 324              	.L19:
 334:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   }
 335:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   else
 336:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   {
 337:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****     /* No Procedure on-going */
 338:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****     /* Nothing to do, but check error if any */
 339:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   }
 340:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
 341:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   /* B] Check errors */
 342:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   if (error != 0U)
 325              		.loc 1 342 6
 326 004e 3B68     		ldr	r3, [r7]
 327 0050 002B     		cmp	r3, #0
 328 0052 22D0     		beq	.L20
 343:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   {
 344:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****     /*Save the error code*/
 345:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****     pFlash.ErrorCode |= error;
 329              		.loc 1 345 22
 330 0054 334B     		ldr	r3, .L29+4
 331 0056 5A68     		ldr	r2, [r3, #4]
 332 0058 3B68     		ldr	r3, [r7]
 333 005a 1343     		orrs	r3, r3, r2
 334 005c 314A     		ldr	r2, .L29+4
 335 005e 5360     		str	r3, [r2, #4]
 346:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
 347:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****     /* clear error flags */
 348:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****     __HAL_FLASH_CLEAR_FLAG(error);
 336              		.loc 1 348 5
 337 0060 3B68     		ldr	r3, [r7]
 338 0062 03F04043 		and	r3, r3, #-1073741824
 339 0066 002B     		cmp	r3, #0
 340 0068 07D0     		beq	.L21
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccuR5RPg.s 			page 13


 341              		.loc 1 348 5 is_stmt 0 discriminator 1
 342 006a 2D4B     		ldr	r3, .L29
 343 006c 9A69     		ldr	r2, [r3, #24]
 344 006e 3B68     		ldr	r3, [r7]
 345 0070 03F04043 		and	r3, r3, #-1073741824
 346 0074 2A49     		ldr	r1, .L29
 347 0076 1343     		orrs	r3, r3, r2
 348 0078 8B61     		str	r3, [r1, #24]
 349              	.L21:
 350              		.loc 1 348 5 discriminator 3
 351 007a 3B68     		ldr	r3, [r7]
 352 007c 23F04043 		bic	r3, r3, #-1073741824
 353 0080 002B     		cmp	r3, #0
 354 0082 04D0     		beq	.L22
 355              		.loc 1 348 5 discriminator 4
 356 0084 264A     		ldr	r2, .L29
 357 0086 3B68     		ldr	r3, [r7]
 358 0088 23F04043 		bic	r3, r3, #-1073741824
 359 008c 1361     		str	r3, [r2, #16]
 360              	.L22:
 349:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
 350:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****     /*Stop the procedure ongoing*/
 351:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****     pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 361              		.loc 1 351 29 is_stmt 1
 362 008e 254B     		ldr	r3, .L29+4
 363 0090 0022     		movs	r2, #0
 364 0092 9A60     		str	r2, [r3, #8]
 352:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
 353:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****     /* Error callback */
 354:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****     HAL_FLASH_OperationErrorCallback(param);
 365              		.loc 1 354 5
 366 0094 7868     		ldr	r0, [r7, #4]
 367 0096 FFF7FEFF 		bl	HAL_FLASH_OperationErrorCallback
 368              	.L20:
 355:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   }
 356:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
 357:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   /* C] Check FLASH End of Operation flag */
 358:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 369              		.loc 1 358 7
 370 009a 214B     		ldr	r3, .L29
 371 009c 1B69     		ldr	r3, [r3, #16]
 372 009e 03F00103 		and	r3, r3, #1
 373              		.loc 1 358 6
 374 00a2 012B     		cmp	r3, #1
 375 00a4 24D1     		bne	.L23
 359:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   {
 360:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****     /* Clear FLASH End of Operation pending bit */
 361:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****     __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 376              		.loc 1 361 5 discriminator 4
 377 00a6 1E4B     		ldr	r3, .L29
 378 00a8 0122     		movs	r2, #1
 379 00aa 1A61     		str	r2, [r3, #16]
 362:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
 363:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****     if (pFlash.ProcedureOnGoing == FLASH_TYPEERASE_PAGES)
 380              		.loc 1 363 15 discriminator 4
 381 00ac 1D4B     		ldr	r3, .L29+4
 382 00ae 9B68     		ldr	r3, [r3, #8]
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccuR5RPg.s 			page 14


 383              		.loc 1 363 8 discriminator 4
 384 00b0 022B     		cmp	r3, #2
 385 00b2 17D1     		bne	.L24
 364:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****     {
 365:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****       /* Nb of pages to erased can be decreased */
 366:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****       pFlash.NbPagesToErase--;
 386              		.loc 1 366 13
 387 00b4 1B4B     		ldr	r3, .L29+4
 388 00b6 5B69     		ldr	r3, [r3, #20]
 389              		.loc 1 366 28
 390 00b8 013B     		subs	r3, r3, #1
 391 00ba 1A4A     		ldr	r2, .L29+4
 392 00bc 5361     		str	r3, [r2, #20]
 367:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
 368:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****       /* Check if there are still pages to erase*/
 369:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****       if (pFlash.NbPagesToErase != 0U)
 393              		.loc 1 369 17
 394 00be 194B     		ldr	r3, .L29+4
 395 00c0 5B69     		ldr	r3, [r3, #20]
 396              		.loc 1 369 10
 397 00c2 002B     		cmp	r3, #0
 398 00c4 0AD0     		beq	.L25
 370:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****       {
 371:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****         /* Increment page number */
 372:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****         pFlash.Page++;
 399              		.loc 1 372 15
 400 00c6 174B     		ldr	r3, .L29+4
 401 00c8 1B69     		ldr	r3, [r3, #16]
 402              		.loc 1 372 20
 403 00ca 0133     		adds	r3, r3, #1
 404 00cc 154A     		ldr	r2, .L29+4
 405 00ce 1361     		str	r3, [r2, #16]
 373:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****         FLASH_PageErase(pFlash.Page);
 406              		.loc 1 373 9
 407 00d0 144B     		ldr	r3, .L29+4
 408 00d2 1B69     		ldr	r3, [r3, #16]
 409 00d4 1846     		mov	r0, r3
 410 00d6 FFF7FEFF 		bl	FLASH_PageErase
 411 00da 06E0     		b	.L26
 412              	.L25:
 374:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****       }
 375:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****       else
 376:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****       {
 377:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****         /* No more pages to erase: stop erase pages procedure */
 378:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****         pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 413              		.loc 1 378 33
 414 00dc 114B     		ldr	r3, .L29+4
 415 00de 0022     		movs	r2, #0
 416 00e0 9A60     		str	r2, [r3, #8]
 417 00e2 02E0     		b	.L26
 418              	.L24:
 379:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****       }
 380:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****     }
 381:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****     else
 382:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****     {
 383:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****       /*Stop the ongoing procedure */
 384:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****       pFlash.ProcedureOnGoing = FLASH_TYPENONE;
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccuR5RPg.s 			page 15


 419              		.loc 1 384 31
 420 00e4 0F4B     		ldr	r3, .L29+4
 421 00e6 0022     		movs	r2, #0
 422 00e8 9A60     		str	r2, [r3, #8]
 423              	.L26:
 385:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****     }
 386:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
 387:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****     /* User callback */
 388:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****     HAL_FLASH_EndOfOperationCallback(param);
 424              		.loc 1 388 5
 425 00ea 7868     		ldr	r0, [r7, #4]
 426 00ec FFF7FEFF 		bl	HAL_FLASH_EndOfOperationCallback
 427              	.L23:
 389:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   }
 390:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
 391:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   if (pFlash.ProcedureOnGoing == FLASH_TYPENONE)
 428              		.loc 1 391 13
 429 00f0 0C4B     		ldr	r3, .L29+4
 430 00f2 9B68     		ldr	r3, [r3, #8]
 431              		.loc 1 391 6
 432 00f4 002B     		cmp	r3, #0
 433 00f6 0ED1     		bne	.L28
 392:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   {
 393:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****     /* Disable End of Operation and Error interrupts */
 394:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****     __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR | FLASH_IT_ECCC);
 434              		.loc 1 394 5 discriminator 1
 435 00f8 094B     		ldr	r3, .L29
 436 00fa 9B69     		ldr	r3, [r3, #24]
 437 00fc 084A     		ldr	r2, .L29
 438 00fe 23F08073 		bic	r3, r3, #16777216
 439 0102 9361     		str	r3, [r2, #24]
 440 0104 064B     		ldr	r3, .L29
 441 0106 5B69     		ldr	r3, [r3, #20]
 442 0108 054A     		ldr	r2, .L29
 443 010a 23F04073 		bic	r3, r3, #50331648
 444 010e 5361     		str	r3, [r2, #20]
 395:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
 396:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****     /* Process Unlocked */
 397:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****     __HAL_UNLOCK(&pFlash);
 445              		.loc 1 397 5 discriminator 1
 446 0110 044B     		ldr	r3, .L29+4
 447 0112 0022     		movs	r2, #0
 448 0114 1A70     		strb	r2, [r3]
 449              	.L28:
 398:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   }
 399:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** }
 450              		.loc 1 399 1
 451 0116 00BF     		nop
 452 0118 0837     		adds	r7, r7, #8
 453              	.LCFI13:
 454              		.cfi_def_cfa_offset 8
 455 011a BD46     		mov	sp, r7
 456              	.LCFI14:
 457              		.cfi_def_cfa_register 13
 458              		@ sp needed
 459 011c 80BD     		pop	{r7, pc}
 460              	.L30:
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccuR5RPg.s 			page 16


 461 011e 00BF     		.align	2
 462              	.L29:
 463 0120 00400058 		.word	1476411392
 464 0124 00000000 		.word	pFlash
 465 0128 01000400 		.word	262145
 466              		.cfi_endproc
 467              	.LFE846:
 469              		.section	.text.HAL_FLASH_EndOfOperationCallback,"ax",%progbits
 470              		.align	1
 471              		.weak	HAL_FLASH_EndOfOperationCallback
 472              		.syntax unified
 473              		.thumb
 474              		.thumb_func
 476              	HAL_FLASH_EndOfOperationCallback:
 477              	.LFB847:
 400:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
 401:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** /**
 402:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   * @brief  FLASH end of operation interrupt callback.
 403:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   * @param  ReturnValue The value saved in this parameter depends on the ongoing procedure
 404:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   *                  Mass Erase: 0
 405:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   *                  Page Erase: Page which has been erased
 406:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   *                  Program: Address which was selected for data program
 407:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   * @retval None
 408:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   */
 409:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** __weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
 410:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** {
 478              		.loc 1 410 1
 479              		.cfi_startproc
 480              		@ args = 0, pretend = 0, frame = 8
 481              		@ frame_needed = 1, uses_anonymous_args = 0
 482              		@ link register save eliminated.
 483 0000 80B4     		push	{r7}
 484              	.LCFI15:
 485              		.cfi_def_cfa_offset 4
 486              		.cfi_offset 7, -4
 487 0002 83B0     		sub	sp, sp, #12
 488              	.LCFI16:
 489              		.cfi_def_cfa_offset 16
 490 0004 00AF     		add	r7, sp, #0
 491              	.LCFI17:
 492              		.cfi_def_cfa_register 7
 493 0006 7860     		str	r0, [r7, #4]
 411:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   /* Prevent unused argument(s) compilation warning */
 412:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   UNUSED(ReturnValue);
 413:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
 414:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 415:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****             the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
 416:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****    */
 417:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** }
 494              		.loc 1 417 1
 495 0008 00BF     		nop
 496 000a 0C37     		adds	r7, r7, #12
 497              	.LCFI18:
 498              		.cfi_def_cfa_offset 4
 499 000c BD46     		mov	sp, r7
 500              	.LCFI19:
 501              		.cfi_def_cfa_register 13
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccuR5RPg.s 			page 17


 502              		@ sp needed
 503 000e 80BC     		pop	{r7}
 504              	.LCFI20:
 505              		.cfi_restore 7
 506              		.cfi_def_cfa_offset 0
 507 0010 7047     		bx	lr
 508              		.cfi_endproc
 509              	.LFE847:
 511              		.section	.text.HAL_FLASH_OperationErrorCallback,"ax",%progbits
 512              		.align	1
 513              		.weak	HAL_FLASH_OperationErrorCallback
 514              		.syntax unified
 515              		.thumb
 516              		.thumb_func
 518              	HAL_FLASH_OperationErrorCallback:
 519              	.LFB848:
 418:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
 419:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** /**
 420:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   * @brief  FLASH operation error interrupt callback.
 421:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   * @param  ReturnValue The value saved in this parameter depends on the ongoing procedure
 422:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   *                 Mass Erase: 0
 423:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   *                 Page Erase: Page number which returned an error
 424:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   *                 Program: Address which was selected for data program
 425:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   * @retval None
 426:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   */
 427:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** __weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
 428:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** {
 520              		.loc 1 428 1
 521              		.cfi_startproc
 522              		@ args = 0, pretend = 0, frame = 8
 523              		@ frame_needed = 1, uses_anonymous_args = 0
 524              		@ link register save eliminated.
 525 0000 80B4     		push	{r7}
 526              	.LCFI21:
 527              		.cfi_def_cfa_offset 4
 528              		.cfi_offset 7, -4
 529 0002 83B0     		sub	sp, sp, #12
 530              	.LCFI22:
 531              		.cfi_def_cfa_offset 16
 532 0004 00AF     		add	r7, sp, #0
 533              	.LCFI23:
 534              		.cfi_def_cfa_register 7
 535 0006 7860     		str	r0, [r7, #4]
 429:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   /* Prevent unused argument(s) compilation warning */
 430:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   UNUSED(ReturnValue);
 431:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
 432:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 433:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****             the HAL_FLASH_OperationErrorCallback could be implemented in the user file
 434:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****    */
 435:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** }
 536              		.loc 1 435 1
 537 0008 00BF     		nop
 538 000a 0C37     		adds	r7, r7, #12
 539              	.LCFI24:
 540              		.cfi_def_cfa_offset 4
 541 000c BD46     		mov	sp, r7
 542              	.LCFI25:
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccuR5RPg.s 			page 18


 543              		.cfi_def_cfa_register 13
 544              		@ sp needed
 545 000e 80BC     		pop	{r7}
 546              	.LCFI26:
 547              		.cfi_restore 7
 548              		.cfi_def_cfa_offset 0
 549 0010 7047     		bx	lr
 550              		.cfi_endproc
 551              	.LFE848:
 553              		.section	.text.HAL_FLASH_Unlock,"ax",%progbits
 554              		.align	1
 555              		.global	HAL_FLASH_Unlock
 556              		.syntax unified
 557              		.thumb
 558              		.thumb_func
 560              	HAL_FLASH_Unlock:
 561              	.LFB849:
 436:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
 437:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** /**
 438:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   * @}
 439:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   */
 440:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
 441:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** /** @defgroup FLASH_Exported_Functions_Group2 Peripheral Control functions
 442:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****  *  @brief   Management functions
 443:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****  *
 444:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** @verbatim
 445:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****  ===============================================================================
 446:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****                       ##### Peripheral Control functions #####
 447:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****  ===============================================================================
 448:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****     [..]
 449:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****     This subsection provides a set of functions allowing to control the FLASH
 450:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****     memory operations.
 451:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
 452:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** @endverbatim
 453:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   * @{
 454:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   */
 455:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
 456:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** /**
 457:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   * @brief  Unlock the FLASH control register access.
 458:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   * @retval HAL Status
 459:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   */
 460:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** HAL_StatusTypeDef HAL_FLASH_Unlock(void)
 461:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** {
 562              		.loc 1 461 1
 563              		.cfi_startproc
 564              		@ args = 0, pretend = 0, frame = 8
 565              		@ frame_needed = 1, uses_anonymous_args = 0
 566              		@ link register save eliminated.
 567 0000 80B4     		push	{r7}
 568              	.LCFI27:
 569              		.cfi_def_cfa_offset 4
 570              		.cfi_offset 7, -4
 571 0002 83B0     		sub	sp, sp, #12
 572              	.LCFI28:
 573              		.cfi_def_cfa_offset 16
 574 0004 00AF     		add	r7, sp, #0
 575              	.LCFI29:
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccuR5RPg.s 			page 19


 576              		.cfi_def_cfa_register 7
 462:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   HAL_StatusTypeDef status = HAL_OK;
 577              		.loc 1 462 21
 578 0006 0023     		movs	r3, #0
 579 0008 FB71     		strb	r3, [r7, #7]
 463:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
 464:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 580              		.loc 1 464 7
 581 000a 0B4B     		ldr	r3, .L36
 582 000c 5B69     		ldr	r3, [r3, #20]
 583              		.loc 1 464 6
 584 000e 002B     		cmp	r3, #0
 585 0010 0BDA     		bge	.L34
 465:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   {
 466:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****     /* Authorize the FLASH Registers access */
 467:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****     WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 586              		.loc 1 467 5
 587 0012 094B     		ldr	r3, .L36
 588 0014 094A     		ldr	r2, .L36+4
 589 0016 9A60     		str	r2, [r3, #8]
 468:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****     WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 590              		.loc 1 468 5
 591 0018 074B     		ldr	r3, .L36
 592 001a 094A     		ldr	r2, .L36+8
 593 001c 9A60     		str	r2, [r3, #8]
 469:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
 470:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****     /* verify Flash is unlock */
 471:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****     if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 594              		.loc 1 471 9
 595 001e 064B     		ldr	r3, .L36
 596 0020 5B69     		ldr	r3, [r3, #20]
 597              		.loc 1 471 8
 598 0022 002B     		cmp	r3, #0
 599 0024 01DA     		bge	.L34
 472:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****     {
 473:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****       status = HAL_ERROR;
 600              		.loc 1 473 14
 601 0026 0123     		movs	r3, #1
 602 0028 FB71     		strb	r3, [r7, #7]
 603              	.L34:
 474:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****     }
 475:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   }
 476:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
 477:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   return status;
 604              		.loc 1 477 10
 605 002a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 478:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** }
 606              		.loc 1 478 1
 607 002c 1846     		mov	r0, r3
 608 002e 0C37     		adds	r7, r7, #12
 609              	.LCFI30:
 610              		.cfi_def_cfa_offset 4
 611 0030 BD46     		mov	sp, r7
 612              	.LCFI31:
 613              		.cfi_def_cfa_register 13
 614              		@ sp needed
 615 0032 80BC     		pop	{r7}
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccuR5RPg.s 			page 20


 616              	.LCFI32:
 617              		.cfi_restore 7
 618              		.cfi_def_cfa_offset 0
 619 0034 7047     		bx	lr
 620              	.L37:
 621 0036 00BF     		.align	2
 622              	.L36:
 623 0038 00400058 		.word	1476411392
 624 003c 23016745 		.word	1164378403
 625 0040 AB89EFCD 		.word	-839939669
 626              		.cfi_endproc
 627              	.LFE849:
 629              		.section	.text.HAL_FLASH_Lock,"ax",%progbits
 630              		.align	1
 631              		.global	HAL_FLASH_Lock
 632              		.syntax unified
 633              		.thumb
 634              		.thumb_func
 636              	HAL_FLASH_Lock:
 637              	.LFB850:
 479:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
 480:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** /**
 481:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   * @brief  Lock the FLASH control register access.
 482:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   * @retval HAL Status
 483:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   */
 484:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** HAL_StatusTypeDef HAL_FLASH_Lock(void)
 485:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** {
 638              		.loc 1 485 1
 639              		.cfi_startproc
 640              		@ args = 0, pretend = 0, frame = 8
 641              		@ frame_needed = 1, uses_anonymous_args = 0
 642              		@ link register save eliminated.
 643 0000 80B4     		push	{r7}
 644              	.LCFI33:
 645              		.cfi_def_cfa_offset 4
 646              		.cfi_offset 7, -4
 647 0002 83B0     		sub	sp, sp, #12
 648              	.LCFI34:
 649              		.cfi_def_cfa_offset 16
 650 0004 00AF     		add	r7, sp, #0
 651              	.LCFI35:
 652              		.cfi_def_cfa_register 7
 486:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   HAL_StatusTypeDef status = HAL_OK;
 653              		.loc 1 486 21
 654 0006 0023     		movs	r3, #0
 655 0008 FB71     		strb	r3, [r7, #7]
 487:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
 488:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   /* Set the LOCK Bit to lock the FLASH Registers access */
 489:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
 490:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 656              		.loc 1 490 3
 657 000a 094B     		ldr	r3, .L41
 658 000c 5B69     		ldr	r3, [r3, #20]
 659 000e 084A     		ldr	r2, .L41
 660 0010 43F00043 		orr	r3, r3, #-2147483648
 661 0014 5361     		str	r3, [r2, #20]
 491:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccuR5RPg.s 			page 21


 492:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   /* verify Flash is locked */
 493:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 662              		.loc 1 493 7
 663 0016 064B     		ldr	r3, .L41
 664 0018 5B69     		ldr	r3, [r3, #20]
 665              		.loc 1 493 6
 666 001a 002B     		cmp	r3, #0
 667 001c 01DB     		blt	.L39
 494:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   {
 495:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****     status = HAL_ERROR;
 668              		.loc 1 495 12
 669 001e 0123     		movs	r3, #1
 670 0020 FB71     		strb	r3, [r7, #7]
 671              	.L39:
 496:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   }
 497:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
 498:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   return status;
 672              		.loc 1 498 10
 673 0022 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 499:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** }
 674              		.loc 1 499 1
 675 0024 1846     		mov	r0, r3
 676 0026 0C37     		adds	r7, r7, #12
 677              	.LCFI36:
 678              		.cfi_def_cfa_offset 4
 679 0028 BD46     		mov	sp, r7
 680              	.LCFI37:
 681              		.cfi_def_cfa_register 13
 682              		@ sp needed
 683 002a 80BC     		pop	{r7}
 684              	.LCFI38:
 685              		.cfi_restore 7
 686              		.cfi_def_cfa_offset 0
 687 002c 7047     		bx	lr
 688              	.L42:
 689 002e 00BF     		.align	2
 690              	.L41:
 691 0030 00400058 		.word	1476411392
 692              		.cfi_endproc
 693              	.LFE850:
 695              		.section	.text.HAL_FLASH_OB_Unlock,"ax",%progbits
 696              		.align	1
 697              		.global	HAL_FLASH_OB_Unlock
 698              		.syntax unified
 699              		.thumb
 700              		.thumb_func
 702              	HAL_FLASH_OB_Unlock:
 703              	.LFB851:
 500:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
 501:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** /**
 502:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   * @brief  Unlock the FLASH Option Bytes Registers access.
 503:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   * @retval HAL Status
 504:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   */
 505:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
 506:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** {
 704              		.loc 1 506 1
 705              		.cfi_startproc
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccuR5RPg.s 			page 22


 706              		@ args = 0, pretend = 0, frame = 8
 707              		@ frame_needed = 1, uses_anonymous_args = 0
 708              		@ link register save eliminated.
 709 0000 80B4     		push	{r7}
 710              	.LCFI39:
 711              		.cfi_def_cfa_offset 4
 712              		.cfi_offset 7, -4
 713 0002 83B0     		sub	sp, sp, #12
 714              	.LCFI40:
 715              		.cfi_def_cfa_offset 16
 716 0004 00AF     		add	r7, sp, #0
 717              	.LCFI41:
 718              		.cfi_def_cfa_register 7
 507:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 719              		.loc 1 507 21
 720 0006 0123     		movs	r3, #1
 721 0008 FB71     		strb	r3, [r7, #7]
 508:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
 509:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   /* @Note The lock and unlock procedure is done only using CR registers even from CPU2 */
 510:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0U)
 722              		.loc 1 510 7
 723 000a 0D4B     		ldr	r3, .L46
 724 000c 5B69     		ldr	r3, [r3, #20]
 725 000e 03F08043 		and	r3, r3, #1073741824
 726              		.loc 1 510 6
 727 0012 002B     		cmp	r3, #0
 728 0014 0DD0     		beq	.L44
 511:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   {
 512:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****     /* Authorizes the Option Byte register programming */
 513:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****     WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 729              		.loc 1 513 5
 730 0016 0A4B     		ldr	r3, .L46
 731 0018 0A4A     		ldr	r2, .L46+4
 732 001a DA60     		str	r2, [r3, #12]
 514:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****     WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 733              		.loc 1 514 5
 734 001c 084B     		ldr	r3, .L46
 735 001e 0A4A     		ldr	r2, .L46+8
 736 0020 DA60     		str	r2, [r3, #12]
 515:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
 516:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****     /* verify option bytes are unlocked */
 517:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****     if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) == 0U)
 737              		.loc 1 517 9
 738 0022 074B     		ldr	r3, .L46
 739 0024 5B69     		ldr	r3, [r3, #20]
 740 0026 03F08043 		and	r3, r3, #1073741824
 741              		.loc 1 517 8
 742 002a 002B     		cmp	r3, #0
 743 002c 01D1     		bne	.L44
 518:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****     {
 519:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****       status = HAL_OK;
 744              		.loc 1 519 14
 745 002e 0023     		movs	r3, #0
 746 0030 FB71     		strb	r3, [r7, #7]
 747              	.L44:
 520:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****     }
 521:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   }
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccuR5RPg.s 			page 23


 522:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
 523:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   return status;
 748              		.loc 1 523 10
 749 0032 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 524:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** }
 750              		.loc 1 524 1
 751 0034 1846     		mov	r0, r3
 752 0036 0C37     		adds	r7, r7, #12
 753              	.LCFI42:
 754              		.cfi_def_cfa_offset 4
 755 0038 BD46     		mov	sp, r7
 756              	.LCFI43:
 757              		.cfi_def_cfa_register 13
 758              		@ sp needed
 759 003a 80BC     		pop	{r7}
 760              	.LCFI44:
 761              		.cfi_restore 7
 762              		.cfi_def_cfa_offset 0
 763 003c 7047     		bx	lr
 764              	.L47:
 765 003e 00BF     		.align	2
 766              	.L46:
 767 0040 00400058 		.word	1476411392
 768 0044 3B2A1908 		.word	135866939
 769 0048 7F6E5D4C 		.word	1281191551
 770              		.cfi_endproc
 771              	.LFE851:
 773              		.section	.text.HAL_FLASH_OB_Lock,"ax",%progbits
 774              		.align	1
 775              		.global	HAL_FLASH_OB_Lock
 776              		.syntax unified
 777              		.thumb
 778              		.thumb_func
 780              	HAL_FLASH_OB_Lock:
 781              	.LFB852:
 525:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
 526:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** /**
 527:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   * @brief  Lock the FLASH Option Bytes Registers access.
 528:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   * @retval HAL Status
 529:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   */
 530:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
 531:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** {
 782              		.loc 1 531 1
 783              		.cfi_startproc
 784              		@ args = 0, pretend = 0, frame = 8
 785              		@ frame_needed = 1, uses_anonymous_args = 0
 786              		@ link register save eliminated.
 787 0000 80B4     		push	{r7}
 788              	.LCFI45:
 789              		.cfi_def_cfa_offset 4
 790              		.cfi_offset 7, -4
 791 0002 83B0     		sub	sp, sp, #12
 792              	.LCFI46:
 793              		.cfi_def_cfa_offset 16
 794 0004 00AF     		add	r7, sp, #0
 795              	.LCFI47:
 796              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccuR5RPg.s 			page 24


 532:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   HAL_StatusTypeDef status = HAL_OK;
 797              		.loc 1 532 21
 798 0006 0023     		movs	r3, #0
 799 0008 FB71     		strb	r3, [r7, #7]
 533:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
 534:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
 535:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   /* @Note The lock and unlock procedure is done only using CR registers even from CPU2 */
 536:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   SET_BIT(FLASH->CR, FLASH_CR_OPTLOCK);
 800              		.loc 1 536 3
 801 000a 0A4B     		ldr	r3, .L51
 802 000c 5B69     		ldr	r3, [r3, #20]
 803 000e 094A     		ldr	r2, .L51
 804 0010 43F08043 		orr	r3, r3, #1073741824
 805 0014 5361     		str	r3, [r2, #20]
 537:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
 538:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   /* verify option bytes are lock */
 539:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) == 0U)
 806              		.loc 1 539 7
 807 0016 074B     		ldr	r3, .L51
 808 0018 5B69     		ldr	r3, [r3, #20]
 809 001a 03F08043 		and	r3, r3, #1073741824
 810              		.loc 1 539 6
 811 001e 002B     		cmp	r3, #0
 812 0020 01D1     		bne	.L49
 540:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   {
 541:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****     status = HAL_ERROR;
 813              		.loc 1 541 12
 814 0022 0123     		movs	r3, #1
 815 0024 FB71     		strb	r3, [r7, #7]
 816              	.L49:
 542:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   }
 543:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
 544:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   return status;
 817              		.loc 1 544 10
 818 0026 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 545:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** }
 819              		.loc 1 545 1
 820 0028 1846     		mov	r0, r3
 821 002a 0C37     		adds	r7, r7, #12
 822              	.LCFI48:
 823              		.cfi_def_cfa_offset 4
 824 002c BD46     		mov	sp, r7
 825              	.LCFI49:
 826              		.cfi_def_cfa_register 13
 827              		@ sp needed
 828 002e 80BC     		pop	{r7}
 829              	.LCFI50:
 830              		.cfi_restore 7
 831              		.cfi_def_cfa_offset 0
 832 0030 7047     		bx	lr
 833              	.L52:
 834 0032 00BF     		.align	2
 835              	.L51:
 836 0034 00400058 		.word	1476411392
 837              		.cfi_endproc
 838              	.LFE852:
 840              		.section	.text.HAL_FLASH_OB_Launch,"ax",%progbits
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccuR5RPg.s 			page 25


 841              		.align	1
 842              		.global	HAL_FLASH_OB_Launch
 843              		.syntax unified
 844              		.thumb
 845              		.thumb_func
 847              	HAL_FLASH_OB_Launch:
 848              	.LFB853:
 546:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
 547:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** /**
 548:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   * @brief  Launch the option byte loading.
 549:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   * @retval HAL Status
 550:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   */
 551:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
 552:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** {
 849              		.loc 1 552 1
 850              		.cfi_startproc
 851              		@ args = 0, pretend = 0, frame = 0
 852              		@ frame_needed = 1, uses_anonymous_args = 0
 853              		@ link register save eliminated.
 854 0000 80B4     		push	{r7}
 855              	.LCFI51:
 856              		.cfi_def_cfa_offset 4
 857              		.cfi_offset 7, -4
 858 0002 00AF     		add	r7, sp, #0
 859              	.LCFI52:
 860              		.cfi_def_cfa_register 7
 553:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   /* Set the bit to force the option byte reloading */
 554:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   /* The OB launch is done from the same register either from CPU1 or CPU2 */
 555:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   SET_BIT(FLASH->CR, FLASH_CR_OBL_LAUNCH);
 861              		.loc 1 555 3
 862 0004 054B     		ldr	r3, .L55
 863 0006 5B69     		ldr	r3, [r3, #20]
 864 0008 044A     		ldr	r2, .L55
 865 000a 43F00063 		orr	r3, r3, #134217728
 866 000e 5361     		str	r3, [r2, #20]
 556:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
 557:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   /* We should not reach here : Option byte launch generates Option byte reset
 558:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****      so return error */
 559:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   return HAL_ERROR;
 867              		.loc 1 559 10
 868 0010 0123     		movs	r3, #1
 560:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** }
 869              		.loc 1 560 1
 870 0012 1846     		mov	r0, r3
 871 0014 BD46     		mov	sp, r7
 872              	.LCFI53:
 873              		.cfi_def_cfa_register 13
 874              		@ sp needed
 875 0016 80BC     		pop	{r7}
 876              	.LCFI54:
 877              		.cfi_restore 7
 878              		.cfi_def_cfa_offset 0
 879 0018 7047     		bx	lr
 880              	.L56:
 881 001a 00BF     		.align	2
 882              	.L55:
 883 001c 00400058 		.word	1476411392
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccuR5RPg.s 			page 26


 884              		.cfi_endproc
 885              	.LFE853:
 887              		.section	.text.HAL_FLASH_GetError,"ax",%progbits
 888              		.align	1
 889              		.global	HAL_FLASH_GetError
 890              		.syntax unified
 891              		.thumb
 892              		.thumb_func
 894              	HAL_FLASH_GetError:
 895              	.LFB854:
 561:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
 562:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** /**
 563:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   * @}
 564:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   */
 565:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
 566:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** /** @defgroup FLASH_Exported_Functions_Group3 Peripheral State and Errors functions
 567:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****  *  @brief   Peripheral Errors functions
 568:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****  *
 569:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** @verbatim
 570:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****  ===============================================================================
 571:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****                 ##### Peripheral Errors functions #####
 572:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****  ===============================================================================
 573:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****     [..]
 574:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****     This subsection permits to get in run-time Errors of the FLASH peripheral.
 575:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
 576:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** @endverbatim
 577:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   * @{
 578:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   */
 579:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
 580:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** /**
 581:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   * @brief  Get the specific FLASH error flag.
 582:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   * @retval FLASH_ErrorCode The returned value can be
 583:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   *            @arg @ref HAL_FLASH_ERROR_NONE No error set
 584:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   *            @arg @ref HAL_FLASH_ERROR_OP FLASH Operation error
 585:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   *            @arg @ref HAL_FLASH_ERROR_PROG FLASH Programming error
 586:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   *            @arg @ref HAL_FLASH_ERROR_WRP FLASH Write protection error
 587:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   *            @arg @ref HAL_FLASH_ERROR_PGA FLASH Programming alignment error
 588:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   *            @arg @ref HAL_FLASH_ERROR_SIZ FLASH Size error
 589:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   *            @arg @ref HAL_FLASH_ERROR_PGS FLASH Programming sequence error
 590:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   *            @arg @ref HAL_FLASH_ERROR_MIS FLASH Fast programming data miss error
 591:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   *            @arg @ref HAL_FLASH_ERROR_FAST FLASH Fast programming error
 592:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   *            @arg @ref HAL_FLASH_ERROR_RD FLASH Read Protection error (PCROP)
 593:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   *            @arg @ref HAL_FLASH_ERROR_OPTV FLASH Option validity error
 594:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   */
 595:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** uint32_t HAL_FLASH_GetError(void)
 596:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** {
 896              		.loc 1 596 1
 897              		.cfi_startproc
 898              		@ args = 0, pretend = 0, frame = 0
 899              		@ frame_needed = 1, uses_anonymous_args = 0
 900              		@ link register save eliminated.
 901 0000 80B4     		push	{r7}
 902              	.LCFI55:
 903              		.cfi_def_cfa_offset 4
 904              		.cfi_offset 7, -4
 905 0002 00AF     		add	r7, sp, #0
 906              	.LCFI56:
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccuR5RPg.s 			page 27


 907              		.cfi_def_cfa_register 7
 597:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   return pFlash.ErrorCode;
 908              		.loc 1 597 16
 909 0004 024B     		ldr	r3, .L59
 910 0006 5B68     		ldr	r3, [r3, #4]
 598:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** }
 911              		.loc 1 598 1
 912 0008 1846     		mov	r0, r3
 913 000a BD46     		mov	sp, r7
 914              	.LCFI57:
 915              		.cfi_def_cfa_register 13
 916              		@ sp needed
 917 000c 80BC     		pop	{r7}
 918              	.LCFI58:
 919              		.cfi_restore 7
 920              		.cfi_def_cfa_offset 0
 921 000e 7047     		bx	lr
 922              	.L60:
 923              		.align	2
 924              	.L59:
 925 0010 00000000 		.word	pFlash
 926              		.cfi_endproc
 927              	.LFE854:
 929              		.section	.text.FLASH_WaitForLastOperation,"ax",%progbits
 930              		.align	1
 931              		.global	FLASH_WaitForLastOperation
 932              		.syntax unified
 933              		.thumb
 934              		.thumb_func
 936              	FLASH_WaitForLastOperation:
 937              	.LFB855:
 599:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
 600:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** /**
 601:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   * @}
 602:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   */
 603:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
 604:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** /**
 605:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   * @}
 606:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   */
 607:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
 608:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** /* Private functions ---------------------------------------------------------*/
 609:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
 610:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** /** @addtogroup FLASH_Private_Functions
 611:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   * @{
 612:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   */
 613:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
 614:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** /**
 615:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   * @brief  Wait for a FLASH operation to complete.
 616:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   * @param  Timeout Maximum flash operation timeout
 617:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   * @retval HAL_StatusTypeDef HAL Status
 618:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   */
 619:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
 620:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** {
 938              		.loc 1 620 1
 939              		.cfi_startproc
 940              		@ args = 0, pretend = 0, frame = 16
 941              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccuR5RPg.s 			page 28


 942 0000 80B5     		push	{r7, lr}
 943              	.LCFI59:
 944              		.cfi_def_cfa_offset 8
 945              		.cfi_offset 7, -8
 946              		.cfi_offset 14, -4
 947 0002 84B0     		sub	sp, sp, #16
 948              	.LCFI60:
 949              		.cfi_def_cfa_offset 24
 950 0004 00AF     		add	r7, sp, #0
 951              	.LCFI61:
 952              		.cfi_def_cfa_register 7
 953 0006 7860     		str	r0, [r7, #4]
 621:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   uint32_t error;
 622:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   uint32_t tickstart = HAL_GetTick();
 954              		.loc 1 622 24
 955 0008 FFF7FEFF 		bl	HAL_GetTick
 956 000c F860     		str	r0, [r7, #12]
 623:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
 624:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
 625:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****      Even if the FLASH operation fails, the BUSY flag will be reset and an error
 626:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****      flag will be set */
 627:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 957              		.loc 1 627 9
 958 000e 09E0     		b	.L62
 959              	.L64:
 628:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   {
 629:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****     if ((HAL_GetTick() - tickstart) >= Timeout)
 960              		.loc 1 629 10
 961 0010 FFF7FEFF 		bl	HAL_GetTick
 962 0014 0246     		mov	r2, r0
 963              		.loc 1 629 24
 964 0016 FB68     		ldr	r3, [r7, #12]
 965 0018 D31A     		subs	r3, r2, r3
 966              		.loc 1 629 8
 967 001a 7A68     		ldr	r2, [r7, #4]
 968 001c 9A42     		cmp	r2, r3
 969 001e 01D8     		bhi	.L62
 630:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****     {
 631:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****       return HAL_TIMEOUT;
 970              		.loc 1 631 14
 971 0020 0323     		movs	r3, #3
 972 0022 47E0     		b	.L63
 973              	.L62:
 627:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   {
 974              		.loc 1 627 10
 975 0024 254B     		ldr	r3, .L71
 976 0026 1B69     		ldr	r3, [r3, #16]
 977 0028 03F48033 		and	r3, r3, #65536
 627:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   {
 978              		.loc 1 627 9
 979 002c B3F5803F 		cmp	r3, #65536
 980 0030 EED0     		beq	.L64
 632:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****     }
 633:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   }
 634:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
 635:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   /* check flash errors. Only ECC correction can be checked here as ECCD
 636:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****       generates NMI */
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccuR5RPg.s 			page 29


 637:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** #ifdef CORE_CM0PLUS
 638:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   error = FLASH->C2SR;
 639:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** #else
 640:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   error = FLASH->SR;
 981              		.loc 1 640 16
 982 0032 224B     		ldr	r3, .L71
 983              		.loc 1 640 9
 984 0034 1B69     		ldr	r3, [r3, #16]
 985 0036 BB60     		str	r3, [r7, #8]
 641:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** #endif
 642:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
 643:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   /* Check FLASH End of Operation flag */
 644:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   if ((error & FLASH_FLAG_EOP) != 0U)
 986              		.loc 1 644 14
 987 0038 BB68     		ldr	r3, [r7, #8]
 988 003a 03F00103 		and	r3, r3, #1
 989              		.loc 1 644 6
 990 003e 002B     		cmp	r3, #0
 991 0040 02D0     		beq	.L65
 645:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   {
 646:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****     /* Clear FLASH End of Operation pending bit */
 647:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****     __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 992              		.loc 1 647 5 discriminator 4
 993 0042 1E4B     		ldr	r3, .L71
 994 0044 0122     		movs	r2, #1
 995 0046 1A61     		str	r2, [r3, #16]
 996              	.L65:
 648:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   }
 649:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
 650:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   /* Now update error variable to only error value */
 651:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   error &= FLASH_FLAG_SR_ERRORS;
 997              		.loc 1 651 9
 998 0048 BA68     		ldr	r2, [r7, #8]
 999 004a 4CF2FA33 		movw	r3, #50170
 1000 004e 1340     		ands	r3, r3, r2
 1001 0050 BB60     		str	r3, [r7, #8]
 652:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
 653:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   /* clear error flags */
 654:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   __HAL_FLASH_CLEAR_FLAG(error);
 1002              		.loc 1 654 3
 1003 0052 BB68     		ldr	r3, [r7, #8]
 1004 0054 03F04043 		and	r3, r3, #-1073741824
 1005 0058 002B     		cmp	r3, #0
 1006 005a 07D0     		beq	.L66
 1007              		.loc 1 654 3 is_stmt 0 discriminator 1
 1008 005c 174B     		ldr	r3, .L71
 1009 005e 9A69     		ldr	r2, [r3, #24]
 1010 0060 BB68     		ldr	r3, [r7, #8]
 1011 0062 03F04043 		and	r3, r3, #-1073741824
 1012 0066 1549     		ldr	r1, .L71
 1013 0068 1343     		orrs	r3, r3, r2
 1014 006a 8B61     		str	r3, [r1, #24]
 1015              	.L66:
 1016              		.loc 1 654 3 discriminator 3
 1017 006c BB68     		ldr	r3, [r7, #8]
 1018 006e 23F04043 		bic	r3, r3, #-1073741824
 1019 0072 002B     		cmp	r3, #0
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccuR5RPg.s 			page 30


 1020 0074 04D0     		beq	.L67
 1021              		.loc 1 654 3 discriminator 4
 1022 0076 114A     		ldr	r2, .L71
 1023 0078 BB68     		ldr	r3, [r7, #8]
 1024 007a 23F04043 		bic	r3, r3, #-1073741824
 1025 007e 1361     		str	r3, [r2, #16]
 1026              	.L67:
 655:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
 656:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   if (error != 0U)
 1027              		.loc 1 656 6 is_stmt 1
 1028 0080 BB68     		ldr	r3, [r7, #8]
 1029 0082 002B     		cmp	r3, #0
 1030 0084 0ED0     		beq	.L69
 657:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   {
 658:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****     /*Save the error code*/
 659:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****     pFlash.ErrorCode = error;
 1031              		.loc 1 659 22
 1032 0086 0E4A     		ldr	r2, .L71+4
 1033 0088 BB68     		ldr	r3, [r7, #8]
 1034 008a 5360     		str	r3, [r2, #4]
 660:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
 661:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****     return HAL_ERROR;
 1035              		.loc 1 661 12
 1036 008c 0123     		movs	r3, #1
 1037 008e 11E0     		b	.L63
 1038              	.L70:
 662:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   }
 663:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
 664:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   /* Wait for control register to be written */
 665:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 666:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   {
 667:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****     if ((HAL_GetTick() - tickstart) >= Timeout)
 1039              		.loc 1 667 10
 1040 0090 FFF7FEFF 		bl	HAL_GetTick
 1041 0094 0246     		mov	r2, r0
 1042              		.loc 1 667 24
 1043 0096 FB68     		ldr	r3, [r7, #12]
 1044 0098 D31A     		subs	r3, r2, r3
 1045              		.loc 1 667 8
 1046 009a 7A68     		ldr	r2, [r7, #4]
 1047 009c 9A42     		cmp	r2, r3
 1048 009e 01D8     		bhi	.L69
 668:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****     {
 669:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****       return HAL_TIMEOUT;
 1049              		.loc 1 669 14
 1050 00a0 0323     		movs	r3, #3
 1051 00a2 07E0     		b	.L63
 1052              	.L69:
 665:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   {
 1053              		.loc 1 665 10
 1054 00a4 054B     		ldr	r3, .L71
 1055 00a6 1B69     		ldr	r3, [r3, #16]
 1056 00a8 03F48023 		and	r3, r3, #262144
 665:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   {
 1057              		.loc 1 665 9
 1058 00ac B3F5802F 		cmp	r3, #262144
 1059 00b0 EED0     		beq	.L70
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccuR5RPg.s 			page 31


 670:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****     }
 671:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   }
 672:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
 673:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   return HAL_OK;
 1060              		.loc 1 673 10
 1061 00b2 0023     		movs	r3, #0
 1062              	.L63:
 674:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** }
 1063              		.loc 1 674 1
 1064 00b4 1846     		mov	r0, r3
 1065 00b6 1037     		adds	r7, r7, #16
 1066              	.LCFI62:
 1067              		.cfi_def_cfa_offset 8
 1068 00b8 BD46     		mov	sp, r7
 1069              	.LCFI63:
 1070              		.cfi_def_cfa_register 13
 1071              		@ sp needed
 1072 00ba 80BD     		pop	{r7, pc}
 1073              	.L72:
 1074              		.align	2
 1075              	.L71:
 1076 00bc 00400058 		.word	1476411392
 1077 00c0 00000000 		.word	pFlash
 1078              		.cfi_endproc
 1079              	.LFE855:
 1081              		.section	.text.FLASH_Program_DoubleWord,"ax",%progbits
 1082              		.align	1
 1083              		.syntax unified
 1084              		.thumb
 1085              		.thumb_func
 1087              	FLASH_Program_DoubleWord:
 1088              	.LFB856:
 675:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
 676:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** /**
 677:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   * @brief  Program double-word (64-bit) at a specified address.
 678:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   * @param  Address Specifies the address to be programmed.
 679:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   * @param  Data Specifies the data to be programmed.
 680:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   * @retval None
 681:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   */
 682:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
 683:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** {
 1089              		.loc 1 683 1
 1090              		.cfi_startproc
 1091              		@ args = 0, pretend = 0, frame = 16
 1092              		@ frame_needed = 1, uses_anonymous_args = 0
 1093              		@ link register save eliminated.
 1094 0000 80B4     		push	{r7}
 1095              	.LCFI64:
 1096              		.cfi_def_cfa_offset 4
 1097              		.cfi_offset 7, -4
 1098 0002 85B0     		sub	sp, sp, #20
 1099              	.LCFI65:
 1100              		.cfi_def_cfa_offset 24
 1101 0004 00AF     		add	r7, sp, #0
 1102              	.LCFI66:
 1103              		.cfi_def_cfa_register 7
 1104 0006 F860     		str	r0, [r7, #12]
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccuR5RPg.s 			page 32


 1105 0008 C7E90023 		strd	r2, [r7]
 684:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** #ifdef CORE_CM0PLUS
 685:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   /* Set PG bit */
 686:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   SET_BIT(FLASH->C2CR, FLASH_CR_PG);
 687:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** #else
 688:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   /* Set PG bit */
 689:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   SET_BIT(FLASH->CR, FLASH_CR_PG);
 1106              		.loc 1 689 3
 1107 000c 0E4B     		ldr	r3, .L74
 1108 000e 5B69     		ldr	r3, [r3, #20]
 1109 0010 0D4A     		ldr	r2, .L74
 1110 0012 43F00103 		orr	r3, r3, #1
 1111 0016 5361     		str	r3, [r2, #20]
 690:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** #endif
 691:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
 692:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   /* Program first word */
 693:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   *(uint32_t *)Address = (uint32_t)Data;
 1112              		.loc 1 693 4
 1113 0018 FB68     		ldr	r3, [r7, #12]
 1114              		.loc 1 693 26
 1115 001a 3A68     		ldr	r2, [r7]
 1116              		.loc 1 693 24
 1117 001c 1A60     		str	r2, [r3]
 1118              	.LBB10:
 1119              	.LBB11:
 1120              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.2.0
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     08. May 2019
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2019 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccuR5RPg.s 			page 33


  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccuR5RPg.s 			page 34


  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h ****   
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccuR5RPg.s 			page 35


 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h ****  
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h ****  
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 187:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 188:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 189:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 192:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 193:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 194:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 198:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccuR5RPg.s 			page 36


 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 205:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 206:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 212:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 213:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 214:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 216:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
 217:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 220:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 222:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 223:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 225:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 227:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 229:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 230:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 233:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 235:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 239:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 240:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 241:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 244:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 248:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 250:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 253:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 254:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 255:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 258:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 259:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccuR5RPg.s 			page 37


 260:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 262:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 265:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 266:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 267:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 269:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 270:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 274:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 278:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 279:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 283:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 284:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 285:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 287:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 289:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 295:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 296:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 298:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               xPSR Register value
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 300:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 302:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 305:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 306:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 307:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 308:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 311:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 312:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 315:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccuR5RPg.s 			page 38


 317:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 318:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 319:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 321:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 322:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 323:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 324:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 326:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 327:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 328:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 329:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 343:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 344:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 345:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 346:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 348:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 350:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 354:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 355:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 359:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 360:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 361:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 362:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 363:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 364:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 365:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 366:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 367:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 368:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 369:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 371:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 373:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccuR5RPg.s 			page 39


 374:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 375:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 378:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 381:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 384:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 386:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 388:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 389:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 390:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 391:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 393:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 394:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 395:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 396:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 397:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 398:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 399:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 401:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 402:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 405:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 410:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 411:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 413:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 414:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 415:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 416:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 417:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 418:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 419:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 420:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 421:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               SP Register value
 422:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 423:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 424:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 429:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 430:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccuR5RPg.s 			page 40


 431:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 433:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 435:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 436:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 437:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 440:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 441:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 442:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 444:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 445:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 446:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 447:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 448:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 449:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 450:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 452:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 454:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 456:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 459:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 460:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 464:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 468:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 469:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 471:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 472:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 473:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 474:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 476:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 477:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 480:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 486:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccuR5RPg.s 			page 41


 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 491:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 492:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 493:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 495:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 498:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 499:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 500:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 501:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 502:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 504:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 506:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 507:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 508:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 509:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 511:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 512:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 513:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 516:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 519:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 520:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 521:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 522:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 523:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 527:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 529:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 530:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 531:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 533:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 537:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 538:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 540:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 541:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 544:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccuR5RPg.s 			page 42


 545:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 546:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 548:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 552:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 553:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 554:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 557:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 558:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 559:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 560:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 564:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 565:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 568:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 569:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 571:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 572:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 573:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 574:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 575:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 576:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 577:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 578:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 579:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 580:Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 583:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI_MAX(uint32_t basePri)
 584:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 585:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 586:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 587:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 588:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 589:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 592:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 593:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FAULTMASK(void)
 595:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 596:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 597:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 598:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 599:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 600:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 601:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccuR5RPg.s 			page 43


 602:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 603:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 604:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 606:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 608:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 609:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 610:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 611:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 612:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 614:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 615:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 616:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 617:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 618:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 621:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 622:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 623:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
 625:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 626:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 627:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 628:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 629:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 630:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 631:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 633:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 634:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 636:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 637:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 638:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 639:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 640:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 641:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 642:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 643:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 644:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 647:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 648:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 649:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 650:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 652:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 653:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 654:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 655:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 658:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccuR5RPg.s 			page 44


 659:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSPLIM(void)
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 663:Drivers/CMSIS/Include/cmsis_gcc.h ****     // without main extensions, the non-secure PSPLIM is RAZ/WI
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 665:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 666:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 667:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 668:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 669:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3))
 673:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 675:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 677:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 679:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 680:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 681:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSPLIM_NS(void)
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 683:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 684:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 685:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 686:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 689:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 690:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 693:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 695:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 696:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 698:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 699:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 700:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 703:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 704:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 705:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 706:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 707:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 708:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 710:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 711:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 712:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 713:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 714:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 715:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccuR5RPg.s 			page 45


 716:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 717:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 721:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 723:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 724:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 726:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 727:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 730:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 731:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 732:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 734:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 735:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 736:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 737:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 738:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 742:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 746:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSPLIM(void)
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 749:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 751:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 752:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 753:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 754:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 755:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 757:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 758:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 759:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 760:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 761:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 762:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 763:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 765:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 767:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 768:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 769:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSPLIM_NS(void)
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccuR5RPg.s 			page 46


 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 774:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 775:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 777:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 778:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 779:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 781:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 782:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 784:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 785:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 786:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 787:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 788:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 795:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 796:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 797:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 799:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 800:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 802:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 803:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 804:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 805:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 806:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 807:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 808:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 809:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 810:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 811:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 812:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 814:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 815:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 817:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 818:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 819:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 820:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 821:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 825:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 826:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 827:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 828:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 829:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccuR5RPg.s 			page 47


 830:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 831:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 832:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 833:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FPSCR(void)
 834:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 835:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 836:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr) 
 838:Drivers/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 839:Drivers/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
 842:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 843:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 845:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 846:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 847:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 848:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 849:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(0U);
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 853:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 854:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 857:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 858:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FPSCR(uint32_t fpscr)
 860:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 861:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 863:Drivers/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr)
 864:Drivers/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 865:Drivers/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 866:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 867:Drivers/CMSIS/Include/cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 868:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 869:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 870:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 871:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 872:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)fpscr;
 873:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 874:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 875:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 876:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 878:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 882:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 883:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 884:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 885:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 886:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccuR5RPg.s 			page 48


 887:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 888:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 889:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 890:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 892:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 894:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 895:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 896:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 897:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 898:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 899:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 901:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 902:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 903:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 904:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 905:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 906:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 907:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 908:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 909:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 912:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 913:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 914:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 915:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 916:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 917:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")
 918:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 919:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 920:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 922:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 926:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 928:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 930:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 931:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 932:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 933:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 935:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 1121              		.loc 2 935 3
 1122              		.syntax unified
 1123              	@ 935 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1124 001e BFF36F8F 		isb 0xF
 1125              	@ 0 "" 2
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 1126              		.loc 2 936 1
 1127              		.thumb
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccuR5RPg.s 			page 49


 1128              		.syntax unified
 1129 0022 00BF     		nop
 1130              	.LBE11:
 1131              	.LBE10:
 694:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
 695:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   /* Barrier to ensure programming is performed in 2 steps, in right order
 696:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****     (independently of compiler optimization behavior) */
 697:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   __ISB();
 698:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
 699:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   /* Program second word */
 700:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 1132              		.loc 1 700 49
 1133 0024 D7E90001 		ldrd	r0, [r7]
 1134 0028 4FF00002 		mov	r2, #0
 1135 002c 4FF00003 		mov	r3, #0
 1136 0030 0A00     		movs	r2, r1
 1137 0032 0023     		movs	r3, #0
 1138              		.loc 1 700 25
 1139 0034 F968     		ldr	r1, [r7, #12]
 1140 0036 0431     		adds	r1, r1, #4
 1141              		.loc 1 700 33
 1142 0038 1346     		mov	r3, r2
 1143              		.loc 1 700 31
 1144 003a 0B60     		str	r3, [r1]
 701:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** }
 1145              		.loc 1 701 1
 1146 003c 00BF     		nop
 1147 003e 1437     		adds	r7, r7, #20
 1148              	.LCFI67:
 1149              		.cfi_def_cfa_offset 4
 1150 0040 BD46     		mov	sp, r7
 1151              	.LCFI68:
 1152              		.cfi_def_cfa_register 13
 1153              		@ sp needed
 1154 0042 80BC     		pop	{r7}
 1155              	.LCFI69:
 1156              		.cfi_restore 7
 1157              		.cfi_def_cfa_offset 0
 1158 0044 7047     		bx	lr
 1159              	.L75:
 1160 0046 00BF     		.align	2
 1161              	.L74:
 1162 0048 00400058 		.word	1476411392
 1163              		.cfi_endproc
 1164              	.LFE856:
 1166              		.section	.text.FLASH_Program_Fast,"ax",%progbits
 1167              		.align	1
 1168              		.syntax unified
 1169              		.thumb
 1170              		.thumb_func
 1172              	FLASH_Program_Fast:
 1173              	.LFB857:
 702:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
 703:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** /**
 704:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   * @brief  Fast program a 32 row double-word (64-bit) at a specified address.
 705:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   * @param  Address Specifies the address to be programmed.
 706:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   * @param  DataAddress Specifies the address where the data are stored.
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccuR5RPg.s 			page 50


 707:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   * @retval None
 708:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   */
 709:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** #ifdef CORE_CM0PLUS
 710:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
 711:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** #else
 712:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
 713:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** #endif
 714:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** {
 1174              		.loc 1 714 1
 1175              		.cfi_startproc
 1176              		@ args = 0, pretend = 0, frame = 32
 1177              		@ frame_needed = 1, uses_anonymous_args = 0
 1178              		@ link register save eliminated.
 1179 0000 80B4     		push	{r7}
 1180              	.LCFI70:
 1181              		.cfi_def_cfa_offset 4
 1182              		.cfi_offset 7, -4
 1183 0002 89B0     		sub	sp, sp, #36
 1184              	.LCFI71:
 1185              		.cfi_def_cfa_offset 40
 1186 0004 00AF     		add	r7, sp, #0
 1187              	.LCFI72:
 1188              		.cfi_def_cfa_register 7
 1189 0006 7860     		str	r0, [r7, #4]
 1190 0008 3960     		str	r1, [r7]
 715:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 1191              		.loc 1 715 11
 1192 000a 4023     		movs	r3, #64
 1193 000c FB77     		strb	r3, [r7, #31]
 716:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 1194              		.loc 1 716 18
 1195 000e 7B68     		ldr	r3, [r7, #4]
 1196 0010 BB61     		str	r3, [r7, #24]
 717:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 1197              		.loc 1 717 18
 1198 0012 3B68     		ldr	r3, [r7]
 1199 0014 7B61     		str	r3, [r7, #20]
 718:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   uint32_t primask_bit;
 719:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
 720:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   /* Set FSTPG bit */
 721:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** #ifdef CORE_CM0PLUS
 722:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
 723:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** #else
 724:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 1200              		.loc 1 724 3
 1201 0016 184B     		ldr	r3, .L80
 1202 0018 5B69     		ldr	r3, [r3, #20]
 1203 001a 174A     		ldr	r2, .L80
 1204 001c 43F48023 		orr	r3, r3, #262144
 1205 0020 5361     		str	r3, [r2, #20]
 1206              	.LBB12:
 1207              	.LBB13:
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 1208              		.loc 2 453 3
 1209              		.syntax unified
 1210              	@ 453 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1211 0022 EFF31083 		MRS r3, primask
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccuR5RPg.s 			page 51


 1212              	@ 0 "" 2
 1213              		.thumb
 1214              		.syntax unified
 1215 0026 FB60     		str	r3, [r7, #12]
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 1216              		.loc 2 454 9
 1217 0028 FB68     		ldr	r3, [r7, #12]
 1218              	.LBE13:
 1219              	.LBE12:
 725:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** #endif
 726:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
 727:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   /* Enter critical section: row programming should not be longer than 7 ms */
 728:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   primask_bit = __get_PRIMASK();
 1220              		.loc 1 728 17
 1221 002a 3B61     		str	r3, [r7, #16]
 1222              	.LBB14:
 1223              	.LBB15:
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 1224              		.loc 2 209 3
 1225              		.syntax unified
 1226              	@ 209 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1227 002c 72B6     		cpsid i
 1228              	@ 0 "" 2
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 1229              		.loc 2 210 1
 1230              		.thumb
 1231              		.syntax unified
 1232 002e 00BF     		nop
 1233              	.L78:
 1234              	.LBE15:
 1235              	.LBE14:
 729:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   __disable_irq();
 730:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
 731:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   /* Program the double word of the row */
 732:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   do
 733:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   {
 734:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****     *dest_addr = *src_addr;
 1236              		.loc 1 734 18 discriminator 1
 1237 0030 7B69     		ldr	r3, [r7, #20]
 1238 0032 1A68     		ldr	r2, [r3]
 1239              		.loc 1 734 16 discriminator 1
 1240 0034 BB69     		ldr	r3, [r7, #24]
 1241 0036 1A60     		str	r2, [r3]
 735:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****     dest_addr++;
 1242              		.loc 1 735 14 discriminator 1
 1243 0038 BB69     		ldr	r3, [r7, #24]
 1244 003a 0433     		adds	r3, r3, #4
 1245 003c BB61     		str	r3, [r7, #24]
 736:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****     src_addr++;
 1246              		.loc 1 736 13 discriminator 1
 1247 003e 7B69     		ldr	r3, [r7, #20]
 1248 0040 0433     		adds	r3, r3, #4
 1249 0042 7B61     		str	r3, [r7, #20]
 737:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****     row_index--;
 1250              		.loc 1 737 14 discriminator 1
 1251 0044 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 1252 0046 013B     		subs	r3, r3, #1
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccuR5RPg.s 			page 52


 1253 0048 FB77     		strb	r3, [r7, #31]
 738:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   }
 739:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   while (row_index != 0U);
 1254              		.loc 1 739 3 discriminator 1
 1255 004a FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 1256 004c 002B     		cmp	r3, #0
 1257 004e EFD1     		bne	.L78
 740:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
 741:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   /* wait for BSY in order to be sure that flash operation is ended before
 742:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****      allowing prefetch in flash. Timeout does not return status, as it will
 743:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****      be anyway done later */
 744:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 1258              		.loc 1 744 9
 1259 0050 00BF     		nop
 1260              	.L79:
 1261              		.loc 1 744 10 discriminator 1
 1262 0052 094B     		ldr	r3, .L80
 1263 0054 1B69     		ldr	r3, [r3, #16]
 1264 0056 03F48033 		and	r3, r3, #65536
 1265              		.loc 1 744 9 discriminator 1
 1266 005a B3F5803F 		cmp	r3, #65536
 1267 005e F8D0     		beq	.L79
 1268 0060 3B69     		ldr	r3, [r7, #16]
 1269 0062 BB60     		str	r3, [r7, #8]
 1270              	.LBB16:
 1271              	.LBB17:
 481:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 1272              		.loc 2 481 3
 1273 0064 BB68     		ldr	r3, [r7, #8]
 1274              		.syntax unified
 1275              	@ 481 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1276 0066 83F31088 		MSR primask, r3
 1277              	@ 0 "" 2
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 1278              		.loc 2 482 1
 1279              		.thumb
 1280              		.syntax unified
 1281 006a 00BF     		nop
 1282              	.LBE17:
 1283              	.LBE16:
 745:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   {
 746:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   }
 747:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** 
 748:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   /* Exit critical section: restore previous priority mask */
 749:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c ****   __set_PRIMASK(primask_bit);
 750:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_flash.c **** }
 1284              		.loc 1 750 1
 1285 006c 00BF     		nop
 1286 006e 2437     		adds	r7, r7, #36
 1287              	.LCFI73:
 1288              		.cfi_def_cfa_offset 4
 1289 0070 BD46     		mov	sp, r7
 1290              	.LCFI74:
 1291              		.cfi_def_cfa_register 13
 1292              		@ sp needed
 1293 0072 80BC     		pop	{r7}
 1294              	.LCFI75:
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccuR5RPg.s 			page 53


 1295              		.cfi_restore 7
 1296              		.cfi_def_cfa_offset 0
 1297 0074 7047     		bx	lr
 1298              	.L81:
 1299 0076 00BF     		.align	2
 1300              	.L80:
 1301 0078 00400058 		.word	1476411392
 1302              		.cfi_endproc
 1303              	.LFE857:
 1305              		.text
 1306              	.Letext0:
 1307              		.file 3 "d:\\zodhya projects\\technical doccuments\\stm32_vscode_make\\tools\\gcc-arm-none-eabi-10
 1308              		.file 4 "d:\\zodhya projects\\technical doccuments\\stm32_vscode_make\\tools\\gcc-arm-none-eabi-10
 1309              		.file 5 "Drivers/CMSIS/Device/ST/STM32WLxx/Include/stm32wl55xx.h"
 1310              		.file 6 "Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_hal_def.h"
 1311              		.file 7 "Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_hal_flash.h"
 1312              		.file 8 "Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_dma.h"
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccuR5RPg.s 			page 54


DEFINED SYMBOLS
                            *ABS*:00000000 stm32wlxx_hal_flash.c
C:\Users\Lenovo\AppData\Local\Temp\ccuR5RPg.s:18     .rodata.CHANNEL_OFFSET_TAB:00000000 $d
C:\Users\Lenovo\AppData\Local\Temp\ccuR5RPg.s:21     .rodata.CHANNEL_OFFSET_TAB:00000000 CHANNEL_OFFSET_TAB
C:\Users\Lenovo\AppData\Local\Temp\ccuR5RPg.s:28     .bss.pFlash:00000000 pFlash
C:\Users\Lenovo\AppData\Local\Temp\ccuR5RPg.s:25     .bss.pFlash:00000000 $d
C:\Users\Lenovo\AppData\Local\Temp\ccuR5RPg.s:31     .text.HAL_FLASH_Program:00000000 $t
C:\Users\Lenovo\AppData\Local\Temp\ccuR5RPg.s:37     .text.HAL_FLASH_Program:00000000 HAL_FLASH_Program
C:\Users\Lenovo\AppData\Local\Temp\ccuR5RPg.s:936    .text.FLASH_WaitForLastOperation:00000000 FLASH_WaitForLastOperation
C:\Users\Lenovo\AppData\Local\Temp\ccuR5RPg.s:1087   .text.FLASH_Program_DoubleWord:00000000 FLASH_Program_DoubleWord
C:\Users\Lenovo\AppData\Local\Temp\ccuR5RPg.s:1172   .text.FLASH_Program_Fast:00000000 FLASH_Program_Fast
C:\Users\Lenovo\AppData\Local\Temp\ccuR5RPg.s:134    .text.HAL_FLASH_Program:00000080 $d
C:\Users\Lenovo\AppData\Local\Temp\ccuR5RPg.s:140    .text.HAL_FLASH_Program_IT:00000000 $t
C:\Users\Lenovo\AppData\Local\Temp\ccuR5RPg.s:146    .text.HAL_FLASH_Program_IT:00000000 HAL_FLASH_Program_IT
C:\Users\Lenovo\AppData\Local\Temp\ccuR5RPg.s:249    .text.HAL_FLASH_Program_IT:0000008c $d
C:\Users\Lenovo\AppData\Local\Temp\ccuR5RPg.s:255    .text.HAL_FLASH_IRQHandler:00000000 $t
C:\Users\Lenovo\AppData\Local\Temp\ccuR5RPg.s:261    .text.HAL_FLASH_IRQHandler:00000000 HAL_FLASH_IRQHandler
C:\Users\Lenovo\AppData\Local\Temp\ccuR5RPg.s:518    .text.HAL_FLASH_OperationErrorCallback:00000000 HAL_FLASH_OperationErrorCallback
C:\Users\Lenovo\AppData\Local\Temp\ccuR5RPg.s:476    .text.HAL_FLASH_EndOfOperationCallback:00000000 HAL_FLASH_EndOfOperationCallback
C:\Users\Lenovo\AppData\Local\Temp\ccuR5RPg.s:463    .text.HAL_FLASH_IRQHandler:00000120 $d
C:\Users\Lenovo\AppData\Local\Temp\ccuR5RPg.s:470    .text.HAL_FLASH_EndOfOperationCallback:00000000 $t
C:\Users\Lenovo\AppData\Local\Temp\ccuR5RPg.s:512    .text.HAL_FLASH_OperationErrorCallback:00000000 $t
C:\Users\Lenovo\AppData\Local\Temp\ccuR5RPg.s:554    .text.HAL_FLASH_Unlock:00000000 $t
C:\Users\Lenovo\AppData\Local\Temp\ccuR5RPg.s:560    .text.HAL_FLASH_Unlock:00000000 HAL_FLASH_Unlock
C:\Users\Lenovo\AppData\Local\Temp\ccuR5RPg.s:623    .text.HAL_FLASH_Unlock:00000038 $d
C:\Users\Lenovo\AppData\Local\Temp\ccuR5RPg.s:630    .text.HAL_FLASH_Lock:00000000 $t
C:\Users\Lenovo\AppData\Local\Temp\ccuR5RPg.s:636    .text.HAL_FLASH_Lock:00000000 HAL_FLASH_Lock
C:\Users\Lenovo\AppData\Local\Temp\ccuR5RPg.s:691    .text.HAL_FLASH_Lock:00000030 $d
C:\Users\Lenovo\AppData\Local\Temp\ccuR5RPg.s:696    .text.HAL_FLASH_OB_Unlock:00000000 $t
C:\Users\Lenovo\AppData\Local\Temp\ccuR5RPg.s:702    .text.HAL_FLASH_OB_Unlock:00000000 HAL_FLASH_OB_Unlock
C:\Users\Lenovo\AppData\Local\Temp\ccuR5RPg.s:767    .text.HAL_FLASH_OB_Unlock:00000040 $d
C:\Users\Lenovo\AppData\Local\Temp\ccuR5RPg.s:774    .text.HAL_FLASH_OB_Lock:00000000 $t
C:\Users\Lenovo\AppData\Local\Temp\ccuR5RPg.s:780    .text.HAL_FLASH_OB_Lock:00000000 HAL_FLASH_OB_Lock
C:\Users\Lenovo\AppData\Local\Temp\ccuR5RPg.s:836    .text.HAL_FLASH_OB_Lock:00000034 $d
C:\Users\Lenovo\AppData\Local\Temp\ccuR5RPg.s:841    .text.HAL_FLASH_OB_Launch:00000000 $t
C:\Users\Lenovo\AppData\Local\Temp\ccuR5RPg.s:847    .text.HAL_FLASH_OB_Launch:00000000 HAL_FLASH_OB_Launch
C:\Users\Lenovo\AppData\Local\Temp\ccuR5RPg.s:883    .text.HAL_FLASH_OB_Launch:0000001c $d
C:\Users\Lenovo\AppData\Local\Temp\ccuR5RPg.s:888    .text.HAL_FLASH_GetError:00000000 $t
C:\Users\Lenovo\AppData\Local\Temp\ccuR5RPg.s:894    .text.HAL_FLASH_GetError:00000000 HAL_FLASH_GetError
C:\Users\Lenovo\AppData\Local\Temp\ccuR5RPg.s:925    .text.HAL_FLASH_GetError:00000010 $d
C:\Users\Lenovo\AppData\Local\Temp\ccuR5RPg.s:930    .text.FLASH_WaitForLastOperation:00000000 $t
C:\Users\Lenovo\AppData\Local\Temp\ccuR5RPg.s:1076   .text.FLASH_WaitForLastOperation:000000bc $d
C:\Users\Lenovo\AppData\Local\Temp\ccuR5RPg.s:1082   .text.FLASH_Program_DoubleWord:00000000 $t
C:\Users\Lenovo\AppData\Local\Temp\ccuR5RPg.s:1162   .text.FLASH_Program_DoubleWord:00000048 $d
C:\Users\Lenovo\AppData\Local\Temp\ccuR5RPg.s:1167   .text.FLASH_Program_Fast:00000000 $t
C:\Users\Lenovo\AppData\Local\Temp\ccuR5RPg.s:1301   .text.FLASH_Program_Fast:00000078 $d

UNDEFINED SYMBOLS
FLASH_PageErase
HAL_GetTick
