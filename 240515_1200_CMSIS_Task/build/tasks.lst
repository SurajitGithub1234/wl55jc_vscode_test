ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"tasks.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	pxCurrentTCB
  18              		.section	.bss.pxCurrentTCB,"aw",%nobits
  19              		.align	2
  22              	pxCurrentTCB:
  23 0000 00000000 		.space	4
  24              		.section	.bss.pxReadyTasksLists,"aw",%nobits
  25              		.align	2
  28              	pxReadyTasksLists:
  29 0000 00000000 		.space	1120
  29      00000000 
  29      00000000 
  29      00000000 
  29      00000000 
  30              		.section	.bss.xDelayedTaskList1,"aw",%nobits
  31              		.align	2
  34              	xDelayedTaskList1:
  35 0000 00000000 		.space	20
  35      00000000 
  35      00000000 
  35      00000000 
  35      00000000 
  36              		.section	.bss.xDelayedTaskList2,"aw",%nobits
  37              		.align	2
  40              	xDelayedTaskList2:
  41 0000 00000000 		.space	20
  41      00000000 
  41      00000000 
  41      00000000 
  41      00000000 
  42              		.section	.bss.pxDelayedTaskList,"aw",%nobits
  43              		.align	2
  46              	pxDelayedTaskList:
  47 0000 00000000 		.space	4
  48              		.section	.bss.pxOverflowDelayedTaskList,"aw",%nobits
  49              		.align	2
  52              	pxOverflowDelayedTaskList:
  53 0000 00000000 		.space	4
  54              		.section	.bss.xPendingReadyList,"aw",%nobits
  55              		.align	2
  58              	xPendingReadyList:
  59 0000 00000000 		.space	20
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 2


  59      00000000 
  59      00000000 
  59      00000000 
  59      00000000 
  60              		.section	.bss.xTasksWaitingTermination,"aw",%nobits
  61              		.align	2
  64              	xTasksWaitingTermination:
  65 0000 00000000 		.space	20
  65      00000000 
  65      00000000 
  65      00000000 
  65      00000000 
  66              		.section	.bss.uxDeletedTasksWaitingCleanUp,"aw",%nobits
  67              		.align	2
  70              	uxDeletedTasksWaitingCleanUp:
  71 0000 00000000 		.space	4
  72              		.section	.bss.xSuspendedTaskList,"aw",%nobits
  73              		.align	2
  76              	xSuspendedTaskList:
  77 0000 00000000 		.space	20
  77      00000000 
  77      00000000 
  77      00000000 
  77      00000000 
  78              		.section	.bss.uxCurrentNumberOfTasks,"aw",%nobits
  79              		.align	2
  82              	uxCurrentNumberOfTasks:
  83 0000 00000000 		.space	4
  84              		.section	.bss.xTickCount,"aw",%nobits
  85              		.align	2
  88              	xTickCount:
  89 0000 00000000 		.space	4
  90              		.section	.bss.uxTopReadyPriority,"aw",%nobits
  91              		.align	2
  94              	uxTopReadyPriority:
  95 0000 00000000 		.space	4
  96              		.section	.bss.xSchedulerRunning,"aw",%nobits
  97              		.align	2
 100              	xSchedulerRunning:
 101 0000 00000000 		.space	4
 102              		.section	.bss.uxPendedTicks,"aw",%nobits
 103              		.align	2
 106              	uxPendedTicks:
 107 0000 00000000 		.space	4
 108              		.section	.bss.xYieldPending,"aw",%nobits
 109              		.align	2
 112              	xYieldPending:
 113 0000 00000000 		.space	4
 114              		.section	.bss.xNumOfOverflows,"aw",%nobits
 115              		.align	2
 118              	xNumOfOverflows:
 119 0000 00000000 		.space	4
 120              		.section	.bss.uxTaskNumber,"aw",%nobits
 121              		.align	2
 124              	uxTaskNumber:
 125 0000 00000000 		.space	4
 126              		.section	.bss.xNextTaskUnblockTime,"aw",%nobits
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 3


 127              		.align	2
 130              	xNextTaskUnblockTime:
 131 0000 00000000 		.space	4
 132              		.section	.bss.xIdleTaskHandle,"aw",%nobits
 133              		.align	2
 136              	xIdleTaskHandle:
 137 0000 00000000 		.space	4
 138              		.section	.bss.uxSchedulerSuspended,"aw",%nobits
 139              		.align	2
 142              	uxSchedulerSuspended:
 143 0000 00000000 		.space	4
 144              		.section	.text.xTaskCreateStatic,"ax",%progbits
 145              		.align	1
 146              		.global	xTaskCreateStatic
 147              		.syntax unified
 148              		.thumb
 149              		.thumb_func
 151              	xTaskCreateStatic:
 152              	.LFB4:
 153              		.file 1 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c"
   1:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * FreeRTOS Kernel V10.2.1
   3:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Copyright (C) 2019 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
   5:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the Software without restriction, including without limitation the rights to
   8:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * subject to the following conditions:
  11:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  12:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The above copyright notice and this permission notice shall be included in all
  13:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * copies or substantial portions of the Software.
  14:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  15:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  22:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * http://www.FreeRTOS.org
  23:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * http://aws.amazon.com/freertos
  24:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  25:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * 1 tab == 4 spaces!
  26:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
  27:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  28:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Standard includes. */
  29:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <stdlib.h>
  30:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <string.h>
  31:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  32:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  33:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  34:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** task.h is included from an application file. */
  35:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  36:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  37:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* FreeRTOS includes. */
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 4


  38:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "FreeRTOS.h"
  39:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "task.h"
  40:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "timers.h"
  41:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "stack_macros.h"
  42:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  43:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  44:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  45:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** for the header files above, but not in this file, in order to generate the
  46:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** correct privileged Vs unprivileged linkage and placement. */
  47:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
  48:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  49:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  50:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** functions but without including stdio.h here. */
  51:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  52:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  53:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to generate human readable text from the raw data generated by the
  54:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  55:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  56:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#include <stdio.h>
  57:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
  58:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_PREEMPTION == 0 )
  60:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
  61:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed just because a higher priority task has been woken. */
  62:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
  63:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
  64:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
  65:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
  66:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  67:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
  68:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOT_WAITING_NOTIFICATION	( ( uint8_t ) 0 )
  69:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskWAITING_NOTIFICATION		( ( uint8_t ) 1 )
  70:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOTIFICATION_RECEIVED		( ( uint8_t ) 2 )
  71:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  72:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
  73:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
  74:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is used purely for checking the high water mark for tasks.
  75:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
  76:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
  77:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Bits used to recored how a task's stack and TCB were allocated. */
  79:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB 		( ( uint8_t ) 0 )
  80:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY 			( ( uint8_t ) 1 )
  81:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB		( ( uint8_t ) 2 )
  82:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  83:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* If any of the following are set then task stacks are filled with a known
  84:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** value so the high water mark can be determined.  If none of the following are
  85:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** set then don't fill the stack so there is no unnecessary dependency on memset. */
  86:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTas
  87:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	1
  88:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
  89:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	0
  90:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
  91:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  92:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
  93:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
  94:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 5


  95:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskRUNNING_CHAR		( 'X' )
  96:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
  97:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskREADY_CHAR		( 'R' )
  98:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDELETED_CHAR		( 'D' )
  99:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
 103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * global, rather than file scope.
 104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define static
 107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The name allocated to the Idle task.  This can be overridden by defining
 110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** configIDLE_TASK_NAME in FreeRTOSConfig.h. */
 111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifndef configIDLE_TASK_NAME
 112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define configIDLE_TASK_NAME "IDLE"
 113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a generic way that is not optimised to any particular
 119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	microcontroller architecture. */
 120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	state task. */
 123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority = uxTopReadyPriority;														\
 136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) )							\
 139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxTopPriority );																\
 141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			--uxTopPriority;																			\
 142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
 145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );			\
 147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTopReadyPriority = uxTopPriority;																\
 148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 6


 152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	they are only required when a port optimised method of task selection is
 154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	being used. */
 155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	architecture being used. */
 163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																								\
 171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority;																		\
 172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority list that contains ready tasks. */								\
 174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	or suspended list then it won't be in a ready list. */
 184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
 187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** count overflows. */
 198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {																									\
 200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t *pxTemp;																					\
 201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
 204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
 207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xNumOfOverflows++;																				\
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 7


 209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task.  It is inserted at the end of the list.
 217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
 220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem ) );
 222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? pxCurrentTCB : ( pxHandle ) )
 232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** is important its value is not updated due to a task priority change while it is
 237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** to its original value when it is released. */
 241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_16_BIT_TICKS == 1 )
 242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
 243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
 244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and stores task state information, including a pointer to the task's context
 250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * (the task's run time environment, including register values)
 251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef struct tskTaskControlBlock 			/* The old naming convention is used to prevent breaking kern
 253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xStateListItem;	/*< The list that the state list item of a task is reference from den
 261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
 264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 8


 266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
 267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the highest valid address for the stack. */
 268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxCriticalNesting;	/*< Holds the critical section nesting depth for ports that do no
 272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
 276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. *
 277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
 281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxMutexesHeld;
 282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		void			*pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configGENERATE_RUN_TIME_STATS == 1 )
 293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		implements a system-wide malloc() that must be provided with locks. */
 304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		struct	_reent xNewLib_reent;
 305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TASK_NOTIFICATIONS == 1 )
 308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint32_t ulNotifiedValue;
 309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint8_t ucNotifyState;
 310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* See the comments in FreeRTOS.h with the definition of
 313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolida
 315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t	ucStaticallyAllocated; 		/*< Set to pdTRUE if the task is a statically allocated to ensur
 316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t ucDelayAborted;
 320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_POSIX_ERRNO == 1 )
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 9


 323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		int iTaskErrno;
 324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** } tskTCB;
 327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** below to enable the use of older kernel aware debuggers. */
 330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef tskTCB TCB_t;
 331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint -save -e956 A manual analysis and inspection has been used to determine
 333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** which static variables must be declared volatile. */
 334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lists for ready and blocked tasks. --------------------
 337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** xDelayedTaskList1 and xDelayedTaskList2 could be move to function scople but
 338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** doing so breaks some kernel aware debuggers and debuggers that rely on removing
 339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the static qualifier. */
 340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ] = { 0 };/*< Prioritised rea
 341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1 = { 0 };						/*< Delayed tasks. */
 342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2 = { 0 };						/*< Delayed tasks (two lists are used
 343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList = NULL;				/*< Points to the delayed tas
 344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList = NULL;		/*< Points to the delay
 345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList = { 0 };						/*< Tasks that have been readied whil
 346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( INCLUDE_vTaskDelete == 1 )
 348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xTasksWaitingTermination = { 0 };				/*< Tasks that have been deleted
 350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList = { 0 };					/*< Tasks that are currently suspend
 357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Global POSIX errno. Its value is changed upon context switching to match
 361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the errno of the currently running task. */
 362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_POSIX_ERRNO == 1 )
 363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	int FreeRTOS_errno = 0;
 364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Other file private variables. --------------------------------*/
 367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0U;
 368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) configINITIAL_TICK_COUNT
 369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
 370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxPendedTicks 			= ( UBaseType_t ) 0U;
 372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
 373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
 374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
 375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /* Initialise
 376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle					= NULL;			/*< Holds the handle of the idle 
 377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** interrupts must not manipulate the xStateListItem of a TCB, or any of the
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 10


 380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** lists the xStateListItem can be referenced from, if the scheduler is suspended.
 381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** accessed from a critical section. */
 386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFALSE;
 387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Do not move these variables to function scope as doing so prevents the
 391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	code working with debuggers that need to remove the static qualifier. */
 392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/counter
 393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution tim
 394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint -restore */
 398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Callback function prototypes. --------------------------*/
 402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if(  configCHECK_FOR_STACK_OVERFLOW > 0 )
 403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICK_HOOK > 0 )
 409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationTickHook( void ); /*lint !e526 Symbol not defined as it is an application 
 411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxI
 417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* File private functions. --------------------------------*/
 421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /**
 423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is in any other state.
 426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * automatically upon the creation of the first task.
 436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 11


 437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * creation of the first user task.
 443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
 448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * including the stack pointed to by the TCB.
 455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
 462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and its TCB deleted.
 469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * either the current or the overflow delayed task list.
 475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
 477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * a suspended list, etc.).
 482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * NORMAL APPLICATION CODE.
 485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
 489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 12


 494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] ) PRIVI
 499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * determining how much of the stack remains at the original preset value.
 506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
 508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGE
 510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * next move a task from the Blocked state to the Running state.
 516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * set to a value other than 1.
 521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * will exit the Blocked state.
 531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*
 537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
 538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * human readable tables of task information.
 539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 */
 540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName ) PRIVILEGED_FUNCTION;
 541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * dynamically to fill in the structure's members.
 547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName, 		/*lint !e971 Unqualified char types are allowed for strings a
 550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 13


 551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION;
 556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a new task has been created and initialised to place the task
 559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * under the control of the scheduler.
 560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB ) PRIVILEGED_FUNCTION;
 562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * freertos_tasks_c_additions_init() should only be called if the user definable
 565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is the only macro
 566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * called by the function.
 567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
 569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void freertos_tasks_c_additions_init( void ) PRIVILEGED_FUNCTION;
 571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StackType_t * const puxStackBuffer,
 584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StaticTask_t * const pxTaskBuffer )
 585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 154              		.loc 1 585 2
 155              		.cfi_startproc
 156              		@ args = 12, pretend = 0, frame = 40
 157              		@ frame_needed = 1, uses_anonymous_args = 0
 158 0000 80B5     		push	{r7, lr}
 159              	.LCFI0:
 160              		.cfi_def_cfa_offset 8
 161              		.cfi_offset 7, -8
 162              		.cfi_offset 14, -4
 163 0002 8EB0     		sub	sp, sp, #56
 164              	.LCFI1:
 165              		.cfi_def_cfa_offset 64
 166 0004 04AF     		add	r7, sp, #16
 167              	.LCFI2:
 168              		.cfi_def_cfa 7, 48
 169 0006 F860     		str	r0, [r7, #12]
 170 0008 B960     		str	r1, [r7, #8]
 171 000a 7A60     		str	r2, [r7, #4]
 172 000c 3B60     		str	r3, [r7]
 586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
 588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 14


 589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( puxStackBuffer != NULL );
 173              		.loc 1 589 3
 174 000e 7B6B     		ldr	r3, [r7, #52]
 175 0010 002B     		cmp	r3, #0
 176 0012 0AD1     		bne	.L2
 177              	.LBB119:
 178              	.LBB120:
 179              		.file 2 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h"
   1:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * FreeRTOS Kernel V10.2.1
   3:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * Copyright (C) 2019 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
   5:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * subject to the following conditions:
  11:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  12:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * copies or substantial portions of the Software.
  14:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  15:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  22:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * http://www.FreeRTOS.org
  23:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * http://aws.amazon.com/freertos
  24:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  25:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * 1 tab == 4 spaces!
  26:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  */
  27:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  28:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  29:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifndef PORTMACRO_H
  30:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define PORTMACRO_H
  31:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  32:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifdef __cplusplus
  33:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** extern "C" {
  34:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
  35:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  36:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------
  37:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * Port specific definitions.
  38:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  39:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * given hardware and compiler.
  41:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *
  42:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  * These settings should not be altered.
  43:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  *-----------------------------------------------------------
  44:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h ****  */
  45:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  46:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Type definitions. */
  47:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portCHAR		char
  48:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portFLOAT		float
  49:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portDOUBLE		double
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 15


  50:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portLONG		long
  51:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portSHORT		short
  52:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portBASE_TYPE	long
  54:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  55:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** typedef long BaseType_t;
  57:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** typedef unsigned long UBaseType_t;
  58:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	typedef uint16_t TickType_t;
  61:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #else
  63:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	typedef uint32_t TickType_t;
  64:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  66:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	not need to be guarded with a critical section. */
  68:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
  70:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  71:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  72:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Architecture specifics. */
  73:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  77:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Scheduler utilities. */
  79:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portYIELD() 															\
  80:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {																				\
  81:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 																				\
  84:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile( "isb" );													\
  88:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** }
  89:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  90:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  95:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
  96:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Critical section management. */
  97:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** extern void vPortEnterCritical( void );
  98:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** extern void vPortExitCritical( void );
  99:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 106:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 16


 107:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 108:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** (which build with all the ports) will build. */
 111:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 114:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 115:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Tickless idle/low power functionality. */
 116:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
 120:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 121:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 122:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* Architecture specific optimisations. */
 123:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
 126:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 127:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 129:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Generic helper function. */
 130:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	{
 132:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	uint8_t ucReturn;
 133:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 134:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		return ucReturn;
 136:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	}
 137:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 138:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Check the configuration. */
 139:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#endif
 142:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 143:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 147:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 149:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 151:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 153:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 154:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 155:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifdef configASSERT
 156:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
 159:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 160:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /* portNOP() is not required by this port. */
 161:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portNOP()
 162:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 163:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #define portINLINE	__inline
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 17


 164:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 165:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #ifndef portFORCE_INLINE
 166:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** #endif
 168:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 170:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 171:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** uint32_t ulCurrentInterrupt;
 172:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** BaseType_t xReturn;
 173:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 174:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 175:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 176:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 177:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 178:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	{
 179:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		xReturn = pdFALSE;
 180:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	}
 181:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	else
 182:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	{
 183:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		xReturn = pdTRUE;
 184:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	}
 185:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 186:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	return xReturn;
 187:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** }
 188:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 189:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 190:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 191:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 192:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 193:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** uint32_t ulNewBASEPRI;
 194:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile
 180              		.loc 2 195 2
 181              		.syntax unified
 182              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 183 0014 4FF05003 			mov r3, #80												
 184 0018 83F31188 		msr basepri, r3											
 185 001c BFF36F8F 		isb														
 186 0020 BFF34F8F 		dsb														
 187              	
 188              	@ 0 "" 2
 189              		.thumb
 190              		.syntax unified
 191 0024 3B62     		str	r3, [r7, #32]
 196:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 197:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	mov %0, %1												\n" \
 198:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	msr basepri, %0											\n" \
 199:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	isb														\n" \
 200:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	dsb														\n" \
 201:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 202:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	);
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** }
 192              		.loc 2 203 1
 193 0026 00BF     		nop
 194              	.L3:
 195              	.LBE120:
 196              	.LBE119:
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 18


 197              		.loc 1 589 3 discriminator 1
 198 0028 FEE7     		b	.L3
 199              	.L2:
 590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 200              		.loc 1 590 3
 201 002a BB6B     		ldr	r3, [r7, #56]
 202 002c 002B     		cmp	r3, #0
 203 002e 0AD1     		bne	.L4
 204              	.LBB121:
 205              	.LBB122:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 206              		.loc 2 195 2
 207              		.syntax unified
 208              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 209 0030 4FF05003 			mov r3, #80												
 210 0034 83F31188 		msr basepri, r3											
 211 0038 BFF36F8F 		isb														
 212 003c BFF34F8F 		dsb														
 213              	
 214              	@ 0 "" 2
 215              		.thumb
 216              		.syntax unified
 217 0040 FB61     		str	r3, [r7, #28]
 218              		.loc 2 203 1
 219 0042 00BF     		nop
 220              	.L5:
 221              	.LBE122:
 222              	.LBE121:
 223              		.loc 1 590 3 discriminator 2
 224 0044 FEE7     		b	.L5
 225              	.L4:
 226              	.LBB123:
 591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configASSERT_DEFINED == 1 )
 593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Sanity check that the size of the structure used to declare a
 595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			variable of type StaticTask_t equals the size of the real task
 596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure. */
 597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			volatile size_t xSize = sizeof( StaticTask_t );
 227              		.loc 1 597 20
 228 0046 5C23     		movs	r3, #92
 229 0048 3B61     		str	r3, [r7, #16]
 598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( xSize == sizeof( TCB_t ) );
 230              		.loc 1 598 4
 231 004a 3B69     		ldr	r3, [r7, #16]
 232 004c 5C2B     		cmp	r3, #92
 233 004e 0AD0     		beq	.L6
 234              	.LBB124:
 235              	.LBB125:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 236              		.loc 2 195 2
 237              		.syntax unified
 238              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 239 0050 4FF05003 			mov r3, #80												
 240 0054 83F31188 		msr basepri, r3											
 241 0058 BFF36F8F 		isb														
 242 005c BFF34F8F 		dsb														
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 19


 243              	
 244              	@ 0 "" 2
 245              		.thumb
 246              		.syntax unified
 247 0060 BB61     		str	r3, [r7, #24]
 248              		.loc 2 203 1
 249 0062 00BF     		nop
 250              	.L7:
 251              	.LBE125:
 252              	.LBE124:
 253              		.loc 1 598 4 discriminator 3
 254 0064 FEE7     		b	.L7
 255              	.L6:
 599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 256              		.loc 1 599 4
 257 0066 3B69     		ldr	r3, [r7, #16]
 258              	.LBE123:
 600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configASSERT_DEFINED */
 602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 259              		.loc 1 604 5
 260 0068 BB6B     		ldr	r3, [r7, #56]
 261 006a 002B     		cmp	r3, #0
 262 006c 1ED0     		beq	.L8
 263              		.loc 1 604 32 discriminator 1
 264 006e 7B6B     		ldr	r3, [r7, #52]
 265 0070 002B     		cmp	r3, #0
 266 0072 1BD0     		beq	.L8
 605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The memory used for the task's TCB and stack are passed into this
 607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function - use them. */
 608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures ar
 267              		.loc 1 608 13
 268 0074 BB6B     		ldr	r3, [r7, #56]
 269 0076 7B62     		str	r3, [r7, #36]
 609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 270              		.loc 1 609 22
 271 0078 7B6A     		ldr	r3, [r7, #36]
 272 007a 7A6B     		ldr	r2, [r7, #52]
 273 007c 1A63     		str	r2, [r3, #48]
 610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consoli
 612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 274              		.loc 1 615 37
 275 007e 7B6A     		ldr	r3, [r7, #36]
 276 0080 0222     		movs	r2, #2
 277 0082 83F85920 		strb	r2, [r3, #89]
 616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNe
 278              		.loc 1 619 4
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 20


 279 0086 0023     		movs	r3, #0
 280 0088 0393     		str	r3, [sp, #12]
 281 008a 7B6A     		ldr	r3, [r7, #36]
 282 008c 0293     		str	r3, [sp, #8]
 283 008e 07F11403 		add	r3, r7, #20
 284 0092 0193     		str	r3, [sp, #4]
 285 0094 3B6B     		ldr	r3, [r7, #48]
 286 0096 0093     		str	r3, [sp]
 287 0098 3B68     		ldr	r3, [r7]
 288 009a 7A68     		ldr	r2, [r7, #4]
 289 009c B968     		ldr	r1, [r7, #8]
 290 009e F868     		ldr	r0, [r7, #12]
 291 00a0 FFF7FEFF 		bl	prvInitialiseNewTask
 620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 292              		.loc 1 620 4
 293 00a4 786A     		ldr	r0, [r7, #36]
 294 00a6 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 295 00aa 01E0     		b	.L9
 296              	.L8:
 621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = NULL;
 297              		.loc 1 624 12
 298 00ac 0023     		movs	r3, #0
 299 00ae 7B61     		str	r3, [r7, #20]
 300              	.L9:
 625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 301              		.loc 1 627 10
 302 00b0 7B69     		ldr	r3, [r7, #20]
 628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 303              		.loc 1 628 2
 304 00b2 1846     		mov	r0, r3
 305 00b4 2837     		adds	r7, r7, #40
 306              	.LCFI3:
 307              		.cfi_def_cfa_offset 8
 308 00b6 BD46     		mov	sp, r7
 309              	.LCFI4:
 310              		.cfi_def_cfa_register 13
 311              		@ sp needed
 312 00b8 80BD     		pop	{r7, pc}
 313              		.cfi_endproc
 314              	.LFE4:
 316              		.section	.text.xTaskCreate,"ax",%progbits
 317              		.align	1
 318              		.global	xTaskCreate
 319              		.syntax unified
 320              		.thumb
 321              		.thumb_func
 323              	xTaskCreate:
 324              	.LFB5:
 629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 21


 633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestrictedStatic( const TaskParameters_t * const pxTaskDefinition, TaskHandl
 636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer != NULL );
 641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->pxTaskBuffer != NULL );
 642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTaskDefinition->puxStackBuffer != NULL ) && ( pxTaskDefinition->pxTaskBuffer != NULL ) )
 644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskDefinition->pxTaskBuffer;
 649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Store the stack location in the TCB. */
 651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->pcName,
 663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									( uint32_t ) pxTaskDefinition->usStackDepth,
 664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->pvParameters,
 665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->uxPriority,
 666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxCreatedTask, pxNewTCB,
 667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->xRegions );
 668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *p
 682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer );
 687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskDefinition->puxStackBuffer != NULL )
 689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 22


 690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Store the stack location in the TCB. */
 698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Tasks can be created statically or dynamically, so note
 703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task had a statically allocated stack in case it is
 704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					later deleted.  The TCB was allocated dynamically. */
 705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pcName,
 711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										( uint32_t ) pxTaskDefinition->usStackDepth,
 712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pvParameters,
 713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->uxPriority,
 714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxCreatedTask, pxNewTCB,
 715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->xRegions );
 716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddNewTaskToReadyList( pxNewTCB );
 718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
 731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and 
 732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const configSTACK_DEPTH_TYPE usStackDepth,
 733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							void * const pvParameters,
 734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							UBaseType_t uxPriority,
 735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							TaskHandle_t * const pxCreatedTask )
 736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 325              		.loc 1 736 2
 326              		.cfi_startproc
 327              		@ args = 8, pretend = 0, frame = 32
 328              		@ frame_needed = 1, uses_anonymous_args = 0
 329 0000 80B5     		push	{r7, lr}
 330              	.LCFI5:
 331              		.cfi_def_cfa_offset 8
 332              		.cfi_offset 7, -8
 333              		.cfi_offset 14, -4
 334 0002 8CB0     		sub	sp, sp, #48
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 23


 335              	.LCFI6:
 336              		.cfi_def_cfa_offset 56
 337 0004 04AF     		add	r7, sp, #16
 338              	.LCFI7:
 339              		.cfi_def_cfa 7, 40
 340 0006 F860     		str	r0, [r7, #12]
 341 0008 B960     		str	r1, [r7, #8]
 342 000a 3B60     		str	r3, [r7]
 343 000c 1346     		mov	r3, r2	@ movhi
 344 000e FB80     		strh	r3, [r7, #6]	@ movhi
 345              	.LBB126:
 737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the stack grows down then allocate the stack then the TCB so the stack
 741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		does not grow into the TCB.  Likewise if the stack grows up then allocate
 742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the TCB then the stack. */
 743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portSTACK_GROWTH > 0 )
 744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends on
 746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the implementation of the port malloc function and whether or not static
 747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allocation is being used. */
 748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the stack used by the task being created.
 753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				The base of the stack memory stored in the TCB so the task can
 754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				be deleted later if required. */
 755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Sta
 756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB->pxStack == NULL )
 758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Could not allocate the stack.  Delete the allocated TCB. */
 760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxNewTCB );
 761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB = NULL;
 762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portSTACK_GROWTH */
 766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxStack;
 768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the stack used by the task being created. */
 770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079
 346              		.loc 1 770 32
 347 0010 FB88     		ldrh	r3, [r7, #6]
 348              		.loc 1 770 14
 349 0012 9B00     		lsls	r3, r3, #2
 350 0014 1846     		mov	r0, r3
 351 0016 FFF7FEFF 		bl	pvPortMalloc
 352 001a 7861     		str	r0, [r7, #20]
 771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxStack != NULL )
 353              		.loc 1 772 6
 354 001c 7B69     		ldr	r3, [r7, #20]
 355 001e 002B     		cmp	r3, #0
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 24


 356 0020 0ED0     		beq	.L12
 773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the TCB. */
 775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returne
 357              		.loc 1 775 28
 358 0022 5C20     		movs	r0, #92
 359 0024 FFF7FEFF 		bl	pvPortMalloc
 360 0028 F861     		str	r0, [r7, #28]
 776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB != NULL )
 361              		.loc 1 777 7
 362 002a FB69     		ldr	r3, [r7, #28]
 363 002c 002B     		cmp	r3, #0
 364 002e 03D0     		beq	.L13
 778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Store the stack location in the TCB. */
 780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB->pxStack = pxStack;
 365              		.loc 1 780 24
 366 0030 FB69     		ldr	r3, [r7, #28]
 367 0032 7A69     		ldr	r2, [r7, #20]
 368 0034 1A63     		str	r2, [r3, #48]
 369 0036 05E0     		b	.L14
 370              	.L13:
 781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
 783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The stack cannot be used as the TCB was not created.  Free
 785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it again. */
 786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxStack );
 371              		.loc 1 786 6
 372 0038 7869     		ldr	r0, [r7, #20]
 373 003a FFF7FEFF 		bl	vPortFree
 374 003e 01E0     		b	.L14
 375              	.L12:
 787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = NULL;
 376              		.loc 1 791 14
 377 0040 0023     		movs	r3, #0
 378 0042 FB61     		str	r3, [r7, #28]
 379              	.L14:
 380              	.LBE126:
 792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portSTACK_GROWTH */
 795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxNewTCB != NULL )
 381              		.loc 1 796 5
 382 0044 FB69     		ldr	r3, [r7, #28]
 383 0046 002B     		cmp	r3, #0
 384 0048 17D0     		beq	.L15
 797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consoli
 799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 25


 801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created dynamically in case it is later deleted. */
 802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 385              		.loc 1 802 37
 386 004a FB69     		ldr	r3, [r7, #28]
 387 004c 0022     		movs	r2, #0
 388 004e 83F85920 		strb	r2, [r3, #89]
 803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, p
 389              		.loc 1 806 4
 390 0052 FA88     		ldrh	r2, [r7, #6]
 391 0054 0023     		movs	r3, #0
 392 0056 0393     		str	r3, [sp, #12]
 393 0058 FB69     		ldr	r3, [r7, #28]
 394 005a 0293     		str	r3, [sp, #8]
 395 005c FB6A     		ldr	r3, [r7, #44]
 396 005e 0193     		str	r3, [sp, #4]
 397 0060 BB6A     		ldr	r3, [r7, #40]
 398 0062 0093     		str	r3, [sp]
 399 0064 3B68     		ldr	r3, [r7]
 400 0066 B968     		ldr	r1, [r7, #8]
 401 0068 F868     		ldr	r0, [r7, #12]
 402 006a FFF7FEFF 		bl	prvInitialiseNewTask
 807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 403              		.loc 1 807 4
 404 006e F869     		ldr	r0, [r7, #28]
 405 0070 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 406              		.loc 1 808 12
 407 0074 0123     		movs	r3, #1
 408 0076 BB61     		str	r3, [r7, #24]
 409 0078 02E0     		b	.L16
 410              	.L15:
 809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 411              		.loc 1 812 12
 412 007a 4FF0FF33 		mov	r3, #-1
 413 007e BB61     		str	r3, [r7, #24]
 414              	.L16:
 813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 415              		.loc 1 815 10
 416 0080 BB69     		ldr	r3, [r7, #24]
 816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 417              		.loc 1 816 2
 418 0082 1846     		mov	r0, r3
 419 0084 2037     		adds	r7, r7, #32
 420              	.LCFI8:
 421              		.cfi_def_cfa_offset 8
 422 0086 BD46     		mov	sp, r7
 423              	.LCFI9:
 424              		.cfi_def_cfa_register 13
 425              		@ sp needed
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 26


 426 0088 80BD     		pop	{r7, pc}
 427              		.cfi_endproc
 428              	.LFE5:
 430              		.section	.text.prvInitialiseNewTask,"ax",%progbits
 431              		.align	1
 432              		.syntax unified
 433              		.thumb
 434              		.thumb_func
 436              	prvInitialiseNewTask:
 437              	.LFB6:
 817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions )
 829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 438              		.loc 1 829 1
 439              		.cfi_startproc
 440              		@ args = 16, pretend = 0, frame = 32
 441              		@ frame_needed = 1, uses_anonymous_args = 0
 442 0000 80B5     		push	{r7, lr}
 443              	.LCFI10:
 444              		.cfi_def_cfa_offset 8
 445              		.cfi_offset 7, -8
 446              		.cfi_offset 14, -4
 447 0002 88B0     		sub	sp, sp, #32
 448              	.LCFI11:
 449              		.cfi_def_cfa_offset 40
 450 0004 00AF     		add	r7, sp, #0
 451              	.LCFI12:
 452              		.cfi_def_cfa_register 7
 453 0006 F860     		str	r0, [r7, #12]
 454 0008 B960     		str	r1, [r7, #8]
 455 000a 7A60     		str	r2, [r7, #4]
 456 000c 3B60     		str	r3, [r7]
 830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** StackType_t *pxTopOfStack;
 831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t x;
 832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Should the task be created in privileged mode? */
 835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		BaseType_t xRunPrivileged;
 836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdTRUE;
 839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdFALSE;
 843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority &= ~portPRIVILEGE_BIT;
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 27


 845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS == 1 */
 846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Avoid dependency on memset() if it is not required. */
 848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
 849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Fill the stack with a known value to assist debugging. */
 851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof(
 457              		.loc 1 851 28
 458 000e 3B6B     		ldr	r3, [r7, #48]
 459 0010 186B     		ldr	r0, [r3, #48]
 460              		.loc 1 851 12
 461 0012 7B68     		ldr	r3, [r7, #4]
 462 0014 9B00     		lsls	r3, r3, #2
 463 0016 1A46     		mov	r2, r3
 464 0018 A521     		movs	r1, #165
 465 001a FFF7FEFF 		bl	memset
 852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* tskSET_NEW_STACKS_TO_KNOWN_VALUE */
 854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Calculate the top of stack address.  This depends on whether the stack
 856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	grows from high memory to low (as per the 80x86) or vice versa.
 857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portSTACK_GROWTH is used to make the result positive or negative as required
 858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	by the port. */
 859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portSTACK_GROWTH < 0 )
 860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 466              		.loc 1 861 29
 467 001e 3B6B     		ldr	r3, [r7, #48]
 468 0020 1A6B     		ldr	r2, [r3, #48]
 469              		.loc 1 861 38
 470 0022 7B68     		ldr	r3, [r7, #4]
 471 0024 03F18043 		add	r3, r3, #1073741824
 472 0028 013B     		subs	r3, r3, #1
 473 002a 9B00     		lsls	r3, r3, #2
 474              		.loc 1 861 16
 475 002c 1344     		add	r3, r3, r2
 476 002e BB61     		str	r3, [r7, #24]
 862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 477              		.loc 1 862 40
 478 0030 BB69     		ldr	r3, [r7, #24]
 479              		.loc 1 862 81
 480 0032 23F00703 		bic	r3, r3, #7
 481              		.loc 1 862 16
 482 0036 BB61     		str	r3, [r7, #24]
 863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the calculated top of stack is correct. */
 865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALI
 483              		.loc 1 865 3
 484 0038 BB69     		ldr	r3, [r7, #24]
 485 003a 03F00703 		and	r3, r3, #7
 486 003e 002B     		cmp	r3, #0
 487 0040 0AD0     		beq	.L19
 488              	.LBB127:
 489              	.LBB128:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 490              		.loc 2 195 2
 491              		.syntax unified
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 28


 492              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 493 0042 4FF05003 			mov r3, #80												
 494 0046 83F31188 		msr basepri, r3											
 495 004a BFF36F8F 		isb														
 496 004e BFF34F8F 		dsb														
 497              	
 498              	@ 0 "" 2
 499              		.thumb
 500              		.syntax unified
 501 0052 7B61     		str	r3, [r7, #20]
 502              		.loc 2 203 1
 503 0054 00BF     		nop
 504              	.L20:
 505              	.LBE128:
 506              	.LBE127:
 507              		.loc 1 865 3 discriminator 1
 508 0056 FEE7     		b	.L20
 509              	.L19:
 866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
 868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Also record the stack's high address, which may assist
 870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			debugging. */
 871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxEndOfStack = pxTopOfStack;
 872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configRECORD_STACK_HIGH_ADDRESS */
 874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portSTACK_GROWTH */
 876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack;
 878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the stack buffer is correct. */
 880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYT
 881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The other extreme of the stack space is required if stack checking is
 883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		performed. */
 884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portSTACK_GROWTH */
 887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the task name in the TCB. */
 889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pcName != NULL )
 510              		.loc 1 889 4
 511 0058 BB68     		ldr	r3, [r7, #8]
 512 005a 002B     		cmp	r3, #0
 513 005c 1FD0     		beq	.L21
 890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 514              		.loc 1 891 10
 515 005e 0023     		movs	r3, #0
 516 0060 FB61     		str	r3, [r7, #28]
 517              		.loc 1 891 3
 518 0062 12E0     		b	.L22
 519              	.L25:
 892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 520              		.loc 1 893 38
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 29


 521 0064 BA68     		ldr	r2, [r7, #8]
 522 0066 FB69     		ldr	r3, [r7, #28]
 523 0068 1344     		add	r3, r3, r2
 524 006a 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 525              		.loc 1 893 30
 526 006c 3A6B     		ldr	r2, [r7, #48]
 527 006e FB69     		ldr	r3, [r7, #28]
 528 0070 1344     		add	r3, r3, r2
 529 0072 3433     		adds	r3, r3, #52
 530 0074 0A46     		mov	r2, r1
 531 0076 1A70     		strb	r2, [r3]
 894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configMAX_TASK_NAME_LEN characters just in case the memory after the
 897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			string is not accessible (extremely unlikely). */
 898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pcName[ x ] == ( char ) 0x00 )
 532              		.loc 1 898 14
 533 0078 BA68     		ldr	r2, [r7, #8]
 534 007a FB69     		ldr	r3, [r7, #28]
 535 007c 1344     		add	r3, r3, r2
 536 007e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 537              		.loc 1 898 6
 538 0080 002B     		cmp	r3, #0
 539 0082 06D0     		beq	.L29
 891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 540              		.loc 1 891 77 discriminator 2
 541 0084 FB69     		ldr	r3, [r7, #28]
 542 0086 0133     		adds	r3, r3, #1
 543 0088 FB61     		str	r3, [r7, #28]
 544              	.L22:
 891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 545              		.loc 1 891 3 discriminator 1
 546 008a FB69     		ldr	r3, [r7, #28]
 547 008c 0F2B     		cmp	r3, #15
 548 008e E9D9     		bls	.L25
 549 0090 00E0     		b	.L24
 550              	.L29:
 899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				break;
 551              		.loc 1 900 5
 552 0092 00BF     		nop
 553              	.L24:
 901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Ensure the name string is terminated in the case that the string length
 909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		was greater or equal to configMAX_TASK_NAME_LEN. */
 910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 554              		.loc 1 910 55
 555 0094 3B6B     		ldr	r3, [r7, #48]
 556 0096 0022     		movs	r2, #0
 557 0098 83F84320 		strb	r2, [r3, #67]
 558 009c 03E0     		b	.L26
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 30


 559              	.L21:
 911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
 913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The task has not been given a name, so just ensure there is a NULL
 915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		terminator when it is read out. */
 916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 560              		.loc 1 916 29
 561 009e 3B6B     		ldr	r3, [r7, #48]
 562 00a0 0022     		movs	r2, #0
 563 00a2 83F83420 		strb	r2, [r3, #52]
 564              	.L26:
 917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
 920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	remove the privilege bit if one is present. */
 921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 565              		.loc 1 921 4
 566 00a6 BB6A     		ldr	r3, [r7, #40]
 567 00a8 372B     		cmp	r3, #55
 568 00aa 01D9     		bls	.L27
 922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 569              		.loc 1 923 14
 570 00ac 3723     		movs	r3, #55
 571 00ae BB62     		str	r3, [r7, #40]
 572              	.L27:
 924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
 926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxNewTCB->uxPriority = uxPriority;
 573              		.loc 1 930 23
 574 00b0 3B6B     		ldr	r3, [r7, #48]
 575 00b2 BA6A     		ldr	r2, [r7, #40]
 576 00b4 DA62     		str	r2, [r3, #44]
 931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxBasePriority = uxPriority;
 577              		.loc 1 933 28
 578 00b6 3B6B     		ldr	r3, [r7, #48]
 579 00b8 BA6A     		ldr	r2, [r7, #40]
 580 00ba DA64     		str	r2, [r3, #76]
 934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 581              		.loc 1 934 27
 582 00bc 3B6B     		ldr	r3, [r7, #48]
 583 00be 0022     		movs	r2, #0
 584 00c0 1A65     		str	r2, [r3, #80]
 935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_MUTEXES */
 937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 585              		.loc 1 938 2
 586 00c2 3B6B     		ldr	r3, [r7, #48]
 587 00c4 0433     		adds	r3, r3, #4
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 31


 588 00c6 1846     		mov	r0, r3
 589 00c8 FFF7FEFF 		bl	vListInitialiseItem
 939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 590              		.loc 1 939 2
 591 00cc 3B6B     		ldr	r3, [r7, #48]
 592 00ce 1833     		adds	r3, r3, #24
 593 00d0 1846     		mov	r0, r3
 594 00d2 FFF7FEFF 		bl	vListInitialiseItem
 940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
 943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 595              		.loc 1 943 2
 596 00d6 3B6B     		ldr	r3, [r7, #48]
 597 00d8 3A6B     		ldr	r2, [r7, #48]
 598 00da 1A61     		str	r2, [r3, #16]
 944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Event lists are always in priority order. */
 946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( Ti
 599              		.loc 1 946 2
 600 00dc BB6A     		ldr	r3, [r7, #40]
 601 00de C3F13802 		rsb	r2, r3, #56
 602 00e2 3B6B     		ldr	r3, [r7, #48]
 603 00e4 9A61     		str	r2, [r3, #24]
 947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 604              		.loc 1 947 2
 605 00e6 3B6B     		ldr	r3, [r7, #48]
 606 00e8 3A6B     		ldr	r2, [r7, #48]
 607 00ea 5A62     		str	r2, [r3, #36]
 948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
 954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTaskTag = NULL;
 958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
 960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulRunTimeCounter = 0UL;
 964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
 966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth
 970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
 972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Avoid compiler warning about unreferenced parameter. */
 974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xRegions;
 975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 32


 976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
 988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulNotifiedValue = 0;
 608              		.loc 1 989 29
 609 00ec 3B6B     		ldr	r3, [r7, #48]
 610 00ee 0022     		movs	r2, #0
 611 00f0 5A65     		str	r2, [r3, #84]
 990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 612              		.loc 1 990 27
 613 00f2 3B6B     		ldr	r3, [r7, #48]
 614 00f4 0022     		movs	r2, #0
 615 00f6 83F85820 		strb	r2, [r3, #88]
 991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Initialise this task's Newlib reent structure. */
 997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
1000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
1002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucDelayAborted = pdFALSE;
1004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
1006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Initialize the TCB stack to look as if the task was already running,
1008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	but had been interrupted by the scheduler.  The return address is set
1009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to the start of the task function. Once the stack has been initialised
1010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the top of stack variable is updated. */
1011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
1012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the port has capability to detect stack overflow,
1014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pass the stack end address to the stack initialization
1015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function as well. */
1016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( portSTACK_GROWTH < 0 )
1019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pv
1021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else /* portSTACK_GROWTH */
1023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStack, pxTaskCod
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 33


1025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* portSTACK_GROWTH */
1027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portHAS_STACK_OVERFLOW_CHECKING */
1029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPriv
1031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
1033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
1035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the port has capability to detect stack overflow,
1037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pass the stack end address to the stack initialization
1038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function as well. */
1039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( portSTACK_GROWTH < 0 )
1042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pv
1044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else /* portSTACK_GROWTH */
1046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStack, pxTaskCod
1048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* portSTACK_GROWTH */
1050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portHAS_STACK_OVERFLOW_CHECKING */
1052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 616              		.loc 1 1053 29
 617 00fa 3A68     		ldr	r2, [r7]
 618 00fc F968     		ldr	r1, [r7, #12]
 619 00fe B869     		ldr	r0, [r7, #24]
 620 0100 FFF7FEFF 		bl	pxPortInitialiseStack
 621 0104 0246     		mov	r2, r0
 622              		.loc 1 1053 27
 623 0106 3B6B     		ldr	r3, [r7, #48]
 624 0108 1A60     		str	r2, [r3]
1054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
1056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
1058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxCreatedTask != NULL )
 625              		.loc 1 1059 4
 626 010a FB6A     		ldr	r3, [r7, #44]
 627 010c 002B     		cmp	r3, #0
 628 010e 02D0     		beq	.L30
1060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pass the handle out in an anonymous way.  The handle can be used to
1062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		change the created task's priority, delete the created task, etc.*/
1063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 629              		.loc 1 1063 18
 630 0110 FB6A     		ldr	r3, [r7, #44]
 631 0112 3A6B     		ldr	r2, [r7, #48]
 632 0114 1A60     		str	r2, [r3]
 633              	.L30:
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 34


1064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 634              		.loc 1 1069 1
 635 0116 00BF     		nop
 636 0118 2037     		adds	r7, r7, #32
 637              	.LCFI13:
 638              		.cfi_def_cfa_offset 8
 639 011a BD46     		mov	sp, r7
 640              	.LCFI14:
 641              		.cfi_def_cfa_register 13
 642              		@ sp needed
 643 011c 80BD     		pop	{r7, pc}
 644              		.cfi_endproc
 645              	.LFE6:
 647              		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
 648              		.align	1
 649              		.syntax unified
 650              		.thumb
 651              		.thumb_func
 653              	prvAddNewTaskToReadyList:
 654              	.LFB7:
1070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
1073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 655              		.loc 1 1073 1
 656              		.cfi_startproc
 657              		@ args = 0, pretend = 0, frame = 8
 658              		@ frame_needed = 1, uses_anonymous_args = 0
 659 0000 80B5     		push	{r7, lr}
 660              	.LCFI15:
 661              		.cfi_def_cfa_offset 8
 662              		.cfi_offset 7, -8
 663              		.cfi_offset 14, -4
 664 0002 82B0     		sub	sp, sp, #8
 665              	.LCFI16:
 666              		.cfi_def_cfa_offset 16
 667 0004 00AF     		add	r7, sp, #0
 668              	.LCFI17:
 669              		.cfi_def_cfa_register 7
 670 0006 7860     		str	r0, [r7, #4]
1074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
1075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	updated. */
1076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 671              		.loc 1 1076 2
 672 0008 FFF7FEFF 		bl	vPortEnterCritical
1077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxCurrentNumberOfTasks++;
 673              		.loc 1 1078 25
 674 000c 2D4B     		ldr	r3, .L37
 675 000e 1B68     		ldr	r3, [r3]
 676 0010 0133     		adds	r3, r3, #1
 677 0012 2C4A     		ldr	r2, .L37
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 35


 678 0014 1360     		str	r3, [r2]
1079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
 679              		.loc 1 1079 20
 680 0016 2C4B     		ldr	r3, .L37+4
 681 0018 1B68     		ldr	r3, [r3]
 682              		.loc 1 1079 5
 683 001a 002B     		cmp	r3, #0
 684 001c 09D1     		bne	.L32
1080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are no other tasks, or all the other tasks are in
1082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the suspended state - make this the current task. */
1083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB = pxNewTCB;
 685              		.loc 1 1083 17
 686 001e 2A4A     		ldr	r2, .L37+4
 687 0020 7B68     		ldr	r3, [r7, #4]
 688 0022 1360     		str	r3, [r2]
1084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 689              		.loc 1 1085 31
 690 0024 274B     		ldr	r3, .L37
 691 0026 1B68     		ldr	r3, [r3]
 692              		.loc 1 1085 6
 693 0028 012B     		cmp	r3, #1
 694 002a 10D1     		bne	.L33
1086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* This is the first task to be created so do the preliminary
1088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				initialisation required.  We will not recover if this call
1089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				fails, but we will report the failure. */
1090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseTaskLists();
 695              		.loc 1 1090 5
 696 002c FFF7FEFF 		bl	prvInitialiseTaskLists
 697 0030 0DE0     		b	.L33
 698              	.L32:
1091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the scheduler is not already running, make this task the
1100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			current task if it is the highest priority task to be created
1101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			so far. */
1102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning == pdFALSE )
 699              		.loc 1 1102 26
 700 0032 264B     		ldr	r3, .L37+8
 701 0034 1B68     		ldr	r3, [r3]
 702              		.loc 1 1102 6
 703 0036 002B     		cmp	r3, #0
 704 0038 09D1     		bne	.L33
1103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 705              		.loc 1 1104 21
 706 003a 234B     		ldr	r3, .L37+4
 707 003c 1B68     		ldr	r3, [r3]
 708 003e DA6A     		ldr	r2, [r3, #44]
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 36


 709              		.loc 1 1104 45
 710 0040 7B68     		ldr	r3, [r7, #4]
 711 0042 DB6A     		ldr	r3, [r3, #44]
 712              		.loc 1 1104 7
 713 0044 9A42     		cmp	r2, r3
 714 0046 02D8     		bhi	.L33
1105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = pxNewTCB;
 715              		.loc 1 1106 19
 716 0048 1F4A     		ldr	r2, .L37+4
 717 004a 7B68     		ldr	r3, [r7, #4]
 718 004c 1360     		str	r3, [r2]
 719              	.L33:
1107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTaskNumber++;
 720              		.loc 1 1119 15
 721 004e 204B     		ldr	r3, .L37+12
 722 0050 1B68     		ldr	r3, [r3]
 723 0052 0133     		adds	r3, r3, #1
 724 0054 1E4A     		ldr	r2, .L37+12
 725 0056 1360     		str	r3, [r2]
1120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TRACE_FACILITY == 1 )
1122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add a counter into the TCB for tracing only. */
1124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->uxTCBNumber = uxTaskNumber;
 726              		.loc 1 1124 26
 727 0058 1D4B     		ldr	r3, .L37+12
 728 005a 1A68     		ldr	r2, [r3]
 729 005c 7B68     		ldr	r3, [r7, #4]
 730 005e 5A64     		str	r2, [r3, #68]
1125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TRACE_FACILITY */
1127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_CREATE( pxNewTCB );
1128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxNewTCB );
 731              		.loc 1 1129 3
 732 0060 7B68     		ldr	r3, [r7, #4]
 733 0062 DA6A     		ldr	r2, [r3, #44]
 734 0064 1B4B     		ldr	r3, .L37+16
 735 0066 1B68     		ldr	r3, [r3]
 736 0068 9A42     		cmp	r2, r3
 737 006a 03D9     		bls	.L34
 738              		.loc 1 1129 3 is_stmt 0 discriminator 1
 739 006c 7B68     		ldr	r3, [r7, #4]
 740 006e DB6A     		ldr	r3, [r3, #44]
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 37


 741 0070 184A     		ldr	r2, .L37+16
 742 0072 1360     		str	r3, [r2]
 743              	.L34:
 744              		.loc 1 1129 3 discriminator 3
 745 0074 7B68     		ldr	r3, [r7, #4]
 746 0076 DA6A     		ldr	r2, [r3, #44]
 747 0078 1346     		mov	r3, r2
 748 007a 9B00     		lsls	r3, r3, #2
 749 007c 1344     		add	r3, r3, r2
 750 007e 9B00     		lsls	r3, r3, #2
 751 0080 154A     		ldr	r2, .L37+20
 752 0082 1A44     		add	r2, r2, r3
 753 0084 7B68     		ldr	r3, [r7, #4]
 754 0086 0433     		adds	r3, r3, #4
 755 0088 1946     		mov	r1, r3
 756 008a 1046     		mov	r0, r2
 757 008c FFF7FEFF 		bl	vListInsertEnd
1130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portSETUP_TCB( pxNewTCB );
1132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 758              		.loc 1 1133 2 is_stmt 1 discriminator 3
 759 0090 FFF7FEFF 		bl	vPortExitCritical
1134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xSchedulerRunning != pdFALSE )
 760              		.loc 1 1135 24 discriminator 3
 761 0094 0D4B     		ldr	r3, .L37+8
 762 0096 1B68     		ldr	r3, [r3]
 763              		.loc 1 1135 4 discriminator 3
 764 0098 002B     		cmp	r3, #0
 765 009a 0ED0     		beq	.L36
1136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the created task is of a higher priority than the current task
1138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then it should run now. */
1139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 766              		.loc 1 1139 19
 767 009c 0A4B     		ldr	r3, .L37+4
 768 009e 1B68     		ldr	r3, [r3]
 769 00a0 DA6A     		ldr	r2, [r3, #44]
 770              		.loc 1 1139 42
 771 00a2 7B68     		ldr	r3, [r7, #4]
 772 00a4 DB6A     		ldr	r3, [r3, #44]
 773              		.loc 1 1139 5
 774 00a6 9A42     		cmp	r2, r3
 775 00a8 07D2     		bcs	.L36
1140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD_IF_USING_PREEMPTION();
 776              		.loc 1 1141 4
 777 00aa 0C4B     		ldr	r3, .L37+24
 778 00ac 4FF08052 		mov	r2, #268435456
 779 00b0 1A60     		str	r2, [r3]
 780              		.syntax unified
 781              	@ 1141 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 782 00b2 BFF34F8F 		dsb
 783              	@ 0 "" 2
 784              	@ 1141 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 785 00b6 BFF36F8F 		isb
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 38


 786              	@ 0 "" 2
 787              		.thumb
 788              		.syntax unified
 789              	.L36:
1142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 790              		.loc 1 1152 1
 791 00ba 00BF     		nop
 792 00bc 0837     		adds	r7, r7, #8
 793              	.LCFI18:
 794              		.cfi_def_cfa_offset 8
 795 00be BD46     		mov	sp, r7
 796              	.LCFI19:
 797              		.cfi_def_cfa_register 13
 798              		@ sp needed
 799 00c0 80BD     		pop	{r7, pc}
 800              	.L38:
 801 00c2 00BF     		.align	2
 802              	.L37:
 803 00c4 00000000 		.word	uxCurrentNumberOfTasks
 804 00c8 00000000 		.word	pxCurrentTCB
 805 00cc 00000000 		.word	xSchedulerRunning
 806 00d0 00000000 		.word	uxTaskNumber
 807 00d4 00000000 		.word	uxTopReadyPriority
 808 00d8 00000000 		.word	pxReadyTasksLists
 809 00dc 04ED00E0 		.word	-536810236
 810              		.cfi_endproc
 811              	.LFE7:
 813              		.section	.text.vTaskDelete,"ax",%progbits
 814              		.align	1
 815              		.global	vTaskDelete
 816              		.syntax unified
 817              		.thumb
 818              		.thumb_func
 820              	vTaskDelete:
 821              	.LFB8:
1153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
1158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 822              		.loc 1 1158 2
 823              		.cfi_startproc
 824              		@ args = 0, pretend = 0, frame = 16
 825              		@ frame_needed = 1, uses_anonymous_args = 0
 826 0000 80B5     		push	{r7, lr}
 827              	.LCFI20:
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 39


 828              		.cfi_def_cfa_offset 8
 829              		.cfi_offset 7, -8
 830              		.cfi_offset 14, -4
 831 0002 84B0     		sub	sp, sp, #16
 832              	.LCFI21:
 833              		.cfi_def_cfa_offset 24
 834 0004 00AF     		add	r7, sp, #0
 835              	.LCFI22:
 836              		.cfi_def_cfa_register 7
 837 0006 7860     		str	r0, [r7, #4]
1159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 838              		.loc 1 1161 3
 839 0008 FFF7FEFF 		bl	vPortEnterCritical
1162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the calling task that is
1164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being deleted. */
1165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 840              		.loc 1 1165 12
 841 000c 7B68     		ldr	r3, [r7, #4]
 842 000e 002B     		cmp	r3, #0
 843 0010 02D1     		bne	.L40
 844              		.loc 1 1165 12 is_stmt 0 discriminator 1
 845 0012 2C4B     		ldr	r3, .L49
 846 0014 1B68     		ldr	r3, [r3]
 847 0016 00E0     		b	.L41
 848              	.L40:
 849              		.loc 1 1165 12 discriminator 2
 850 0018 7B68     		ldr	r3, [r7, #4]
 851              	.L41:
 852              		.loc 1 1165 10 is_stmt 1 discriminator 4
 853 001a FB60     		str	r3, [r7, #12]
1166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready list. */
1168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 854              		.loc 1 1168 8 discriminator 4
 855 001c FB68     		ldr	r3, [r7, #12]
 856 001e 0433     		adds	r3, r3, #4
 857 0020 1846     		mov	r0, r3
 858 0022 FFF7FEFF 		bl	uxListRemove
1169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 859              		.loc 1 1178 8 discriminator 4
 860 0026 FB68     		ldr	r3, [r7, #12]
 861 0028 9B6A     		ldr	r3, [r3, #40]
 862              		.loc 1 1178 6 discriminator 4
 863 002a 002B     		cmp	r3, #0
 864 002c 04D0     		beq	.L42
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 40


1179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 865              		.loc 1 1180 14
 866 002e FB68     		ldr	r3, [r7, #12]
 867 0030 1833     		adds	r3, r3, #24
 868 0032 1846     		mov	r0, r3
 869 0034 FFF7FEFF 		bl	uxListRemove
 870              	.L42:
1181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Increment the uxTaskNumber also so kernel aware debuggers can
1188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			detect that the task lists need re-generating.  This is done before
1189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not return. */
1191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTaskNumber++;
 871              		.loc 1 1191 16
 872 0038 234B     		ldr	r3, .L49+4
 873 003a 1B68     		ldr	r3, [r3]
 874 003c 0133     		adds	r3, r3, #1
 875 003e 224A     		ldr	r2, .L49+4
 876 0040 1360     		str	r3, [r2]
1192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
 877              		.loc 1 1193 14
 878 0042 204B     		ldr	r3, .L49
 879 0044 1B68     		ldr	r3, [r3]
 880              		.loc 1 1193 6
 881 0046 FA68     		ldr	r2, [r7, #12]
 882 0048 9A42     		cmp	r2, r3
 883 004a 0BD1     		bne	.L43
1194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task is deleting itself.  This cannot complete within the
1196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task itself, as a context switch to another task is required.
1197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Place the task in the termination list.  The idle task will
1198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the termination list and free up any memory allocated by
1199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the scheduler for the TCB and stack of the deleted task. */
1200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 884              		.loc 1 1200 5
 885 004c FB68     		ldr	r3, [r7, #12]
 886 004e 0433     		adds	r3, r3, #4
 887 0050 1946     		mov	r1, r3
 888 0052 1E48     		ldr	r0, .L49+8
 889 0054 FFF7FEFF 		bl	vListInsertEnd
1201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Increment the ucTasksDeleted variable so the idle task knows
1203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				there is a task that has been deleted and that it should therefore
1204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the xTasksWaitingTermination list. */
1205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				++uxDeletedTasksWaitingCleanUp;
 890              		.loc 1 1205 5
 891 0058 1D4B     		ldr	r3, .L49+12
 892 005a 1B68     		ldr	r3, [r3]
 893 005c 0133     		adds	r3, r3, #1
 894 005e 1C4A     		ldr	r2, .L49+12
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 41


 895 0060 1360     		str	r3, [r2]
 896 0062 09E0     		b	.L44
 897              	.L43:
1206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
1208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in which Windows specific clean up operations are performed,
1209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				after which it is not possible to yield away from this task -
1210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
1211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				required. */
1212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
 898              		.loc 1 1216 5
 899 0064 1B4B     		ldr	r3, .L49+16
 900 0066 1B68     		ldr	r3, [r3]
 901 0068 013B     		subs	r3, r3, #1
 902 006a 1A4A     		ldr	r2, .L49+16
 903 006c 1360     		str	r3, [r2]
1217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
 904              		.loc 1 1217 5
 905 006e F868     		ldr	r0, [r7, #12]
 906 0070 FFF7FEFF 		bl	prvDeleteTCB
1218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
1220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task that has just been deleted. */
1221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
 907              		.loc 1 1221 5
 908 0074 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 909              	.L44:
1222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_DELETE( pxTCB );
1225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 910              		.loc 1 1226 3
 911 0078 FFF7FEFF 		bl	vPortExitCritical
1227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
1229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been deleted. */
1230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 912              		.loc 1 1230 25
 913 007c 164B     		ldr	r3, .L49+20
 914 007e 1B68     		ldr	r3, [r3]
 915              		.loc 1 1230 5
 916 0080 002B     		cmp	r3, #0
 917 0082 1BD0     		beq	.L48
1231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
 918              		.loc 1 1232 14
 919 0084 0F4B     		ldr	r3, .L49
 920 0086 1B68     		ldr	r3, [r3]
 921              		.loc 1 1232 6
 922 0088 FA68     		ldr	r2, [r7, #12]
 923 008a 9A42     		cmp	r2, r3
 924 008c 16D1     		bne	.L48
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 42


1233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
 925              		.loc 1 1234 5
 926 008e 134B     		ldr	r3, .L49+24
 927 0090 1B68     		ldr	r3, [r3]
 928 0092 002B     		cmp	r3, #0
 929 0094 0AD0     		beq	.L46
 930              	.LBB129:
 931              	.LBB130:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 932              		.loc 2 195 2
 933              		.syntax unified
 934              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 935 0096 4FF05003 			mov r3, #80												
 936 009a 83F31188 		msr basepri, r3											
 937 009e BFF36F8F 		isb														
 938 00a2 BFF34F8F 		dsb														
 939              	
 940              	@ 0 "" 2
 941              		.thumb
 942              		.syntax unified
 943 00a6 BB60     		str	r3, [r7, #8]
 944              		.loc 2 203 1
 945 00a8 00BF     		nop
 946              	.L47:
 947              	.LBE130:
 948              	.LBE129:
 949              		.loc 1 1234 5 discriminator 1
 950 00aa FEE7     		b	.L47
 951              	.L46:
1235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 952              		.loc 1 1235 5
 953 00ac 0C4B     		ldr	r3, .L49+28
 954 00ae 4FF08052 		mov	r2, #268435456
 955 00b2 1A60     		str	r2, [r3]
 956              		.syntax unified
 957              	@ 1235 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 958 00b4 BFF34F8F 		dsb
 959              	@ 0 "" 2
 960              	@ 1235 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 961 00b8 BFF36F8F 		isb
 962              	@ 0 "" 2
 963              		.thumb
 964              		.syntax unified
 965              	.L48:
1236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 966              		.loc 1 1242 2
 967 00bc 00BF     		nop
 968 00be 1037     		adds	r7, r7, #16
 969              	.LCFI23:
 970              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 43


 971 00c0 BD46     		mov	sp, r7
 972              	.LCFI24:
 973              		.cfi_def_cfa_register 13
 974              		@ sp needed
 975 00c2 80BD     		pop	{r7, pc}
 976              	.L50:
 977              		.align	2
 978              	.L49:
 979 00c4 00000000 		.word	pxCurrentTCB
 980 00c8 00000000 		.word	uxTaskNumber
 981 00cc 00000000 		.word	xTasksWaitingTermination
 982 00d0 00000000 		.word	uxDeletedTasksWaitingCleanUp
 983 00d4 00000000 		.word	uxCurrentNumberOfTasks
 984 00d8 00000000 		.word	xSchedulerRunning
 985 00dc 00000000 		.word	uxSchedulerSuspended
 986 00e0 04ED00E0 		.word	-536810236
 987              		.cfi_endproc
 988              	.LFE8:
 990              		.section	.text.vTaskDelayUntil,"ax",%progbits
 991              		.align	1
 992              		.global	vTaskDelayUntil
 993              		.syntax unified
 994              		.thumb
 995              		.thumb_func
 997              	vTaskDelayUntil:
 998              	.LFB9:
1243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
1248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
1250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 999              		.loc 1 1250 2
 1000              		.cfi_startproc
 1001              		@ args = 0, pretend = 0, frame = 40
 1002              		@ frame_needed = 1, uses_anonymous_args = 0
 1003 0000 80B5     		push	{r7, lr}
 1004              	.LCFI25:
 1005              		.cfi_def_cfa_offset 8
 1006              		.cfi_offset 7, -8
 1007              		.cfi_offset 14, -4
 1008 0002 8AB0     		sub	sp, sp, #40
 1009              	.LCFI26:
 1010              		.cfi_def_cfa_offset 48
 1011 0004 00AF     		add	r7, sp, #0
 1012              	.LCFI27:
 1013              		.cfi_def_cfa_register 7
 1014 0006 7860     		str	r0, [r7, #4]
 1015 0008 3960     		str	r1, [r7]
1251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xTimeToWake;
1252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 1016              		.loc 1 1252 30
 1017 000a 0023     		movs	r3, #0
 1018 000c 7B62     		str	r3, [r7, #36]
1253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 44


1254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxPreviousWakeTime );
 1019              		.loc 1 1254 3
 1020 000e 7B68     		ldr	r3, [r7, #4]
 1021 0010 002B     		cmp	r3, #0
 1022 0012 0AD1     		bne	.L52
 1023              	.LBB131:
 1024              	.LBB132:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1025              		.loc 2 195 2
 1026              		.syntax unified
 1027              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1028 0014 4FF05003 			mov r3, #80												
 1029 0018 83F31188 		msr basepri, r3											
 1030 001c BFF36F8F 		isb														
 1031 0020 BFF34F8F 		dsb														
 1032              	
 1033              	@ 0 "" 2
 1034              		.thumb
 1035              		.syntax unified
 1036 0024 7B61     		str	r3, [r7, #20]
 1037              		.loc 2 203 1
 1038 0026 00BF     		nop
 1039              	.L53:
 1040              	.LBE132:
 1041              	.LBE131:
 1042              		.loc 1 1254 3 discriminator 1
 1043 0028 FEE7     		b	.L53
 1044              	.L52:
1255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 1045              		.loc 1 1255 3
 1046 002a 3B68     		ldr	r3, [r7]
 1047 002c 002B     		cmp	r3, #0
 1048 002e 0AD1     		bne	.L54
 1049              	.LBB133:
 1050              	.LBB134:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1051              		.loc 2 195 2
 1052              		.syntax unified
 1053              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1054 0030 4FF05003 			mov r3, #80												
 1055 0034 83F31188 		msr basepri, r3											
 1056 0038 BFF36F8F 		isb														
 1057 003c BFF34F8F 		dsb														
 1058              	
 1059              	@ 0 "" 2
 1060              		.thumb
 1061              		.syntax unified
 1062 0040 3B61     		str	r3, [r7, #16]
 1063              		.loc 2 203 1
 1064 0042 00BF     		nop
 1065              	.L55:
 1066              	.LBE134:
 1067              	.LBE133:
 1068              		.loc 1 1255 3 discriminator 2
 1069 0044 FEE7     		b	.L55
 1070              	.L54:
1256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 45


 1071              		.loc 1 1256 3
 1072 0046 2A4B     		ldr	r3, .L64
 1073 0048 1B68     		ldr	r3, [r3]
 1074 004a 002B     		cmp	r3, #0
 1075 004c 0AD0     		beq	.L56
 1076              	.LBB135:
 1077              	.LBB136:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1078              		.loc 2 195 2
 1079              		.syntax unified
 1080              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1081 004e 4FF05003 			mov r3, #80												
 1082 0052 83F31188 		msr basepri, r3											
 1083 0056 BFF36F8F 		isb														
 1084 005a BFF34F8F 		dsb														
 1085              	
 1086              	@ 0 "" 2
 1087              		.thumb
 1088              		.syntax unified
 1089 005e FB60     		str	r3, [r7, #12]
 1090              		.loc 2 203 1
 1091 0060 00BF     		nop
 1092              	.L57:
 1093              	.LBE136:
 1094              	.LBE135:
 1095              		.loc 1 1256 3 discriminator 3
 1096 0062 FEE7     		b	.L57
 1097              	.L56:
1257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
 1098              		.loc 1 1258 3
 1099 0064 FFF7FEFF 		bl	vTaskSuspendAll
 1100              	.LBB137:
1259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			block. */
1262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
 1101              		.loc 1 1262 21
 1102 0068 224B     		ldr	r3, .L64+4
 1103 006a 1B68     		ldr	r3, [r3]
 1104 006c 3B62     		str	r3, [r7, #32]
1263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
1265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 1105              		.loc 1 1265 18
 1106 006e 7B68     		ldr	r3, [r7, #4]
 1107 0070 1B68     		ldr	r3, [r3]
 1108              		.loc 1 1265 16
 1109 0072 3A68     		ldr	r2, [r7]
 1110 0074 1344     		add	r3, r3, r2
 1111 0076 FB61     		str	r3, [r7, #28]
1266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
 1112              		.loc 1 1267 26
 1113 0078 7B68     		ldr	r3, [r7, #4]
 1114 007a 1B68     		ldr	r3, [r3]
 1115              		.loc 1 1267 6
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 46


 1116 007c 3A6A     		ldr	r2, [r7, #32]
 1117 007e 9A42     		cmp	r2, r3
 1118 0080 0BD2     		bcs	.L58
1268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick count has overflowed since this function was
1270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lasted called.  In this case the only time we should ever
1271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				actually delay is if the wake time has also	overflowed,
1272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				and the wake time is greater than the tick time.  When this
1273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is the case it is as if neither time had overflowed. */
1274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 1119              		.loc 1 1274 25
 1120 0082 7B68     		ldr	r3, [r7, #4]
 1121 0084 1B68     		ldr	r3, [r3]
 1122              		.loc 1 1274 7
 1123 0086 FA69     		ldr	r2, [r7, #28]
 1124 0088 9A42     		cmp	r2, r3
 1125 008a 11D2     		bcs	.L59
 1126              		.loc 1 1274 47 discriminator 1
 1127 008c FA69     		ldr	r2, [r7, #28]
 1128 008e 3B6A     		ldr	r3, [r7, #32]
 1129 0090 9A42     		cmp	r2, r3
 1130 0092 0DD9     		bls	.L59
1275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
 1131              		.loc 1 1276 19
 1132 0094 0123     		movs	r3, #1
 1133 0096 7B62     		str	r3, [r7, #36]
 1134 0098 0AE0     		b	.L59
 1135              	.L58:
1277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
1286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				delay if either the wake time has overflowed, and/or the
1287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				tick time is less than the wake time. */
1288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 1136              		.loc 1 1288 25
 1137 009a 7B68     		ldr	r3, [r7, #4]
 1138 009c 1B68     		ldr	r3, [r3]
 1139              		.loc 1 1288 7
 1140 009e FA69     		ldr	r2, [r7, #28]
 1141 00a0 9A42     		cmp	r2, r3
 1142 00a2 03D3     		bcc	.L60
 1143              		.loc 1 1288 47 discriminator 1
 1144 00a4 FA69     		ldr	r2, [r7, #28]
 1145 00a6 3B6A     		ldr	r3, [r7, #32]
 1146 00a8 9A42     		cmp	r2, r3
 1147 00aa 01D9     		bls	.L59
 1148              	.L60:
1289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
 1149              		.loc 1 1290 19
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 47


 1150 00ac 0123     		movs	r3, #1
 1151 00ae 7B62     		str	r3, [r7, #36]
 1152              	.L59:
1291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Update the wake time ready for the next call. */
1299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
 1153              		.loc 1 1299 24
 1154 00b0 7B68     		ldr	r3, [r7, #4]
 1155 00b2 FA69     		ldr	r2, [r7, #28]
 1156 00b4 1A60     		str	r2, [r3]
1300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xShouldDelay != pdFALSE )
 1157              		.loc 1 1301 6
 1158 00b6 7B6A     		ldr	r3, [r7, #36]
 1159 00b8 002B     		cmp	r3, #0
 1160 00ba 06D0     		beq	.L61
1302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY_UNTIL( xTimeToWake );
1304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* prvAddCurrentTaskToDelayedList() needs the block time, not
1306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the time to wake, so subtract the current tick count. */
1307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 1161              		.loc 1 1307 5
 1162 00bc FA69     		ldr	r2, [r7, #28]
 1163 00be 3B6A     		ldr	r3, [r7, #32]
 1164 00c0 D31A     		subs	r3, r2, r3
 1165 00c2 0021     		movs	r1, #0
 1166 00c4 1846     		mov	r0, r3
 1167 00c6 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 1168              	.L61:
 1169              	.LBE137:
1308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
 1170              		.loc 1 1314 21
 1171 00ca FFF7FEFF 		bl	xTaskResumeAll
 1172 00ce B861     		str	r0, [r7, #24]
1315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 1173              		.loc 1 1318 5
 1174 00d0 BB69     		ldr	r3, [r7, #24]
 1175 00d2 002B     		cmp	r3, #0
 1176 00d4 07D1     		bne	.L63
1319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 48


 1177              		.loc 1 1320 4
 1178 00d6 084B     		ldr	r3, .L64+8
 1179 00d8 4FF08052 		mov	r2, #268435456
 1180 00dc 1A60     		str	r2, [r3]
 1181              		.syntax unified
 1182              	@ 1320 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1183 00de BFF34F8F 		dsb
 1184              	@ 0 "" 2
 1185              	@ 1320 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1186 00e2 BFF36F8F 		isb
 1187              	@ 0 "" 2
 1188              		.thumb
 1189              		.syntax unified
 1190              	.L63:
1321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1191              		.loc 1 1326 2
 1192 00e6 00BF     		nop
 1193 00e8 2837     		adds	r7, r7, #40
 1194              	.LCFI28:
 1195              		.cfi_def_cfa_offset 8
 1196 00ea BD46     		mov	sp, r7
 1197              	.LCFI29:
 1198              		.cfi_def_cfa_register 13
 1199              		@ sp needed
 1200 00ec 80BD     		pop	{r7, pc}
 1201              	.L65:
 1202 00ee 00BF     		.align	2
 1203              	.L64:
 1204 00f0 00000000 		.word	uxSchedulerSuspended
 1205 00f4 00000000 		.word	xTickCount
 1206 00f8 04ED00E0 		.word	-536810236
 1207              		.cfi_endproc
 1208              	.LFE9:
 1210              		.section	.text.vTaskDelay,"ax",%progbits
 1211              		.align	1
 1212              		.global	vTaskDelay
 1213              		.syntax unified
 1214              		.thumb
 1215              		.thumb_func
 1217              	vTaskDelay:
 1218              	.LFB10:
1327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
1329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
1334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1219              		.loc 1 1334 2
 1220              		.cfi_startproc
 1221              		@ args = 0, pretend = 0, frame = 16
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 49


 1222              		@ frame_needed = 1, uses_anonymous_args = 0
 1223 0000 80B5     		push	{r7, lr}
 1224              	.LCFI30:
 1225              		.cfi_def_cfa_offset 8
 1226              		.cfi_offset 7, -8
 1227              		.cfi_offset 14, -4
 1228 0002 84B0     		sub	sp, sp, #16
 1229              	.LCFI31:
 1230              		.cfi_def_cfa_offset 24
 1231 0004 00AF     		add	r7, sp, #0
 1232              	.LCFI32:
 1233              		.cfi_def_cfa_register 7
 1234 0006 7860     		str	r0, [r7, #4]
1335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 1235              		.loc 1 1335 13
 1236 0008 0023     		movs	r3, #0
 1237 000a FB60     		str	r3, [r7, #12]
1336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
1338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
 1238              		.loc 1 1338 5
 1239 000c 7B68     		ldr	r3, [r7, #4]
 1240 000e 002B     		cmp	r3, #0
 1241 0010 17D0     		beq	.L67
1339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
 1242              		.loc 1 1340 4
 1243 0012 134B     		ldr	r3, .L72
 1244 0014 1B68     		ldr	r3, [r3]
 1245 0016 002B     		cmp	r3, #0
 1246 0018 0AD0     		beq	.L68
 1247              	.LBB138:
 1248              	.LBB139:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1249              		.loc 2 195 2
 1250              		.syntax unified
 1251              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1252 001a 4FF05003 			mov r3, #80												
 1253 001e 83F31188 		msr basepri, r3											
 1254 0022 BFF36F8F 		isb														
 1255 0026 BFF34F8F 		dsb														
 1256              	
 1257              	@ 0 "" 2
 1258              		.thumb
 1259              		.syntax unified
 1260 002a BB60     		str	r3, [r7, #8]
 1261              		.loc 2 203 1
 1262 002c 00BF     		nop
 1263              	.L69:
 1264              	.LBE139:
 1265              	.LBE138:
 1266              		.loc 1 1340 4 discriminator 1
 1267 002e FEE7     		b	.L69
 1268              	.L68:
1341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 1269              		.loc 1 1341 4
 1270 0030 FFF7FEFF 		bl	vTaskSuspendAll
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 50


1342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY();
1344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task that is removed from the event list while the
1346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended will not get placed in the ready
1347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list or removed from the blocked list until the scheduler
1348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is resumed.
1349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				This task cannot be in an event list as it is the currently
1351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				executing task. */
1352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 1271              		.loc 1 1352 5
 1272 0034 0021     		movs	r1, #0
 1273 0036 7868     		ldr	r0, [r7, #4]
 1274 0038 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
1353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
 1275              		.loc 1 1354 22
 1276 003c FFF7FEFF 		bl	xTaskResumeAll
 1277 0040 F860     		str	r0, [r7, #12]
 1278              	.L67:
1355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 1279              		.loc 1 1363 5
 1280 0042 FB68     		ldr	r3, [r7, #12]
 1281 0044 002B     		cmp	r3, #0
 1282 0046 07D1     		bne	.L71
1364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
 1283              		.loc 1 1365 4
 1284 0048 064B     		ldr	r3, .L72+4
 1285 004a 4FF08052 		mov	r2, #268435456
 1286 004e 1A60     		str	r2, [r3]
 1287              		.syntax unified
 1288              	@ 1365 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1289 0050 BFF34F8F 		dsb
 1290              	@ 0 "" 2
 1291              	@ 1365 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1292 0054 BFF36F8F 		isb
 1293              	@ 0 "" 2
 1294              		.thumb
 1295              		.syntax unified
 1296              	.L71:
1366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1297              		.loc 1 1371 2
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 51


 1298 0058 00BF     		nop
 1299 005a 1037     		adds	r7, r7, #16
 1300              	.LCFI33:
 1301              		.cfi_def_cfa_offset 8
 1302 005c BD46     		mov	sp, r7
 1303              	.LCFI34:
 1304              		.cfi_def_cfa_register 13
 1305              		@ sp needed
 1306 005e 80BD     		pop	{r7, pc}
 1307              	.L73:
 1308              		.align	2
 1309              	.L72:
 1310 0060 00000000 		.word	uxSchedulerSuspended
 1311 0064 04ED00E0 		.word	-536810236
 1312              		.cfi_endproc
 1313              	.LFE10:
 1315              		.section	.text.eTaskGetState,"ax",%progbits
 1316              		.align	1
 1317              		.global	eTaskGetState
 1318              		.syntax unified
 1319              		.thumb
 1320              		.thumb_func
 1322              	eTaskGetState:
 1323              	.LFB11:
1372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDel
1377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
1379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1324              		.loc 1 1379 2
 1325              		.cfi_startproc
 1326              		@ args = 0, pretend = 0, frame = 32
 1327              		@ frame_needed = 1, uses_anonymous_args = 0
 1328 0000 80B5     		push	{r7, lr}
 1329              	.LCFI35:
 1330              		.cfi_def_cfa_offset 8
 1331              		.cfi_offset 7, -8
 1332              		.cfi_offset 14, -4
 1333 0002 88B0     		sub	sp, sp, #32
 1334              	.LCFI36:
 1335              		.cfi_def_cfa_offset 40
 1336 0004 00AF     		add	r7, sp, #0
 1337              	.LCFI37:
 1338              		.cfi_def_cfa_register 7
 1339 0006 7860     		str	r0, [r7, #4]
1380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eReturn;
1381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
1382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = xTask;
 1340              		.loc 1 1382 22
 1341 0008 7B68     		ldr	r3, [r7, #4]
 1342 000a BB61     		str	r3, [r7, #24]
1383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
 1343              		.loc 1 1384 3
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 52


 1344 000c BB69     		ldr	r3, [r7, #24]
 1345 000e 002B     		cmp	r3, #0
 1346 0010 0AD1     		bne	.L75
 1347              	.LBB140:
 1348              	.LBB141:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1349              		.loc 2 195 2
 1350              		.syntax unified
 1351              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1352 0012 4FF05003 			mov r3, #80												
 1353 0016 83F31188 		msr basepri, r3											
 1354 001a BFF36F8F 		isb														
 1355 001e BFF34F8F 		dsb														
 1356              	
 1357              	@ 0 "" 2
 1358              		.thumb
 1359              		.syntax unified
 1360 0022 BB60     		str	r3, [r7, #8]
 1361              		.loc 2 203 1
 1362 0024 00BF     		nop
 1363              	.L76:
 1364              	.LBE141:
 1365              	.LBE140:
 1366              		.loc 1 1384 3 discriminator 1
 1367 0026 FEE7     		b	.L76
 1368              	.L75:
1385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
 1369              		.loc 1 1386 13
 1370 0028 234B     		ldr	r3, .L87
 1371 002a 1B68     		ldr	r3, [r3]
 1372              		.loc 1 1386 5
 1373 002c BA69     		ldr	r2, [r7, #24]
 1374 002e 9A42     		cmp	r2, r3
 1375 0030 02D1     		bne	.L77
1387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task calling this function is querying its own state. */
1389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eRunning;
 1376              		.loc 1 1389 12
 1377 0032 0023     		movs	r3, #0
 1378 0034 FB77     		strb	r3, [r7, #31]
 1379 0036 3AE0     		b	.L78
 1380              	.L77:
1390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
 1381              		.loc 1 1393 4
 1382 0038 FFF7FEFF 		bl	vPortEnterCritical
1394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 1383              		.loc 1 1395 17
 1384 003c BB69     		ldr	r3, [r7, #24]
 1385 003e 5B69     		ldr	r3, [r3, #20]
 1386 0040 7B61     		str	r3, [r7, #20]
1396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxDelayedList = pxDelayedTaskList;
 1387              		.loc 1 1396 19
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 53


 1388 0042 1E4B     		ldr	r3, .L87+4
 1389 0044 1B68     		ldr	r3, [r3]
 1390 0046 3B61     		str	r3, [r7, #16]
1397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 1391              		.loc 1 1397 29
 1392 0048 1D4B     		ldr	r3, .L87+8
 1393 004a 1B68     		ldr	r3, [r3]
 1394 004c FB60     		str	r3, [r7, #12]
1398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
 1395              		.loc 1 1399 4
 1396 004e FFF7FEFF 		bl	vPortExitCritical
1400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 1397              		.loc 1 1401 6
 1398 0052 7A69     		ldr	r2, [r7, #20]
 1399 0054 3B69     		ldr	r3, [r7, #16]
 1400 0056 9A42     		cmp	r2, r3
 1401 0058 03D0     		beq	.L79
 1402              		.loc 1 1401 41 discriminator 1
 1403 005a 7A69     		ldr	r2, [r7, #20]
 1404 005c FB68     		ldr	r3, [r7, #12]
 1405 005e 9A42     		cmp	r2, r3
 1406 0060 02D1     		bne	.L80
 1407              	.L79:
1402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lists. */
1405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eBlocked;
 1408              		.loc 1 1405 13
 1409 0062 0223     		movs	r3, #2
 1410 0064 FB77     		strb	r3, [r7, #31]
 1411 0066 22E0     		b	.L78
 1412              	.L80:
1406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
 1413              		.loc 1 1409 12
 1414 0068 7B69     		ldr	r3, [r7, #20]
 1415 006a 164A     		ldr	r2, .L87+12
 1416 006c 9342     		cmp	r3, r2
 1417 006e 12D1     		bne	.L81
1410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the suspended
1412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list.  Is it genuinely suspended or is it blocked
1413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					indefinitely? */
1414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 1418              		.loc 1 1414 10
 1419 0070 BB69     		ldr	r3, [r7, #24]
 1420 0072 9B6A     		ldr	r3, [r3, #40]
 1421              		.loc 1 1414 8
 1422 0074 002B     		cmp	r3, #0
 1423 0076 0BD1     		bne	.L82
1415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#if( configUSE_TASK_NOTIFICATIONS == 1 )
1417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 54


1418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* The task does not appear on the event list item of
1419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							and of the RTOS objects, but could still be in the
1420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							blocked state if it is waiting on its notification
1421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							rather than waiting on an object. */
1422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 1424              		.loc 1 1422 17
 1425 0078 BB69     		ldr	r3, [r7, #24]
 1426 007a 93F85830 		ldrb	r3, [r3, #88]
 1427 007e DBB2     		uxtb	r3, r3
 1428              		.loc 1 1422 10
 1429 0080 012B     		cmp	r3, #1
 1430 0082 02D1     		bne	.L83
1423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
1424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								eReturn = eBlocked;
 1431              		.loc 1 1424 17
 1432 0084 0223     		movs	r3, #2
 1433 0086 FB77     		strb	r3, [r7, #31]
 1434 0088 11E0     		b	.L78
 1435              	.L83:
1425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
1426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							else
1427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
1428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								eReturn = eSuspended;
 1436              		.loc 1 1428 17
 1437 008a 0323     		movs	r3, #3
 1438 008c FB77     		strb	r3, [r7, #31]
 1439 008e 0EE0     		b	.L78
 1440              	.L82:
1429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
1430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
1432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							eReturn = eSuspended;
1434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
1436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						eReturn = eBlocked;
 1441              		.loc 1 1439 15
 1442 0090 0223     		movs	r3, #2
 1443 0092 FB77     		strb	r3, [r7, #31]
 1444 0094 0BE0     		b	.L78
 1445              	.L81:
1440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 1446              		.loc 1 1445 12
 1447 0096 7B69     		ldr	r3, [r7, #20]
 1448 0098 0B4A     		ldr	r2, .L87+16
 1449 009a 9342     		cmp	r3, r2
 1450 009c 02D0     		beq	.L84
 1451              		.loc 1 1445 59 discriminator 1
 1452 009e 7B69     		ldr	r3, [r7, #20]
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 55


 1453 00a0 002B     		cmp	r3, #0
 1454 00a2 02D1     		bne	.L85
 1455              	.L84:
1446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the deleted
1448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tasks list, or it is not referenced from any lists at
1449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					all. */
1450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					eReturn = eDeleted;
 1456              		.loc 1 1450 14
 1457 00a4 0423     		movs	r3, #4
 1458 00a6 FB77     		strb	r3, [r7, #31]
 1459 00a8 01E0     		b	.L78
 1460              	.L85:
1451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is not in any other state, it must be in the
1457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Ready (including pending ready) state. */
1458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eReady;
 1461              		.loc 1 1458 13
 1462 00aa 0123     		movs	r3, #1
 1463 00ac FB77     		strb	r3, [r7, #31]
 1464              	.L78:
1459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
 1465              		.loc 1 1462 10
 1466 00ae FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
1463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 1467              		.loc 1 1463 2
 1468 00b0 1846     		mov	r0, r3
 1469 00b2 2037     		adds	r7, r7, #32
 1470              	.LCFI38:
 1471              		.cfi_def_cfa_offset 8
 1472 00b4 BD46     		mov	sp, r7
 1473              	.LCFI39:
 1474              		.cfi_def_cfa_register 13
 1475              		@ sp needed
 1476 00b6 80BD     		pop	{r7, pc}
 1477              	.L88:
 1478              		.align	2
 1479              	.L87:
 1480 00b8 00000000 		.word	pxCurrentTCB
 1481 00bc 00000000 		.word	pxDelayedTaskList
 1482 00c0 00000000 		.word	pxOverflowDelayedTaskList
 1483 00c4 00000000 		.word	xSuspendedTaskList
 1484 00c8 00000000 		.word	xTasksWaitingTermination
 1485              		.cfi_endproc
 1486              	.LFE11:
 1488              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 1489              		.align	1
 1490              		.global	uxTaskPriorityGet
 1491              		.syntax unified
 1492              		.thumb
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 56


 1493              		.thumb_func
 1495              	uxTaskPriorityGet:
 1496              	.LFB12:
1464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
1471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1497              		.loc 1 1471 2
 1498              		.cfi_startproc
 1499              		@ args = 0, pretend = 0, frame = 16
 1500              		@ frame_needed = 1, uses_anonymous_args = 0
 1501 0000 80B5     		push	{r7, lr}
 1502              	.LCFI40:
 1503              		.cfi_def_cfa_offset 8
 1504              		.cfi_offset 7, -8
 1505              		.cfi_offset 14, -4
 1506 0002 84B0     		sub	sp, sp, #16
 1507              	.LCFI41:
 1508              		.cfi_def_cfa_offset 24
 1509 0004 00AF     		add	r7, sp, #0
 1510              	.LCFI42:
 1511              		.cfi_def_cfa_register 7
 1512 0006 7860     		str	r0, [r7, #4]
1472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
1473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
1474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 1513              		.loc 1 1475 3
 1514 0008 FFF7FEFF 		bl	vPortEnterCritical
1476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the task
1478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			that called uxTaskPriorityGet() that is being queried. */
1479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 1515              		.loc 1 1479 12
 1516 000c 7B68     		ldr	r3, [r7, #4]
 1517 000e 002B     		cmp	r3, #0
 1518 0010 02D1     		bne	.L90
 1519              		.loc 1 1479 12 is_stmt 0 discriminator 1
 1520 0012 074B     		ldr	r3, .L93
 1521 0014 1B68     		ldr	r3, [r3]
 1522 0016 00E0     		b	.L91
 1523              	.L90:
 1524              		.loc 1 1479 12 discriminator 2
 1525 0018 7B68     		ldr	r3, [r7, #4]
 1526              	.L91:
 1527              		.loc 1 1479 10 is_stmt 1 discriminator 4
 1528 001a FB60     		str	r3, [r7, #12]
1480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1529              		.loc 1 1480 13 discriminator 4
 1530 001c FB68     		ldr	r3, [r7, #12]
 1531 001e DB6A     		ldr	r3, [r3, #44]
 1532 0020 BB60     		str	r3, [r7, #8]
1481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 57


1482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 1533              		.loc 1 1482 3 discriminator 4
 1534 0022 FFF7FEFF 		bl	vPortExitCritical
1483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
 1535              		.loc 1 1484 10 discriminator 4
 1536 0026 BB68     		ldr	r3, [r7, #8]
1485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1537              		.loc 1 1485 2 discriminator 4
 1538 0028 1846     		mov	r0, r3
 1539 002a 1037     		adds	r7, r7, #16
 1540              	.LCFI43:
 1541              		.cfi_def_cfa_offset 8
 1542 002c BD46     		mov	sp, r7
 1543              	.LCFI44:
 1544              		.cfi_def_cfa_register 13
 1545              		@ sp needed
 1546 002e 80BD     		pop	{r7, pc}
 1547              	.L94:
 1548              		.align	2
 1549              	.L93:
 1550 0030 00000000 		.word	pxCurrentTCB
 1551              		.cfi_endproc
 1552              	.LFE12:
 1554              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 1555              		.align	1
 1556              		.global	uxTaskPriorityGetFromISR
 1557              		.syntax unified
 1558              		.thumb
 1559              		.thumb_func
 1561              	uxTaskPriorityGetFromISR:
 1562              	.LFB13:
1486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask )
1493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1563              		.loc 1 1493 2
 1564              		.cfi_startproc
 1565              		@ args = 0, pretend = 0, frame = 32
 1566              		@ frame_needed = 1, uses_anonymous_args = 0
 1567 0000 80B5     		push	{r7, lr}
 1568              	.LCFI45:
 1569              		.cfi_def_cfa_offset 8
 1570              		.cfi_offset 7, -8
 1571              		.cfi_offset 14, -4
 1572 0002 88B0     		sub	sp, sp, #32
 1573              	.LCFI46:
 1574              		.cfi_def_cfa_offset 40
 1575 0004 00AF     		add	r7, sp, #0
 1576              	.LCFI47:
 1577              		.cfi_def_cfa_register 7
 1578 0006 7860     		str	r0, [r7, #4]
1494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 58


1495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
1513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 1579              		.loc 1 1513 3
 1580 0008 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1581              	.LBB142:
 1582              	.LBB143:
 204:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 206:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 207:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 208:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 209:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 210:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile
 1583              		.loc 2 211 2
 1584              		.syntax unified
 1585              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1586 000c EFF31182 			mrs r2, basepri											
 1587 0010 4FF05003 		mov r3, #80												
 1588 0014 83F31188 		msr basepri, r3											
 1589 0018 BFF36F8F 		isb														
 1590 001c BFF34F8F 		dsb														
 1591              	
 1592              	@ 0 "" 2
 1593              		.thumb
 1594              		.syntax unified
 1595 0020 3A61     		str	r2, [r7, #16]
 1596 0022 FB60     		str	r3, [r7, #12]
 212:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 213:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	mrs %0, basepri											\n" \
 214:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	mov %1, %2												\n" \
 215:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	msr basepri, %1											\n" \
 216:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	isb														\n" \
 217:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	dsb														\n" \
 218:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 219:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	);
 220:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 221:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 222:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	warnings. */
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	return ulOriginalBASEPRI;
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 59


 1597              		.loc 2 223 9
 1598 0024 3B69     		ldr	r3, [r7, #16]
 1599              	.LBE143:
 1600              	.LBE142:
1514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
 1601              		.loc 1 1515 27
 1602 0026 FB61     		str	r3, [r7, #28]
1516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being queried. */
1519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 1603              		.loc 1 1519 12
 1604 0028 7B68     		ldr	r3, [r7, #4]
 1605 002a 002B     		cmp	r3, #0
 1606 002c 02D1     		bne	.L97
 1607              		.loc 1 1519 12 is_stmt 0 discriminator 1
 1608 002e 094B     		ldr	r3, .L100
 1609 0030 1B68     		ldr	r3, [r3]
 1610 0032 00E0     		b	.L98
 1611              	.L97:
 1612              		.loc 1 1519 12 discriminator 2
 1613 0034 7B68     		ldr	r3, [r7, #4]
 1614              	.L98:
 1615              		.loc 1 1519 10 is_stmt 1 discriminator 4
 1616 0036 BB61     		str	r3, [r7, #24]
1520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1617              		.loc 1 1520 13 discriminator 4
 1618 0038 BB69     		ldr	r3, [r7, #24]
 1619 003a DB6A     		ldr	r3, [r3, #44]
 1620 003c 7B61     		str	r3, [r7, #20]
 1621 003e FB69     		ldr	r3, [r7, #28]
 1622 0040 BB60     		str	r3, [r7, #8]
 1623              	.LBB144:
 1624              	.LBB145:
 224:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** }
 225:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 226:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 227:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 228:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** {
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile
 1625              		.loc 2 229 2 discriminator 4
 1626 0042 BB68     		ldr	r3, [r7, #8]
 1627              		.syntax unified
 1628              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1629 0044 83F31188 			msr basepri, r3	
 1630              	@ 0 "" 2
 230:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 231:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
 232:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	);
 233:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** }
 1631              		.loc 2 233 1 discriminator 4
 1632              		.thumb
 1633              		.syntax unified
 1634 0048 00BF     		nop
 1635              	.LBE145:
 1636              	.LBE144:
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 60


1521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
 1637              		.loc 1 1524 10 discriminator 4
 1638 004a 7B69     		ldr	r3, [r7, #20]
1525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1639              		.loc 1 1525 2 discriminator 4
 1640 004c 1846     		mov	r0, r3
 1641 004e 2037     		adds	r7, r7, #32
 1642              	.LCFI48:
 1643              		.cfi_def_cfa_offset 8
 1644 0050 BD46     		mov	sp, r7
 1645              	.LCFI49:
 1646              		.cfi_def_cfa_register 13
 1647              		@ sp needed
 1648 0052 80BD     		pop	{r7, pc}
 1649              	.L101:
 1650              		.align	2
 1651              	.L100:
 1652 0054 00000000 		.word	pxCurrentTCB
 1653              		.cfi_endproc
 1654              	.LFE13:
 1656              		.section	.text.vTaskPrioritySet,"ax",%progbits
 1657              		.align	1
 1658              		.global	vTaskPrioritySet
 1659              		.syntax unified
 1660              		.thumb
 1661              		.thumb_func
 1663              	vTaskPrioritySet:
 1664              	.LFB14:
1526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
1533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1665              		.loc 1 1533 2
 1666              		.cfi_startproc
 1667              		@ args = 0, pretend = 0, frame = 32
 1668              		@ frame_needed = 1, uses_anonymous_args = 0
 1669 0000 80B5     		push	{r7, lr}
 1670              	.LCFI50:
 1671              		.cfi_def_cfa_offset 8
 1672              		.cfi_offset 7, -8
 1673              		.cfi_offset 14, -4
 1674 0002 88B0     		sub	sp, sp, #32
 1675              	.LCFI51:
 1676              		.cfi_def_cfa_offset 40
 1677 0004 00AF     		add	r7, sp, #0
 1678              	.LCFI52:
 1679              		.cfi_def_cfa_register 7
 1680 0006 7860     		str	r0, [r7, #4]
 1681 0008 3960     		str	r1, [r7]
1534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 61


1535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1682              		.loc 1 1536 13
 1683 000a 0023     		movs	r3, #0
 1684 000c FB61     		str	r3, [r7, #28]
1537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 1685              		.loc 1 1538 3
 1686 000e 3B68     		ldr	r3, [r7]
 1687 0010 372B     		cmp	r3, #55
 1688 0012 0AD9     		bls	.L103
 1689              	.LBB146:
 1690              	.LBB147:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1691              		.loc 2 195 2
 1692              		.syntax unified
 1693              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 1694 0014 4FF05003 			mov r3, #80												
 1695 0018 83F31188 		msr basepri, r3											
 1696 001c BFF36F8F 		isb														
 1697 0020 BFF34F8F 		dsb														
 1698              	
 1699              	@ 0 "" 2
 1700              		.thumb
 1701              		.syntax unified
 1702 0024 FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 1703              		.loc 2 203 1
 1704 0026 00BF     		nop
 1705              	.L104:
 1706              	.LBE147:
 1707              	.LBE146:
 1708              		.loc 1 1538 3 discriminator 1
 1709 0028 FEE7     		b	.L104
 1710              	.L103:
1539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Ensure the new priority is valid. */
1541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 1711              		.loc 1 1541 5
 1712 002a 3B68     		ldr	r3, [r7]
 1713 002c 372B     		cmp	r3, #55
 1714 002e 01D9     		bls	.L105
1542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 1715              		.loc 1 1543 18
 1716 0030 3723     		movs	r3, #55
 1717 0032 3B60     		str	r3, [r7]
 1718              	.L105:
1544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 1719              		.loc 1 1550 3
 1720 0034 FFF7FEFF 		bl	vPortEnterCritical
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 62


1551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being changed. */
1554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 1721              		.loc 1 1554 12
 1722 0038 7B68     		ldr	r3, [r7, #4]
 1723 003a 002B     		cmp	r3, #0
 1724 003c 02D1     		bne	.L106
 1725              		.loc 1 1554 12 is_stmt 0 discriminator 1
 1726 003e 3B4B     		ldr	r3, .L115
 1727 0040 1B68     		ldr	r3, [r3]
 1728 0042 00E0     		b	.L107
 1729              	.L106:
 1730              		.loc 1 1554 12 discriminator 2
 1731 0044 7B68     		ldr	r3, [r7, #4]
 1732              	.L107:
 1733              		.loc 1 1554 10 is_stmt 1 discriminator 4
 1734 0046 BB61     		str	r3, [r7, #24]
1555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
 1735              		.loc 1 1560 27 discriminator 4
 1736 0048 BB69     		ldr	r3, [r7, #24]
 1737 004a DB6C     		ldr	r3, [r3, #76]
 1738 004c 7B61     		str	r3, [r7, #20]
1561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
1563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
 1739              		.loc 1 1568 6 discriminator 4
 1740 004e 7A69     		ldr	r2, [r7, #20]
 1741 0050 3B68     		ldr	r3, [r7]
 1742 0052 9A42     		cmp	r2, r3
 1743 0054 63D0     		beq	.L108
1569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The priority change may have readied a task of higher
1571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority than the calling task. */
1572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
 1744              		.loc 1 1572 7
 1745 0056 3A68     		ldr	r2, [r7]
 1746 0058 7B69     		ldr	r3, [r7, #20]
 1747 005a 9A42     		cmp	r2, r3
 1748 005c 0DD9     		bls	.L109
1573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB != pxCurrentTCB )
 1749              		.loc 1 1574 16
 1750 005e 334B     		ldr	r3, .L115
 1751 0060 1B68     		ldr	r3, [r3]
 1752              		.loc 1 1574 8
 1753 0062 BA69     		ldr	r2, [r7, #24]
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 63


 1754 0064 9A42     		cmp	r2, r3
 1755 0066 0FD0     		beq	.L110
1575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of a task other than the currently
1577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						running task is being raised.  Is the priority being
1578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						raised above that of the running task? */
1579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 1756              		.loc 1 1579 40
 1757 0068 304B     		ldr	r3, .L115
 1758 006a 1B68     		ldr	r3, [r3]
 1759 006c DB6A     		ldr	r3, [r3, #44]
 1760              		.loc 1 1579 9
 1761 006e 3A68     		ldr	r2, [r7]
 1762 0070 9A42     		cmp	r2, r3
 1763 0072 09D3     		bcc	.L110
1580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xYieldRequired = pdTRUE;
 1764              		.loc 1 1581 23
 1765 0074 0123     		movs	r3, #1
 1766 0076 FB61     		str	r3, [r7, #28]
 1767 0078 06E0     		b	.L110
 1768              	.L109:
1582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
1584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of the running task is being raised,
1591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but the running task must already be the highest
1592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority task able to run so no yield is required. */
1593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
 1769              		.loc 1 1595 20
 1770 007a 2C4B     		ldr	r3, .L115
 1771 007c 1B68     		ldr	r3, [r3]
 1772              		.loc 1 1595 12
 1773 007e BA69     		ldr	r2, [r7, #24]
 1774 0080 9A42     		cmp	r2, r3
 1775 0082 01D1     		bne	.L110
1596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of the running task down means
1598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					there may now be another task of higher priority that
1599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is ready to execute. */
1600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldRequired = pdTRUE;
 1776              		.loc 1 1600 21
 1777 0084 0123     		movs	r3, #1
 1778 0086 FB61     		str	r3, [r7, #28]
 1779              	.L110:
1601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of any other task down does not
1605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					require a yield as the running task must be above the
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 64


1606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new priority of the task being modified. */
1607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remember the ready list the task might be referenced from
1610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				before its uxPriority member is changed so the
1611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 1780              		.loc 1 1612 27
 1781 0088 BB69     		ldr	r3, [r7, #24]
 1782 008a DB6A     		ldr	r3, [r3, #44]
 1783 008c 3B61     		str	r3, [r7, #16]
1613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Only change the priority being used if the task is not
1617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					currently using an inherited priority. */
1618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 1784              		.loc 1 1618 15
 1785 008e BB69     		ldr	r3, [r7, #24]
 1786 0090 DA6C     		ldr	r2, [r3, #76]
 1787              		.loc 1 1618 40
 1788 0092 BB69     		ldr	r3, [r7, #24]
 1789 0094 DB6A     		ldr	r3, [r3, #44]
 1790              		.loc 1 1618 8
 1791 0096 9A42     		cmp	r2, r3
 1792 0098 02D1     		bne	.L111
1619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
 1793              		.loc 1 1620 25
 1794 009a BB69     		ldr	r3, [r7, #24]
 1795 009c 3A68     		ldr	r2, [r7]
 1796 009e DA62     		str	r2, [r3, #44]
 1797              	.L111:
1621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The base priority gets set whatever. */
1628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
 1798              		.loc 1 1628 28
 1799 00a0 BB69     		ldr	r3, [r7, #24]
 1800 00a2 3A68     		ldr	r2, [r7]
 1801 00a4 DA64     		str	r2, [r3, #76]
1629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
1631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
1635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only reset the event list item value if the value is not
1637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				being used for anything else. */
1638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
 1802              		.loc 1 1638 11
 1803 00a6 BB69     		ldr	r3, [r7, #24]
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 65


 1804 00a8 9B69     		ldr	r3, [r3, #24]
 1805              		.loc 1 1638 7
 1806 00aa 002B     		cmp	r3, #0
 1807 00ac 04DB     		blt	.L112
1639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
 1808              		.loc 1 1640 6
 1809 00ae 3B68     		ldr	r3, [r7]
 1810 00b0 C3F13802 		rsb	r2, r3, #56
 1811 00b4 BB69     		ldr	r3, [r7, #24]
 1812 00b6 9A61     		str	r2, [r3, #24]
 1813              	.L112:
1641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing more than change its priority variable. However, if
1649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in the list appropriate to its new priority. */
1651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateL
 1814              		.loc 1 1651 9
 1815 00b8 BB69     		ldr	r3, [r7, #24]
 1816 00ba 5969     		ldr	r1, [r3, #20]
 1817 00bc 3A69     		ldr	r2, [r7, #16]
 1818 00be 1346     		mov	r3, r2
 1819 00c0 9B00     		lsls	r3, r3, #2
 1820 00c2 1344     		add	r3, r3, r2
 1821 00c4 9B00     		lsls	r3, r3, #2
 1822 00c6 1A4A     		ldr	r2, .L115+4
 1823 00c8 1344     		add	r3, r3, r2
 1824              		.loc 1 1651 7
 1825 00ca 9942     		cmp	r1, r3
 1826 00cc 1CD1     		bne	.L113
1652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is currently in its ready list - remove before
1654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					adding it to it's new ready list.  As we are in a critical
1655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section we can do this even if the scheduler is suspended. */
1656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1827              		.loc 1 1656 10
 1828 00ce BB69     		ldr	r3, [r7, #24]
 1829 00d0 0433     		adds	r3, r3, #4
 1830 00d2 1846     		mov	r0, r3
 1831 00d4 FFF7FEFF 		bl	uxListRemove
1657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is known that the task is in its ready list so
1659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						there is no need to check again and the port level
1660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						reset macro can be called directly. */
1661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
1662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 66


 1832              		.loc 1 1667 6
 1833 00d8 BB69     		ldr	r3, [r7, #24]
 1834 00da DA6A     		ldr	r2, [r3, #44]
 1835 00dc 154B     		ldr	r3, .L115+8
 1836 00de 1B68     		ldr	r3, [r3]
 1837 00e0 9A42     		cmp	r2, r3
 1838 00e2 03D9     		bls	.L114
 1839              		.loc 1 1667 6 is_stmt 0 discriminator 1
 1840 00e4 BB69     		ldr	r3, [r7, #24]
 1841 00e6 DB6A     		ldr	r3, [r3, #44]
 1842 00e8 124A     		ldr	r2, .L115+8
 1843 00ea 1360     		str	r3, [r2]
 1844              	.L114:
 1845              		.loc 1 1667 6 discriminator 3
 1846 00ec BB69     		ldr	r3, [r7, #24]
 1847 00ee DA6A     		ldr	r2, [r3, #44]
 1848 00f0 1346     		mov	r3, r2
 1849 00f2 9B00     		lsls	r3, r3, #2
 1850 00f4 1344     		add	r3, r3, r2
 1851 00f6 9B00     		lsls	r3, r3, #2
 1852 00f8 0D4A     		ldr	r2, .L115+4
 1853 00fa 1A44     		add	r2, r2, r3
 1854 00fc BB69     		ldr	r3, [r7, #24]
 1855 00fe 0433     		adds	r3, r3, #4
 1856 0100 1946     		mov	r1, r3
 1857 0102 1046     		mov	r0, r2
 1858 0104 FFF7FEFF 		bl	vListInsertEnd
 1859              	.L113:
1668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldRequired != pdFALSE )
 1860              		.loc 1 1674 7 is_stmt 1
 1861 0108 FB69     		ldr	r3, [r7, #28]
 1862 010a 002B     		cmp	r3, #0
 1863 010c 07D0     		beq	.L108
1675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 1864              		.loc 1 1676 6
 1865 010e 0A4B     		ldr	r3, .L115+12
 1866 0110 4FF08052 		mov	r2, #268435456
 1867 0114 1A60     		str	r2, [r3]
 1868              		.syntax unified
 1869              	@ 1676 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1870 0116 BFF34F8F 		dsb
 1871              	@ 0 "" 2
 1872              	@ 1676 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1873 011a BFF36F8F 		isb
 1874              	@ 0 "" 2
 1875              		.thumb
 1876              		.syntax unified
 1877              	.L108:
1677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 67


1679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				optimised task selection is not being used. */
1685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 1878              		.loc 1 1688 3
 1879 011e FFF7FEFF 		bl	vPortExitCritical
1689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1880              		.loc 1 1689 2
 1881 0122 00BF     		nop
 1882 0124 2037     		adds	r7, r7, #32
 1883              	.LCFI53:
 1884              		.cfi_def_cfa_offset 8
 1885 0126 BD46     		mov	sp, r7
 1886              	.LCFI54:
 1887              		.cfi_def_cfa_register 13
 1888              		@ sp needed
 1889 0128 80BD     		pop	{r7, pc}
 1890              	.L116:
 1891 012a 00BF     		.align	2
 1892              	.L115:
 1893 012c 00000000 		.word	pxCurrentTCB
 1894 0130 00000000 		.word	pxReadyTasksLists
 1895 0134 00000000 		.word	uxTopReadyPriority
 1896 0138 04ED00E0 		.word	-536810236
 1897              		.cfi_endproc
 1898              	.LFE14:
 1900              		.section	.text.vTaskSuspend,"ax",%progbits
 1901              		.align	1
 1902              		.global	vTaskSuspend
 1903              		.syntax unified
 1904              		.thumb
 1905              		.thumb_func
 1907              	vTaskSuspend:
 1908              	.LFB15:
1690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1909              		.loc 1 1697 2
 1910              		.cfi_startproc
 1911              		@ args = 0, pretend = 0, frame = 16
 1912              		@ frame_needed = 1, uses_anonymous_args = 0
 1913 0000 80B5     		push	{r7, lr}
 1914              	.LCFI55:
 1915              		.cfi_def_cfa_offset 8
 1916              		.cfi_offset 7, -8
 1917              		.cfi_offset 14, -4
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 68


 1918 0002 84B0     		sub	sp, sp, #16
 1919              	.LCFI56:
 1920              		.cfi_def_cfa_offset 24
 1921 0004 00AF     		add	r7, sp, #0
 1922              	.LCFI57:
 1923              		.cfi_def_cfa_register 7
 1924 0006 7860     		str	r0, [r7, #4]
1698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 1925              		.loc 1 1700 3
 1926 0008 FFF7FEFF 		bl	vPortEnterCritical
1701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the running task that is
1703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being suspended. */
1704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 1927              		.loc 1 1704 12
 1928 000c 7B68     		ldr	r3, [r7, #4]
 1929 000e 002B     		cmp	r3, #0
 1930 0010 02D1     		bne	.L118
 1931              		.loc 1 1704 12 is_stmt 0 discriminator 1
 1932 0012 304B     		ldr	r3, .L129
 1933 0014 1B68     		ldr	r3, [r3]
 1934 0016 00E0     		b	.L119
 1935              	.L118:
 1936              		.loc 1 1704 12 discriminator 2
 1937 0018 7B68     		ldr	r3, [r7, #4]
 1938              	.L119:
 1939              		.loc 1 1704 10 is_stmt 1 discriminator 4
 1940 001a FB60     		str	r3, [r7, #12]
1705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			suspended list. */
1710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1941              		.loc 1 1710 8 discriminator 4
 1942 001c FB68     		ldr	r3, [r7, #12]
 1943 001e 0433     		adds	r3, r3, #4
 1944 0020 1846     		mov	r0, r3
 1945 0022 FFF7FEFF 		bl	uxListRemove
1711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 1946              		.loc 1 1720 8 discriminator 4
 1947 0026 FB68     		ldr	r3, [r7, #12]
 1948 0028 9B6A     		ldr	r3, [r3, #40]
 1949              		.loc 1 1720 6 discriminator 4
 1950 002a 002B     		cmp	r3, #0
 1951 002c 04D0     		beq	.L120
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 69


1721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 1952              		.loc 1 1722 14
 1953 002e FB68     		ldr	r3, [r7, #12]
 1954 0030 1833     		adds	r3, r3, #24
 1955 0032 1846     		mov	r0, r3
 1956 0034 FFF7FEFF 		bl	uxListRemove
 1957              	.L120:
1723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 1958              		.loc 1 1729 4
 1959 0038 FB68     		ldr	r3, [r7, #12]
 1960 003a 0433     		adds	r3, r3, #4
 1961 003c 1946     		mov	r1, r3
 1962 003e 2648     		ldr	r0, .L129+4
 1963 0040 FFF7FEFF 		bl	vListInsertEnd
1730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( configUSE_TASK_NOTIFICATIONS == 1 )
1732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 1964              		.loc 1 1733 14
 1965 0044 FB68     		ldr	r3, [r7, #12]
 1966 0046 93F85830 		ldrb	r3, [r3, #88]
 1967 004a DBB2     		uxtb	r3, r3
 1968              		.loc 1 1733 7
 1969 004c 012B     		cmp	r3, #1
 1970 004e 03D1     		bne	.L121
1734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task was blocked to wait for a notification, but is
1736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					now suspended, so no notification was received. */
1737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 1971              		.loc 1 1737 27
 1972 0050 FB68     		ldr	r3, [r7, #12]
 1973 0052 0022     		movs	r2, #0
 1974 0054 83F85820 		strb	r2, [r3, #88]
 1975              	.L121:
1738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 1976              		.loc 1 1742 3
 1977 0058 FFF7FEFF 		bl	vPortExitCritical
1743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 1978              		.loc 1 1744 25
 1979 005c 1F4B     		ldr	r3, .L129+8
 1980 005e 1B68     		ldr	r3, [r3]
 1981              		.loc 1 1744 5
 1982 0060 002B     		cmp	r3, #0
 1983 0062 05D0     		beq	.L122
1745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 70


1746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Reset the next expected unblock time in case it referred to the
1747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is now in the Suspended state. */
1748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
 1984              		.loc 1 1748 4
 1985 0064 FFF7FEFF 		bl	vPortEnterCritical
1749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
 1986              		.loc 1 1750 5
 1987 0068 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
1751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
 1988              		.loc 1 1752 4
 1989 006c FFF7FEFF 		bl	vPortExitCritical
 1990              	.L122:
1753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
 1991              		.loc 1 1759 13
 1992 0070 184B     		ldr	r3, .L129
 1993 0072 1B68     		ldr	r3, [r3]
 1994              		.loc 1 1759 5
 1995 0074 FA68     		ldr	r2, [r7, #12]
 1996 0076 9A42     		cmp	r2, r3
 1997 0078 27D1     		bne	.L128
1760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
 1998              		.loc 1 1761 26
 1999 007a 184B     		ldr	r3, .L129+8
 2000 007c 1B68     		ldr	r3, [r3]
 2001              		.loc 1 1761 6
 2002 007e 002B     		cmp	r3, #0
 2003 0080 17D0     		beq	.L124
1762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The current task has just been suspended. */
1764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
 2004              		.loc 1 1764 5
 2005 0082 174B     		ldr	r3, .L129+12
 2006 0084 1B68     		ldr	r3, [r3]
 2007 0086 002B     		cmp	r3, #0
 2008 0088 0AD0     		beq	.L125
 2009              	.LBB148:
 2010              	.LBB149:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2011              		.loc 2 195 2
 2012              		.syntax unified
 2013              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2014 008a 4FF05003 			mov r3, #80												
 2015 008e 83F31188 		msr basepri, r3											
 2016 0092 BFF36F8F 		isb														
 2017 0096 BFF34F8F 		dsb														
 2018              	
 2019              	@ 0 "" 2
 2020              		.thumb
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 71


 2021              		.syntax unified
 2022 009a BB60     		str	r3, [r7, #8]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 2023              		.loc 2 203 1
 2024 009c 00BF     		nop
 2025              	.L126:
 2026              	.LBE149:
 2027              	.LBE148:
 2028              		.loc 1 1764 5 discriminator 1
 2029 009e FEE7     		b	.L126
 2030              	.L125:
1765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 2031              		.loc 1 1765 5
 2032 00a0 104B     		ldr	r3, .L129+16
 2033 00a2 4FF08052 		mov	r2, #268435456
 2034 00a6 1A60     		str	r2, [r3]
 2035              		.syntax unified
 2036              	@ 1765 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2037 00a8 BFF34F8F 		dsb
 2038              	@ 0 "" 2
 2039              	@ 1765 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2040 00ac BFF36F8F 		isb
 2041              	@ 0 "" 2
1766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be adjusted to point to a different task. */
1772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Rig
1773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be set to point to it no matter what its relative priority
1777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is. */
1778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = NULL;
1779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vTaskSwitchContext();
1783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2042              		.loc 1 1790 2
 2043              		.thumb
 2044              		.syntax unified
 2045 00b0 0BE0     		b	.L128
 2046              	.L124:
1772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2047              		.loc 1 1772 9
 2048 00b2 094B     		ldr	r3, .L129+4
 2049 00b4 1A68     		ldr	r2, [r3]
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 72


1772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2050              		.loc 1 1772 56
 2051 00b6 0C4B     		ldr	r3, .L129+20
 2052 00b8 1B68     		ldr	r3, [r3]
1772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2053              		.loc 1 1772 7
 2054 00ba 9A42     		cmp	r2, r3
 2055 00bc 03D1     		bne	.L127
1778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2056              		.loc 1 1778 19
 2057 00be 054B     		ldr	r3, .L129
 2058 00c0 0022     		movs	r2, #0
 2059 00c2 1A60     		str	r2, [r3]
 2060              		.loc 1 1790 2
 2061 00c4 01E0     		b	.L128
 2062              	.L127:
1782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2063              		.loc 1 1782 6
 2064 00c6 FFF7FEFF 		bl	vTaskSwitchContext
 2065              	.L128:
 2066              		.loc 1 1790 2
 2067 00ca 00BF     		nop
 2068 00cc 1037     		adds	r7, r7, #16
 2069              	.LCFI58:
 2070              		.cfi_def_cfa_offset 8
 2071 00ce BD46     		mov	sp, r7
 2072              	.LCFI59:
 2073              		.cfi_def_cfa_register 13
 2074              		@ sp needed
 2075 00d0 80BD     		pop	{r7, pc}
 2076              	.L130:
 2077 00d2 00BF     		.align	2
 2078              	.L129:
 2079 00d4 00000000 		.word	pxCurrentTCB
 2080 00d8 00000000 		.word	xSuspendedTaskList
 2081 00dc 00000000 		.word	xSchedulerRunning
 2082 00e0 00000000 		.word	uxSchedulerSuspended
 2083 00e4 04ED00E0 		.word	-536810236
 2084 00e8 00000000 		.word	uxCurrentNumberOfTasks
 2085              		.cfi_endproc
 2086              	.LFE15:
 2088              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
 2089              		.align	1
 2090              		.syntax unified
 2091              		.thumb
 2092              		.thumb_func
 2094              	prvTaskIsTaskSuspended:
 2095              	.LFB16:
1791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2096              		.loc 1 1798 2
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 73


 2097              		.cfi_startproc
 2098              		@ args = 0, pretend = 0, frame = 24
 2099              		@ frame_needed = 1, uses_anonymous_args = 0
 2100              		@ link register save eliminated.
 2101 0000 80B4     		push	{r7}
 2102              	.LCFI60:
 2103              		.cfi_def_cfa_offset 4
 2104              		.cfi_offset 7, -4
 2105 0002 87B0     		sub	sp, sp, #28
 2106              	.LCFI61:
 2107              		.cfi_def_cfa_offset 32
 2108 0004 00AF     		add	r7, sp, #0
 2109              	.LCFI62:
 2110              		.cfi_def_cfa_register 7
 2111 0006 7860     		str	r0, [r7, #4]
1799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 2112              		.loc 1 1799 13
 2113 0008 0023     		movs	r3, #0
 2114 000a 7B61     		str	r3, [r7, #20]
1800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = xTask;
 2115              		.loc 1 1800 22
 2116 000c 7B68     		ldr	r3, [r7, #4]
 2117 000e 3B61     		str	r3, [r7, #16]
1801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		section. */
1804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTask );
 2118              		.loc 1 1806 3
 2119 0010 7B68     		ldr	r3, [r7, #4]
 2120 0012 002B     		cmp	r3, #0
 2121 0014 0AD1     		bne	.L132
 2122              	.LBB150:
 2123              	.LBB151:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2124              		.loc 2 195 2
 2125              		.syntax unified
 2126              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2127 0016 4FF05003 			mov r3, #80												
 2128 001a 83F31188 		msr basepri, r3											
 2129 001e BFF36F8F 		isb														
 2130 0022 BFF34F8F 		dsb														
 2131              	
 2132              	@ 0 "" 2
 2133              		.thumb
 2134              		.syntax unified
 2135 0026 FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 2136              		.loc 2 203 1
 2137 0028 00BF     		nop
 2138              	.L133:
 2139              	.LBE151:
 2140              	.LBE150:
 2141              		.loc 1 1806 3 discriminator 1
 2142 002a FEE7     		b	.L133
 2143              	.L132:
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 74


1807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 2144              		.loc 1 1809 7
 2145 002c 3B69     		ldr	r3, [r7, #16]
 2146 002e 5B69     		ldr	r3, [r3, #20]
 2147              		.loc 1 1809 5
 2148 0030 094A     		ldr	r2, .L136
 2149 0032 9342     		cmp	r3, r2
 2150 0034 0AD1     		bne	.L134
1810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 2151              		.loc 1 1812 8
 2152 0036 3B69     		ldr	r3, [r7, #16]
 2153 0038 9B6A     		ldr	r3, [r3, #40]
 2154              		.loc 1 1812 6
 2155 003a 084A     		ldr	r2, .L136+4
 2156 003c 9342     		cmp	r3, r2
 2157 003e 05D0     		beq	.L134
1813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				state, or because is is blocked with no timeout? */
1816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The
 2158              		.loc 1 1816 9
 2159 0040 3B69     		ldr	r3, [r7, #16]
 2160 0042 9B6A     		ldr	r3, [r3, #40]
 2161              		.loc 1 1816 7
 2162 0044 002B     		cmp	r3, #0
 2163 0046 01D1     		bne	.L134
1817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
 2164              		.loc 1 1818 14
 2165 0048 0123     		movs	r3, #1
 2166 004a 7B61     		str	r3, [r7, #20]
 2167              	.L134:
1819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 2168              		.loc 1 1835 10
 2169 004c 7B69     		ldr	r3, [r7, #20]
1836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 2170              		.loc 1 1836 2
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 75


 2171 004e 1846     		mov	r0, r3
 2172 0050 1C37     		adds	r7, r7, #28
 2173              	.LCFI63:
 2174              		.cfi_def_cfa_offset 4
 2175 0052 BD46     		mov	sp, r7
 2176              	.LCFI64:
 2177              		.cfi_def_cfa_register 13
 2178              		@ sp needed
 2179 0054 80BC     		pop	{r7}
 2180              	.LCFI65:
 2181              		.cfi_restore 7
 2182              		.cfi_def_cfa_offset 0
 2183 0056 7047     		bx	lr
 2184              	.L137:
 2185              		.align	2
 2186              	.L136:
 2187 0058 00000000 		.word	xSuspendedTaskList
 2188 005c 00000000 		.word	xPendingReadyList
 2189              		.cfi_endproc
 2190              	.LFE16:
 2192              		.section	.text.vTaskResume,"ax",%progbits
 2193              		.align	1
 2194              		.global	vTaskResume
 2195              		.syntax unified
 2196              		.thumb
 2197              		.thumb_func
 2199              	vTaskResume:
 2200              	.LFB17:
1837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2201              		.loc 1 1844 2
 2202              		.cfi_startproc
 2203              		@ args = 0, pretend = 0, frame = 16
 2204              		@ frame_needed = 1, uses_anonymous_args = 0
 2205 0000 80B5     		push	{r7, lr}
 2206              	.LCFI66:
 2207              		.cfi_def_cfa_offset 8
 2208              		.cfi_offset 7, -8
 2209              		.cfi_offset 14, -4
 2210 0002 84B0     		sub	sp, sp, #16
 2211              	.LCFI67:
 2212              		.cfi_def_cfa_offset 24
 2213 0004 00AF     		add	r7, sp, #0
 2214              	.LCFI68:
 2215              		.cfi_def_cfa_register 7
 2216 0006 7860     		str	r0, [r7, #4]
1845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 2217              		.loc 1 1845 16
 2218 0008 7B68     		ldr	r3, [r7, #4]
 2219 000a FB60     		str	r3, [r7, #12]
1846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 76


1847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to resume the calling task. */
1848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
 2220              		.loc 1 1848 3
 2221 000c 7B68     		ldr	r3, [r7, #4]
 2222 000e 002B     		cmp	r3, #0
 2223 0010 0AD1     		bne	.L139
 2224              	.LBB152:
 2225              	.LBB153:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2226              		.loc 2 195 2
 2227              		.syntax unified
 2228              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2229 0012 4FF05003 			mov r3, #80												
 2230 0016 83F31188 		msr basepri, r3											
 2231 001a BFF36F8F 		isb														
 2232 001e BFF34F8F 		dsb														
 2233              	
 2234              	@ 0 "" 2
 2235              		.thumb
 2236              		.syntax unified
 2237 0022 BB60     		str	r3, [r7, #8]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 2238              		.loc 2 203 1
 2239 0024 00BF     		nop
 2240              	.L140:
 2241              	.LBE153:
 2242              	.LBE152:
 2243              		.loc 1 1848 3 discriminator 1
 2244 0026 FEE7     		b	.L140
 2245              	.L139:
1849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		currently executing task. */
1852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 2246              		.loc 1 1852 15
 2247 0028 204B     		ldr	r3, .L145
 2248 002a 1B68     		ldr	r3, [r3]
 2249              		.loc 1 1852 5
 2250 002c FA68     		ldr	r2, [r7, #12]
 2251 002e 9A42     		cmp	r2, r3
 2252 0030 38D0     		beq	.L144
 2253              		.loc 1 1852 33 discriminator 1
 2254 0032 FB68     		ldr	r3, [r7, #12]
 2255 0034 002B     		cmp	r3, #0
 2256 0036 35D0     		beq	.L144
1853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
 2257              		.loc 1 1854 4
 2258 0038 FFF7FEFF 		bl	vPortEnterCritical
1855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 2259              		.loc 1 1856 9
 2260 003c F868     		ldr	r0, [r7, #12]
 2261 003e FFF7FEFF 		bl	prvTaskIsTaskSuspended
 2262 0042 0346     		mov	r3, r0
 2263              		.loc 1 1856 7
 2264 0044 002B     		cmp	r3, #0
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 77


 2265 0046 2BD0     		beq	.L142
1857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_RESUME( pxTCB );
1859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The ready list can be accessed even if the scheduler is
1861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					suspended because this is inside a critical section. */
1862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 2266              		.loc 1 1862 15
 2267 0048 FB68     		ldr	r3, [r7, #12]
 2268 004a 0433     		adds	r3, r3, #4
 2269 004c 1846     		mov	r0, r3
 2270 004e FFF7FEFF 		bl	uxListRemove
1863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2271              		.loc 1 1863 6
 2272 0052 FB68     		ldr	r3, [r7, #12]
 2273 0054 DA6A     		ldr	r2, [r3, #44]
 2274 0056 164B     		ldr	r3, .L145+4
 2275 0058 1B68     		ldr	r3, [r3]
 2276 005a 9A42     		cmp	r2, r3
 2277 005c 03D9     		bls	.L143
 2278              		.loc 1 1863 6 is_stmt 0 discriminator 1
 2279 005e FB68     		ldr	r3, [r7, #12]
 2280 0060 DB6A     		ldr	r3, [r3, #44]
 2281 0062 134A     		ldr	r2, .L145+4
 2282 0064 1360     		str	r3, [r2]
 2283              	.L143:
 2284              		.loc 1 1863 6 discriminator 3
 2285 0066 FB68     		ldr	r3, [r7, #12]
 2286 0068 DA6A     		ldr	r2, [r3, #44]
 2287 006a 1346     		mov	r3, r2
 2288 006c 9B00     		lsls	r3, r3, #2
 2289 006e 1344     		add	r3, r3, r2
 2290 0070 9B00     		lsls	r3, r3, #2
 2291 0072 104A     		ldr	r2, .L145+8
 2292 0074 1A44     		add	r2, r2, r3
 2293 0076 FB68     		ldr	r3, [r7, #12]
 2294 0078 0433     		adds	r3, r3, #4
 2295 007a 1946     		mov	r1, r3
 2296 007c 1046     		mov	r0, r2
 2297 007e FFF7FEFF 		bl	vListInsertEnd
1864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A higher priority task may have just been resumed. */
1866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2298              		.loc 1 1866 15 is_stmt 1 discriminator 3
 2299 0082 FB68     		ldr	r3, [r7, #12]
 2300 0084 DA6A     		ldr	r2, [r3, #44]
 2301              		.loc 1 1866 43 discriminator 3
 2302 0086 094B     		ldr	r3, .L145
 2303 0088 1B68     		ldr	r3, [r3]
 2304 008a DB6A     		ldr	r3, [r3, #44]
 2305              		.loc 1 1866 8 discriminator 3
 2306 008c 9A42     		cmp	r2, r3
 2307 008e 07D3     		bcc	.L142
1867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but will leave the lists in the correct state for the
1870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						next yield. */
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 78


1871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
 2308              		.loc 1 1871 7
 2309 0090 094B     		ldr	r3, .L145+12
 2310 0092 4FF08052 		mov	r2, #268435456
 2311 0096 1A60     		str	r2, [r3]
 2312              		.syntax unified
 2313              	@ 1871 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2314 0098 BFF34F8F 		dsb
 2315              	@ 0 "" 2
 2316              	@ 1871 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2317 009c BFF36F8F 		isb
 2318              	@ 0 "" 2
 2319              		.thumb
 2320              		.syntax unified
 2321              	.L142:
1872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
 2322              		.loc 1 1883 4
 2323 00a0 FFF7FEFF 		bl	vPortExitCritical
 2324              	.L144:
1884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2325              		.loc 1 1889 2
 2326 00a4 00BF     		nop
 2327 00a6 1037     		adds	r7, r7, #16
 2328              	.LCFI69:
 2329              		.cfi_def_cfa_offset 8
 2330 00a8 BD46     		mov	sp, r7
 2331              	.LCFI70:
 2332              		.cfi_def_cfa_register 13
 2333              		@ sp needed
 2334 00aa 80BD     		pop	{r7, pc}
 2335              	.L146:
 2336              		.align	2
 2337              	.L145:
 2338 00ac 00000000 		.word	pxCurrentTCB
 2339 00b0 00000000 		.word	uxTopReadyPriority
 2340 00b4 00000000 		.word	pxReadyTasksLists
 2341 00b8 04ED00E0 		.word	-536810236
 2342              		.cfi_endproc
 2343              	.LFE17:
 2345              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 2346              		.align	1
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 79


 2347              		.global	xTaskResumeFromISR
 2348              		.syntax unified
 2349              		.thumb
 2350              		.thumb_func
 2352              	xTaskResumeFromISR:
 2353              	.LFB18:
1890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2354              		.loc 1 1898 2
 2355              		.cfi_startproc
 2356              		@ args = 0, pretend = 0, frame = 40
 2357              		@ frame_needed = 1, uses_anonymous_args = 0
 2358 0000 80B5     		push	{r7, lr}
 2359              	.LCFI71:
 2360              		.cfi_def_cfa_offset 8
 2361              		.cfi_offset 7, -8
 2362              		.cfi_offset 14, -4
 2363 0002 8AB0     		sub	sp, sp, #40
 2364              	.LCFI72:
 2365              		.cfi_def_cfa_offset 48
 2366 0004 00AF     		add	r7, sp, #0
 2367              	.LCFI73:
 2368              		.cfi_def_cfa_register 7
 2369 0006 7860     		str	r0, [r7, #4]
1899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 2370              		.loc 1 1899 13
 2371 0008 0023     		movs	r3, #0
 2372 000a 7B62     		str	r3, [r7, #36]
1900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 2373              		.loc 1 1900 16
 2374 000c 7B68     		ldr	r3, [r7, #4]
 2375 000e 3B62     		str	r3, [r7, #32]
1901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
1902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
 2376              		.loc 1 1903 3
 2377 0010 7B68     		ldr	r3, [r7, #4]
 2378 0012 002B     		cmp	r3, #0
 2379 0014 0AD1     		bne	.L148
 2380              	.LBB154:
 2381              	.LBB155:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2382              		.loc 2 195 2
 2383              		.syntax unified
 2384              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2385 0016 4FF05003 			mov r3, #80												
 2386 001a 83F31188 		msr basepri, r3											
 2387 001e BFF36F8F 		isb														
 2388 0022 BFF34F8F 		dsb														
 2389              	
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 80


 2390              	@ 0 "" 2
 2391              		.thumb
 2392              		.syntax unified
 2393 0026 BB61     		str	r3, [r7, #24]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 2394              		.loc 2 203 1
 2395 0028 00BF     		nop
 2396              	.L149:
 2397              	.LBE155:
 2398              	.LBE154:
 2399              		.loc 1 1903 3 discriminator 1
 2400 002a FEE7     		b	.L149
 2401              	.L148:
1904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
1921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 2402              		.loc 1 1921 3
 2403 002c FFF7FEFF 		bl	vPortValidateInterruptPriority
 2404              	.LBB156:
 2405              	.LBB157:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2406              		.loc 2 211 2
 2407              		.syntax unified
 2408              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2409 0030 EFF31182 			mrs r2, basepri											
 2410 0034 4FF05003 		mov r3, #80												
 2411 0038 83F31188 		msr basepri, r3											
 2412 003c BFF36F8F 		isb														
 2413 0040 BFF34F8F 		dsb														
 2414              	
 2415              	@ 0 "" 2
 2416              		.thumb
 2417              		.syntax unified
 2418 0044 7A61     		str	r2, [r7, #20]
 2419 0046 3B61     		str	r3, [r7, #16]
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** }
 2420              		.loc 2 223 9
 2421 0048 7B69     		ldr	r3, [r7, #20]
 2422              	.LBE157:
 2423              	.LBE156:
1922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 81


 2424              		.loc 1 1923 28
 2425 004a FB61     		str	r3, [r7, #28]
1924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 2426              		.loc 1 1925 8
 2427 004c 386A     		ldr	r0, [r7, #32]
 2428 004e FFF7FEFF 		bl	prvTaskIsTaskSuspended
 2429 0052 0346     		mov	r3, r0
 2430              		.loc 1 1925 6
 2431 0054 002B     		cmp	r3, #0
 2432 0056 30D0     		beq	.L151
1926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check the ready lists can be accessed. */
1930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 2433              		.loc 1 1930 30
 2434 0058 1D4B     		ldr	r3, .L156
 2435 005a 1B68     		ldr	r3, [r3]
 2436              		.loc 1 1930 7
 2437 005c 002B     		cmp	r3, #0
 2438 005e 26D1     		bne	.L152
1931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					suspended list to the ready list directly. */
1934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2439              		.loc 1 1934 15
 2440 0060 3B6A     		ldr	r3, [r7, #32]
 2441 0062 DA6A     		ldr	r2, [r3, #44]
 2442              		.loc 1 1934 43
 2443 0064 1B4B     		ldr	r3, .L156+4
 2444 0066 1B68     		ldr	r3, [r3]
 2445 0068 DB6A     		ldr	r3, [r3, #44]
 2446              		.loc 1 1934 8
 2447 006a 9A42     		cmp	r2, r3
 2448 006c 01D3     		bcc	.L153
1935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldRequired = pdTRUE;
 2449              		.loc 1 1936 22
 2450 006e 0123     		movs	r3, #1
 2451 0070 7B62     		str	r3, [r7, #36]
 2452              	.L153:
1937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2453              		.loc 1 1943 15
 2454 0072 3B6A     		ldr	r3, [r7, #32]
 2455 0074 0433     		adds	r3, r3, #4
 2456 0076 1846     		mov	r0, r3
 2457 0078 FFF7FEFF 		bl	uxListRemove
1944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2458              		.loc 1 1944 6
 2459 007c 3B6A     		ldr	r3, [r7, #32]
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 82


 2460 007e DA6A     		ldr	r2, [r3, #44]
 2461 0080 154B     		ldr	r3, .L156+8
 2462 0082 1B68     		ldr	r3, [r3]
 2463 0084 9A42     		cmp	r2, r3
 2464 0086 03D9     		bls	.L154
 2465              		.loc 1 1944 6 is_stmt 0 discriminator 1
 2466 0088 3B6A     		ldr	r3, [r7, #32]
 2467 008a DB6A     		ldr	r3, [r3, #44]
 2468 008c 124A     		ldr	r2, .L156+8
 2469 008e 1360     		str	r3, [r2]
 2470              	.L154:
 2471              		.loc 1 1944 6 discriminator 3
 2472 0090 3B6A     		ldr	r3, [r7, #32]
 2473 0092 DA6A     		ldr	r2, [r3, #44]
 2474 0094 1346     		mov	r3, r2
 2475 0096 9B00     		lsls	r3, r3, #2
 2476 0098 1344     		add	r3, r3, r2
 2477 009a 9B00     		lsls	r3, r3, #2
 2478 009c 0F4A     		ldr	r2, .L156+12
 2479 009e 1A44     		add	r2, r2, r3
 2480 00a0 3B6A     		ldr	r3, [r7, #32]
 2481 00a2 0433     		adds	r3, r3, #4
 2482 00a4 1946     		mov	r1, r3
 2483 00a6 1046     		mov	r0, r2
 2484 00a8 FFF7FEFF 		bl	vListInsertEnd
 2485 00ac 05E0     		b	.L151
 2486              	.L152:
1945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is held in the pending ready list until the scheduler is
1950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unsuspended. */
1951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 2487              		.loc 1 1951 6 is_stmt 1
 2488 00ae 3B6A     		ldr	r3, [r7, #32]
 2489 00b0 1833     		adds	r3, r3, #24
 2490 00b2 1946     		mov	r1, r3
 2491 00b4 0A48     		ldr	r0, .L156+16
 2492 00b6 FFF7FEFF 		bl	vListInsertEnd
 2493              	.L151:
 2494 00ba FB69     		ldr	r3, [r7, #28]
 2495 00bc FB60     		str	r3, [r7, #12]
 2496              	.LBB158:
 2497              	.LBB159:
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2498              		.loc 2 229 2
 2499 00be FB68     		ldr	r3, [r7, #12]
 2500              		.syntax unified
 2501              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2502 00c0 83F31188 			msr basepri, r3	
 2503              	@ 0 "" 2
 2504              		.loc 2 233 1
 2505              		.thumb
 2506              		.syntax unified
 2507 00c4 00BF     		nop
 2508              	.LBE159:
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 83


 2509              	.LBE158:
1952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xYieldRequired;
 2510              		.loc 1 1961 10
 2511 00c6 7B6A     		ldr	r3, [r7, #36]
1962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2512              		.loc 1 1962 2
 2513 00c8 1846     		mov	r0, r3
 2514 00ca 2837     		adds	r7, r7, #40
 2515              	.LCFI74:
 2516              		.cfi_def_cfa_offset 8
 2517 00cc BD46     		mov	sp, r7
 2518              	.LCFI75:
 2519              		.cfi_def_cfa_register 13
 2520              		@ sp needed
 2521 00ce 80BD     		pop	{r7, pc}
 2522              	.L157:
 2523              		.align	2
 2524              	.L156:
 2525 00d0 00000000 		.word	uxSchedulerSuspended
 2526 00d4 00000000 		.word	pxCurrentTCB
 2527 00d8 00000000 		.word	uxTopReadyPriority
 2528 00dc 00000000 		.word	pxReadyTasksLists
 2529 00e0 00000000 		.word	xPendingReadyList
 2530              		.cfi_endproc
 2531              	.LFE18:
 2533              		.section	.rodata
 2534              		.align	2
 2535              	.LC0:
 2536 0000 49444C45 		.ascii	"IDLE\000"
 2536      00
 2537              		.section	.text.vTaskStartScheduler,"ax",%progbits
 2538              		.align	1
 2539              		.global	vTaskStartScheduler
 2540              		.syntax unified
 2541              		.thumb
 2542              		.thumb_func
 2544              	vTaskStartScheduler:
 2545              	.LFB19:
1963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskStartScheduler( void )
1968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2546              		.loc 1 1968 1
 2547              		.cfi_startproc
 2548              		@ args = 0, pretend = 0, frame = 24
 2549              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 84


 2550 0000 80B5     		push	{r7, lr}
 2551              	.LCFI76:
 2552              		.cfi_def_cfa_offset 8
 2553              		.cfi_offset 7, -8
 2554              		.cfi_offset 14, -4
 2555 0002 8AB0     		sub	sp, sp, #40
 2556              	.LCFI77:
 2557              		.cfi_def_cfa_offset 48
 2558 0004 04AF     		add	r7, sp, #16
 2559              	.LCFI78:
 2560              		.cfi_def_cfa 7, 32
 2561              	.LBB160:
1969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
1970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Add the idle task at the lowest priority. */
1972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
1973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 2562              		.loc 1 1974 17
 2563 0006 0023     		movs	r3, #0
 2564 0008 BB60     		str	r3, [r7, #8]
1975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
 2565              		.loc 1 1975 16
 2566 000a 0023     		movs	r3, #0
 2567 000c 7B60     		str	r3, [r7, #4]
1976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t ulIdleTaskStackSize;
1977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is created using user provided RAM - obtain the
1979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		address of the RAM then create the idle task. */
1980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize
 2568              		.loc 1 1980 3
 2569 000e 3A46     		mov	r2, r7
 2570 0010 391D     		adds	r1, r7, #4
 2571 0012 07F10803 		add	r3, r7, #8
 2572 0016 1846     		mov	r0, r3
 2573 0018 FFF7FEFF 		bl	vApplicationGetIdleTaskMemory
1981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 2574              		.loc 1 1981 21
 2575 001c 3968     		ldr	r1, [r7]
 2576 001e 7B68     		ldr	r3, [r7, #4]
 2577 0020 BA68     		ldr	r2, [r7, #8]
 2578 0022 0292     		str	r2, [sp, #8]
 2579 0024 0193     		str	r3, [sp, #4]
 2580 0026 0023     		movs	r3, #0
 2581 0028 0093     		str	r3, [sp]
 2582 002a 0023     		movs	r3, #0
 2583 002c 0A46     		mov	r2, r1
 2584 002e 2149     		ldr	r1, .L166
 2585 0030 2148     		ldr	r0, .L166+4
 2586 0032 FFF7FEFF 		bl	xTaskCreateStatic
 2587 0036 0346     		mov	r3, r0
 2588              		.loc 1 1981 19
 2589 0038 204A     		ldr	r2, .L166+8
 2590 003a 1360     		str	r3, [r2]
1982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												configIDLE_TASK_NAME,
1983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												ulIdleTaskStackSize,
1984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 85


1985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_P
1986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskStackBuffer,
1987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant
1988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIdleTaskHandle != NULL )
 2591              		.loc 1 1989 23
 2592 003c 1F4B     		ldr	r3, .L166+8
 2593 003e 1B68     		ldr	r3, [r3]
 2594              		.loc 1 1989 5
 2595 0040 002B     		cmp	r3, #0
 2596 0042 02D0     		beq	.L159
1990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 2597              		.loc 1 1991 12
 2598 0044 0123     		movs	r3, #1
 2599 0046 7B61     		str	r3, [r7, #20]
 2600 0048 01E0     		b	.L160
 2601              	.L159:
1992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
 2602              		.loc 1 1995 12
 2603 004a 0023     		movs	r3, #0
 2604 004c 7B61     		str	r3, [r7, #20]
 2605              	.L160:
 2606              	.LBE160:
1996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
1999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is being created using dynamically allocated RAM. */
2001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTaskCreate(	prvIdleTask,
2002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								configIDLE_TASK_NAME,
2003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								configMINIMAL_STACK_SIZE,
2004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								( void * ) NULL,
2005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIOR
2006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explic
2007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configSUPPORT_STATIC_ALLOCATION */
2009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
2011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xReturn == pdPASS )
 2607              		.loc 1 2012 5
 2608 004e 7B69     		ldr	r3, [r7, #20]
 2609 0050 012B     		cmp	r3, #1
 2610 0052 02D1     		bne	.L161
2013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTimerCreateTimerTask();
 2611              		.loc 1 2014 14
 2612 0054 FFF7FEFF 		bl	xTimerCreateTimerTask
 2613 0058 7861     		str	r0, [r7, #20]
 2614              	.L161:
2015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 86


2018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_TIMERS */
2022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xReturn == pdPASS )
 2615              		.loc 1 2023 4
 2616 005a 7B69     		ldr	r3, [r7, #20]
 2617 005c 012B     		cmp	r3, #1
 2618 005e 16D1     		bne	.L162
 2619              	.LBB161:
 2620              	.LBB162:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2621              		.loc 2 195 2
 2622              		.syntax unified
 2623              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2624 0060 4FF05003 			mov r3, #80												
 2625 0064 83F31188 		msr basepri, r3											
 2626 0068 BFF36F8F 		isb														
 2627 006c BFF34F8F 		dsb														
 2628              	
 2629              	@ 0 "" 2
 2630              		.thumb
 2631              		.syntax unified
 2632 0070 3B61     		str	r3, [r7, #16]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 2633              		.loc 2 203 1
 2634 0072 00BF     		nop
 2635              	.LBE162:
 2636              	.LBE161:
2024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* freertos_tasks_c_additions_init() should only be called if the user
2026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		definable macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is
2027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the only macro called by the function. */
2028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
2029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			freertos_tasks_c_additions_init();
2031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
2035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
2036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the created tasks contain a status word with interrupts switched on
2037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
2038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		starts to run. */
2039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
2040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to the task that will run first. */
2045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 2637              		.loc 1 2049 24
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 87


 2638 0074 124B     		ldr	r3, .L166+12
 2639 0076 4FF0FF32 		mov	r2, #-1
 2640 007a 1A60     		str	r2, [r3]
2050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
 2641              		.loc 1 2050 21
 2642 007c 114B     		ldr	r3, .L166+16
 2643 007e 0122     		movs	r2, #1
 2644 0080 1A60     		str	r2, [r3]
2051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 2645              		.loc 1 2051 14
 2646 0082 114B     		ldr	r3, .L166+20
 2647 0084 0022     		movs	r2, #0
 2648 0086 1A60     		str	r2, [r3]
2052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
2054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
2055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
2056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is set to 0 and the following line fails to build then ensure you do not
2057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
2058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		FreeRTOSConfig.h file. */
2059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
2060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
2062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
2064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portable interface. */
2065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
 2649              		.loc 1 2065 7
 2650 0088 FFF7FEFF 		bl	xPortStartScheduler
2066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should not reach here as if the scheduler is running the
2068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function will not return. */
2069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
2073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
2078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
2079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		or the timer task. */
2080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
2081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
2084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	meaning xIdleTaskHandle is not used anywhere else. */
2085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) xIdleTaskHandle;
2086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2651              		.loc 1 2086 1
 2652 008c 0EE0     		b	.L165
 2653              	.L162:
2080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2654              		.loc 1 2080 3
 2655 008e 7B69     		ldr	r3, [r7, #20]
 2656 0090 B3F1FF3F 		cmp	r3, #-1
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 88


 2657 0094 0AD1     		bne	.L165
 2658              	.LBB163:
 2659              	.LBB164:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2660              		.loc 2 195 2
 2661              		.syntax unified
 2662              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2663 0096 4FF05003 			mov r3, #80												
 2664 009a 83F31188 		msr basepri, r3											
 2665 009e BFF36F8F 		isb														
 2666 00a2 BFF34F8F 		dsb														
 2667              	
 2668              	@ 0 "" 2
 2669              		.thumb
 2670              		.syntax unified
 2671 00a6 FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 2672              		.loc 2 203 1
 2673 00a8 00BF     		nop
 2674              	.L164:
 2675              	.LBE164:
 2676              	.LBE163:
2080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2677              		.loc 1 2080 3 discriminator 2
 2678 00aa FEE7     		b	.L164
 2679              	.L165:
 2680              		.loc 1 2086 1
 2681 00ac 00BF     		nop
 2682 00ae 1837     		adds	r7, r7, #24
 2683              	.LCFI79:
 2684              		.cfi_def_cfa_offset 8
 2685 00b0 BD46     		mov	sp, r7
 2686              	.LCFI80:
 2687              		.cfi_def_cfa_register 13
 2688              		@ sp needed
 2689 00b2 80BD     		pop	{r7, pc}
 2690              	.L167:
 2691              		.align	2
 2692              	.L166:
 2693 00b4 00000000 		.word	.LC0
 2694 00b8 00000000 		.word	prvIdleTask
 2695 00bc 00000000 		.word	xIdleTaskHandle
 2696 00c0 00000000 		.word	xNextTaskUnblockTime
 2697 00c4 00000000 		.word	xSchedulerRunning
 2698 00c8 00000000 		.word	xTickCount
 2699              		.cfi_endproc
 2700              	.LFE19:
 2702              		.section	.text.vTaskEndScheduler,"ax",%progbits
 2703              		.align	1
 2704              		.global	vTaskEndScheduler
 2705              		.syntax unified
 2706              		.thumb
 2707              		.thumb_func
 2709              	vTaskEndScheduler:
 2710              	.LFB20:
2087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 89


2089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskEndScheduler( void )
2090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2711              		.loc 1 2090 1
 2712              		.cfi_startproc
 2713              		@ args = 0, pretend = 0, frame = 8
 2714              		@ frame_needed = 1, uses_anonymous_args = 0
 2715 0000 80B5     		push	{r7, lr}
 2716              	.LCFI81:
 2717              		.cfi_def_cfa_offset 8
 2718              		.cfi_offset 7, -8
 2719              		.cfi_offset 14, -4
 2720 0002 82B0     		sub	sp, sp, #8
 2721              	.LCFI82:
 2722              		.cfi_def_cfa_offset 16
 2723 0004 00AF     		add	r7, sp, #0
 2724              	.LCFI83:
 2725              		.cfi_def_cfa_register 7
 2726              	.LBB165:
 2727              	.LBB166:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2728              		.loc 2 195 2
 2729              		.syntax unified
 2730              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2731 0006 4FF05003 			mov r3, #80												
 2732 000a 83F31188 		msr basepri, r3											
 2733 000e BFF36F8F 		isb														
 2734 0012 BFF34F8F 		dsb														
 2735              	
 2736              	@ 0 "" 2
 2737              		.thumb
 2738              		.syntax unified
 2739 0016 7B60     		str	r3, [r7, #4]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 2740              		.loc 2 203 1
 2741 0018 00BF     		nop
 2742              	.LBE166:
 2743              	.LBE165:
2091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
2092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
2093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
2094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portDISABLE_INTERRUPTS();
2095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xSchedulerRunning = pdFALSE;
 2744              		.loc 1 2095 20
 2745 001a 044B     		ldr	r3, .L169
 2746 001c 0022     		movs	r2, #0
 2747 001e 1A60     		str	r2, [r3]
2096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
 2748              		.loc 1 2096 2
 2749 0020 FFF7FEFF 		bl	vPortEndScheduler
2097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2750              		.loc 1 2097 1
 2751 0024 00BF     		nop
 2752 0026 0837     		adds	r7, r7, #8
 2753              	.LCFI84:
 2754              		.cfi_def_cfa_offset 8
 2755 0028 BD46     		mov	sp, r7
 2756              	.LCFI85:
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 90


 2757              		.cfi_def_cfa_register 13
 2758              		@ sp needed
 2759 002a 80BD     		pop	{r7, pc}
 2760              	.L170:
 2761              		.align	2
 2762              	.L169:
 2763 002c 00000000 		.word	xSchedulerRunning
 2764              		.cfi_endproc
 2765              	.LFE20:
 2767              		.section	.text.vTaskSuspendAll,"ax",%progbits
 2768              		.align	1
 2769              		.global	vTaskSuspendAll
 2770              		.syntax unified
 2771              		.thumb
 2772              		.thumb_func
 2774              	vTaskSuspendAll:
 2775              	.LFB21:
2098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSuspendAll( void )
2101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2776              		.loc 1 2101 1
 2777              		.cfi_startproc
 2778              		@ args = 0, pretend = 0, frame = 0
 2779              		@ frame_needed = 1, uses_anonymous_args = 0
 2780              		@ link register save eliminated.
 2781 0000 80B4     		push	{r7}
 2782              	.LCFI86:
 2783              		.cfi_def_cfa_offset 4
 2784              		.cfi_offset 7, -4
 2785 0002 00AF     		add	r7, sp, #0
 2786              	.LCFI87:
 2787              		.cfi_def_cfa_register 7
2102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
2103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
2104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
2105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	http://goo.gl/wu4acr */
2106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	++uxSchedulerSuspended;
 2788              		.loc 1 2106 2
 2789 0004 044B     		ldr	r3, .L172
 2790 0006 1B68     		ldr	r3, [r3]
 2791 0008 0133     		adds	r3, r3, #1
 2792 000a 034A     		ldr	r2, .L172
 2793 000c 1360     		str	r3, [r2]
2107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portMEMORY_BARRIER();
 2794              		.loc 1 2107 2
2108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2795              		.loc 1 2108 1
 2796 000e 00BF     		nop
 2797 0010 BD46     		mov	sp, r7
 2798              	.LCFI88:
 2799              		.cfi_def_cfa_register 13
 2800              		@ sp needed
 2801 0012 80BC     		pop	{r7}
 2802              	.LCFI89:
 2803              		.cfi_restore 7
 2804              		.cfi_def_cfa_offset 0
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 91


 2805 0014 7047     		bx	lr
 2806              	.L173:
 2807 0016 00BF     		.align	2
 2808              	.L172:
 2809 0018 00000000 		.word	uxSchedulerSuspended
 2810              		.cfi_endproc
 2811              	.LFE21:
 2813              		.section	.text.xTaskResumeAll,"ax",%progbits
 2814              		.align	1
 2815              		.global	xTaskResumeAll
 2816              		.syntax unified
 2817              		.thumb
 2818              		.thumb_func
 2820              	xTaskResumeAll:
 2821              	.LFB22:
2109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
2114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xReturn;
2116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
2117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxHigherPriorityReadyTasks takes care of the case where
2119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
2120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		task that are in the Ready state, even though the idle task is
2121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		running. */
2122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
2123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > tskIDLE_PRIORITY )
2125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
2130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
2132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When port optimised task selection is used the uxTopReadyPriority
2134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			variable is used as a bit map.  If bits other than the least
2135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			significant bit are set then there are tasks that have a priority
2136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			above the idle priority that are in the Ready state.  This takes
2137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			care of the case where the co-operative scheduler is in use. */
2138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > uxLeastSignificantBit )
2139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
2146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
2150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 92


2151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
2152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			time slicing is used then the very next tick interrupt must be
2153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			processed. */
2154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( uxHigherPriorityReadyTasks != pdFALSE )
2157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are tasks in the Ready state that have a priority above the
2159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			idle priority.  This path can only be reached if
2160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configUSE_PREEMPTION is 0. */
2161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
2166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskResumeAll( void )
2175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2822              		.loc 1 2175 1
 2823              		.cfi_startproc
 2824              		@ args = 0, pretend = 0, frame = 16
 2825              		@ frame_needed = 1, uses_anonymous_args = 0
 2826 0000 80B5     		push	{r7, lr}
 2827              	.LCFI90:
 2828              		.cfi_def_cfa_offset 8
 2829              		.cfi_offset 7, -8
 2830              		.cfi_offset 14, -4
 2831 0002 84B0     		sub	sp, sp, #16
 2832              	.LCFI91:
 2833              		.cfi_def_cfa_offset 24
 2834 0004 00AF     		add	r7, sp, #0
 2835              	.LCFI92:
 2836              		.cfi_def_cfa_register 7
2176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB = NULL;
 2837              		.loc 1 2176 8
 2838 0006 0023     		movs	r3, #0
 2839 0008 FB60     		str	r3, [r7, #12]
2177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
 2840              		.loc 1 2177 12
 2841 000a 0023     		movs	r3, #0
 2842 000c BB60     		str	r3, [r7, #8]
2178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
2180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	previous call to vTaskSuspendAll(). */
2181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended );
 2843              		.loc 1 2181 2
 2844 000e 424B     		ldr	r3, .L186
 2845 0010 1B68     		ldr	r3, [r3]
 2846 0012 002B     		cmp	r3, #0
 2847 0014 0AD1     		bne	.L175
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 93


 2848              	.LBB167:
 2849              	.LBB168:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2850              		.loc 2 195 2
 2851              		.syntax unified
 2852              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 2853 0016 4FF05003 			mov r3, #80												
 2854 001a 83F31188 		msr basepri, r3											
 2855 001e BFF36F8F 		isb														
 2856 0022 BFF34F8F 		dsb														
 2857              	
 2858              	@ 0 "" 2
 2859              		.thumb
 2860              		.syntax unified
 2861 0026 3B60     		str	r3, [r7]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 2862              		.loc 2 203 1
 2863 0028 00BF     		nop
 2864              	.L176:
 2865              	.LBE168:
 2866              	.LBE167:
 2867              		.loc 1 2181 2 discriminator 1
 2868 002a FEE7     		b	.L176
 2869              	.L175:
2182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
2184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
2185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
2186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
2187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks from this list into their appropriate ready list. */
2188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 2870              		.loc 1 2188 2
 2871 002c FFF7FEFF 		bl	vPortEnterCritical
2189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		--uxSchedulerSuspended;
 2872              		.loc 1 2190 3
 2873 0030 394B     		ldr	r3, .L186
 2874 0032 1B68     		ldr	r3, [r3]
 2875 0034 013B     		subs	r3, r3, #1
 2876 0036 384A     		ldr	r2, .L186
 2877 0038 1360     		str	r3, [r2]
2191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 2878              		.loc 1 2192 28
 2879 003a 374B     		ldr	r3, .L186
 2880 003c 1B68     		ldr	r3, [r3]
 2881              		.loc 1 2192 5
 2882 003e 002B     		cmp	r3, #0
 2883 0040 62D1     		bne	.L177
2193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 2884              		.loc 1 2194 31
 2885 0042 364B     		ldr	r3, .L186+4
 2886 0044 1B68     		ldr	r3, [r3]
 2887              		.loc 1 2194 6
 2888 0046 002B     		cmp	r3, #0
 2889 0048 5ED0     		beq	.L177
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 94


2195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Move any readied tasks from the pending list into the
2197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				appropriate ready list. */
2198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 2890              		.loc 1 2198 10
 2891 004a 2FE0     		b	.L178
 2892              	.L180:
2199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as
 2893              		.loc 1 2200 14
 2894 004c 344B     		ldr	r3, .L186+8
 2895 004e DB68     		ldr	r3, [r3, #12]
 2896              		.loc 1 2200 12
 2897 0050 DB68     		ldr	r3, [r3, #12]
 2898 0052 FB60     		str	r3, [r7, #12]
2201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2899              		.loc 1 2201 15
 2900 0054 FB68     		ldr	r3, [r7, #12]
 2901 0056 1833     		adds	r3, r3, #24
 2902 0058 1846     		mov	r0, r3
 2903 005a FFF7FEFF 		bl	uxListRemove
2202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2904              		.loc 1 2202 15
 2905 005e FB68     		ldr	r3, [r7, #12]
 2906 0060 0433     		adds	r3, r3, #4
 2907 0062 1846     		mov	r0, r3
 2908 0064 FFF7FEFF 		bl	uxListRemove
2203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2909              		.loc 1 2203 6
 2910 0068 FB68     		ldr	r3, [r7, #12]
 2911 006a DA6A     		ldr	r2, [r3, #44]
 2912 006c 2D4B     		ldr	r3, .L186+12
 2913 006e 1B68     		ldr	r3, [r3]
 2914 0070 9A42     		cmp	r2, r3
 2915 0072 03D9     		bls	.L179
 2916              		.loc 1 2203 6 is_stmt 0 discriminator 1
 2917 0074 FB68     		ldr	r3, [r7, #12]
 2918 0076 DB6A     		ldr	r3, [r3, #44]
 2919 0078 2A4A     		ldr	r2, .L186+12
 2920 007a 1360     		str	r3, [r2]
 2921              	.L179:
 2922              		.loc 1 2203 6 discriminator 3
 2923 007c FB68     		ldr	r3, [r7, #12]
 2924 007e DA6A     		ldr	r2, [r3, #44]
 2925 0080 1346     		mov	r3, r2
 2926 0082 9B00     		lsls	r3, r3, #2
 2927 0084 1344     		add	r3, r3, r2
 2928 0086 9B00     		lsls	r3, r3, #2
 2929 0088 274A     		ldr	r2, .L186+16
 2930 008a 1A44     		add	r2, r2, r3
 2931 008c FB68     		ldr	r3, [r7, #12]
 2932 008e 0433     		adds	r3, r3, #4
 2933 0090 1946     		mov	r1, r3
 2934 0092 1046     		mov	r0, r2
 2935 0094 FFF7FEFF 		bl	vListInsertEnd
2204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the moved task has a priority higher than the current
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 95


2206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					task then a yield must be performed. */
2207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2936              		.loc 1 2207 15 is_stmt 1 discriminator 3
 2937 0098 FB68     		ldr	r3, [r7, #12]
 2938 009a DA6A     		ldr	r2, [r3, #44]
 2939              		.loc 1 2207 43 discriminator 3
 2940 009c 234B     		ldr	r3, .L186+20
 2941 009e 1B68     		ldr	r3, [r3]
 2942 00a0 DB6A     		ldr	r3, [r3, #44]
 2943              		.loc 1 2207 8 discriminator 3
 2944 00a2 9A42     		cmp	r2, r3
 2945 00a4 02D3     		bcc	.L178
2208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
 2946              		.loc 1 2209 21
 2947 00a6 224B     		ldr	r3, .L186+24
 2948 00a8 0122     		movs	r2, #1
 2949 00aa 1A60     		str	r2, [r3]
 2950              	.L178:
2198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2951              		.loc 1 2198 12
 2952 00ac 1C4B     		ldr	r3, .L186+8
 2953 00ae 1B68     		ldr	r3, [r3]
2198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2954              		.loc 1 2198 10
 2955 00b0 002B     		cmp	r3, #0
 2956 00b2 CBD1     		bne	.L180
2210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
 2957              		.loc 1 2217 7
 2958 00b4 FB68     		ldr	r3, [r7, #12]
 2959 00b6 002B     		cmp	r3, #0
 2960 00b8 01D0     		beq	.L181
2218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task was unblocked while the scheduler was suspended,
2220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					which may have prevented the next unblock time from being
2221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					re-calculated, in which case re-calculate it now.  Mainly
2222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					important for low power tickless implementations, where
2223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this can prevent an unnecessary exit from low power
2224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					state. */
2225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
 2961              		.loc 1 2225 6
 2962 00ba FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2963              	.L181:
 2964              	.LBB169:
2226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
2229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				they should be processed now.  This ensures the tick count does
2230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
2231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				time. */
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 96


2232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 2965              		.loc 1 2233 18
 2966 00be 1D4B     		ldr	r3, .L186+28
 2967 00c0 1B68     		ldr	r3, [r3]
 2968 00c2 7B60     		str	r3, [r7, #4]
2234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxPendedCounts > ( UBaseType_t ) 0U )
 2969              		.loc 1 2235 8
 2970 00c4 7B68     		ldr	r3, [r7, #4]
 2971 00c6 002B     		cmp	r3, #0
 2972 00c8 10D0     		beq	.L182
 2973              	.L184:
2236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						do
2238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( xTaskIncrementTick() != pdFALSE )
 2974              		.loc 1 2239 12
 2975 00ca FFF7FEFF 		bl	xTaskIncrementTick
 2976 00ce 0346     		mov	r3, r0
 2977              		.loc 1 2239 10
 2978 00d0 002B     		cmp	r3, #0
 2979 00d2 02D0     		beq	.L183
2240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								xYieldPending = pdTRUE;
 2980              		.loc 1 2241 23
 2981 00d4 164B     		ldr	r3, .L186+24
 2982 00d6 0122     		movs	r2, #1
 2983 00d8 1A60     		str	r2, [r3]
 2984              	.L183:
2242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							else
2244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							--uxPendedCounts;
 2985              		.loc 1 2247 8
 2986 00da 7B68     		ldr	r3, [r7, #4]
 2987 00dc 013B     		subs	r3, r3, #1
 2988 00de 7B60     		str	r3, [r7, #4]
2248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 2989              		.loc 1 2248 7
 2990 00e0 7B68     		ldr	r3, [r7, #4]
 2991 00e2 002B     		cmp	r3, #0
 2992 00e4 F1D1     		bne	.L184
2249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						uxPendedTicks = 0;
 2993              		.loc 1 2250 21
 2994 00e6 134B     		ldr	r3, .L186+28
 2995 00e8 0022     		movs	r2, #0
 2996 00ea 1A60     		str	r2, [r3]
 2997              	.L182:
 2998              	.LBE169:
2251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 97


2255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldPending != pdFALSE )
 2999              		.loc 1 2258 23
 3000 00ec 104B     		ldr	r3, .L186+24
 3001 00ee 1B68     		ldr	r3, [r3]
 3002              		.loc 1 2258 7
 3003 00f0 002B     		cmp	r3, #0
 3004 00f2 09D0     		beq	.L177
2259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
2261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xAlreadyYielded = pdTRUE;
 3005              		.loc 1 2262 23
 3006 00f4 0123     		movs	r3, #1
 3007 00f6 BB60     		str	r3, [r7, #8]
2263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif
2265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 3008              		.loc 1 2265 6
 3009 00f8 0F4B     		ldr	r3, .L186+32
 3010 00fa 4FF08052 		mov	r2, #268435456
 3011 00fe 1A60     		str	r2, [r3]
 3012              		.syntax unified
 3013              	@ 2265 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3014 0100 BFF34F8F 		dsb
 3015              	@ 0 "" 2
 3016              	@ 2265 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3017 0104 BFF36F8F 		isb
 3018              	@ 0 "" 2
 3019              		.thumb
 3020              		.syntax unified
 3021              	.L177:
2266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 3022              		.loc 1 2278 2
 3023 0108 FFF7FEFF 		bl	vPortExitCritical
2279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xAlreadyYielded;
 3024              		.loc 1 2280 9
 3025 010c BB68     		ldr	r3, [r7, #8]
2281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3026              		.loc 1 2281 1
 3027 010e 1846     		mov	r0, r3
 3028 0110 1037     		adds	r7, r7, #16
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 98


 3029              	.LCFI93:
 3030              		.cfi_def_cfa_offset 8
 3031 0112 BD46     		mov	sp, r7
 3032              	.LCFI94:
 3033              		.cfi_def_cfa_register 13
 3034              		@ sp needed
 3035 0114 80BD     		pop	{r7, pc}
 3036              	.L187:
 3037 0116 00BF     		.align	2
 3038              	.L186:
 3039 0118 00000000 		.word	uxSchedulerSuspended
 3040 011c 00000000 		.word	uxCurrentNumberOfTasks
 3041 0120 00000000 		.word	xPendingReadyList
 3042 0124 00000000 		.word	uxTopReadyPriority
 3043 0128 00000000 		.word	pxReadyTasksLists
 3044 012c 00000000 		.word	pxCurrentTCB
 3045 0130 00000000 		.word	xYieldPending
 3046 0134 00000000 		.word	uxPendedTicks
 3047 0138 04ED00E0 		.word	-536810236
 3048              		.cfi_endproc
 3049              	.LFE22:
 3051              		.section	.text.xTaskGetTickCount,"ax",%progbits
 3052              		.align	1
 3053              		.global	xTaskGetTickCount
 3054              		.syntax unified
 3055              		.thumb
 3056              		.thumb_func
 3058              	xTaskGetTickCount:
 3059              	.LFB23:
2282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCount( void )
2285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3060              		.loc 1 2285 1
 3061              		.cfi_startproc
 3062              		@ args = 0, pretend = 0, frame = 8
 3063              		@ frame_needed = 1, uses_anonymous_args = 0
 3064              		@ link register save eliminated.
 3065 0000 80B4     		push	{r7}
 3066              	.LCFI95:
 3067              		.cfi_def_cfa_offset 4
 3068              		.cfi_offset 7, -4
 3069 0002 83B0     		sub	sp, sp, #12
 3070              	.LCFI96:
 3071              		.cfi_def_cfa_offset 16
 3072 0004 00AF     		add	r7, sp, #0
 3073              	.LCFI97:
 3074              		.cfi_def_cfa_register 7
2286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTicks;
2287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
2289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
2290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTicks = xTickCount;
 3075              		.loc 1 2291 10
 3076 0006 044B     		ldr	r3, .L190
 3077 0008 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 99


 3078 000a 7B60     		str	r3, [r7, #4]
2292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
2294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xTicks;
 3079              		.loc 1 2295 9
 3080 000c 7B68     		ldr	r3, [r7, #4]
2296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3081              		.loc 1 2296 1
 3082 000e 1846     		mov	r0, r3
 3083 0010 0C37     		adds	r7, r7, #12
 3084              	.LCFI98:
 3085              		.cfi_def_cfa_offset 4
 3086 0012 BD46     		mov	sp, r7
 3087              	.LCFI99:
 3088              		.cfi_def_cfa_register 13
 3089              		@ sp needed
 3090 0014 80BC     		pop	{r7}
 3091              	.LCFI100:
 3092              		.cfi_restore 7
 3093              		.cfi_def_cfa_offset 0
 3094 0016 7047     		bx	lr
 3095              	.L191:
 3096              		.align	2
 3097              	.L190:
 3098 0018 00000000 		.word	xTickCount
 3099              		.cfi_endproc
 3100              	.LFE23:
 3102              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 3103              		.align	1
 3104              		.global	xTaskGetTickCountFromISR
 3105              		.syntax unified
 3106              		.thumb
 3107              		.thumb_func
 3109              	xTaskGetTickCountFromISR:
 3110              	.LFB24:
2297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3111              		.loc 1 2300 1
 3112              		.cfi_startproc
 3113              		@ args = 0, pretend = 0, frame = 8
 3114              		@ frame_needed = 1, uses_anonymous_args = 0
 3115 0000 80B5     		push	{r7, lr}
 3116              	.LCFI101:
 3117              		.cfi_def_cfa_offset 8
 3118              		.cfi_offset 7, -8
 3119              		.cfi_offset 14, -4
 3120 0002 82B0     		sub	sp, sp, #8
 3121              	.LCFI102:
 3122              		.cfi_def_cfa_offset 16
 3123 0004 00AF     		add	r7, sp, #0
 3124              	.LCFI103:
 3125              		.cfi_def_cfa_register 7
2301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xReturn;
2302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxSavedInterruptStatus;
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 100


2303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
2305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
2306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
2307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
2308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
2311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	assigned a priority above the configured maximum system call priority.
2312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
2313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
2314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
2315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
2316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
2317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
2318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 3126              		.loc 1 2318 2
 3127 0006 FFF7FEFF 		bl	vPortValidateInterruptPriority
2319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 3128              		.loc 1 2320 25
 3129 000a 0023     		movs	r3, #0
 3130 000c 7B60     		str	r3, [r7, #4]
2321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTickCount;
 3131              		.loc 1 2322 11
 3132 000e 044B     		ldr	r3, .L194
 3133 0010 1B68     		ldr	r3, [r3]
 3134 0012 3B60     		str	r3, [r7]
2323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
 3135              		.loc 1 2326 9
 3136 0014 3B68     		ldr	r3, [r7]
2327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3137              		.loc 1 2327 1
 3138 0016 1846     		mov	r0, r3
 3139 0018 0837     		adds	r7, r7, #8
 3140              	.LCFI104:
 3141              		.cfi_def_cfa_offset 8
 3142 001a BD46     		mov	sp, r7
 3143              	.LCFI105:
 3144              		.cfi_def_cfa_register 13
 3145              		@ sp needed
 3146 001c 80BD     		pop	{r7, pc}
 3147              	.L195:
 3148 001e 00BF     		.align	2
 3149              	.L194:
 3150 0020 00000000 		.word	xTickCount
 3151              		.cfi_endproc
 3152              	.LFE24:
 3154              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 3155              		.align	1
 3156              		.global	uxTaskGetNumberOfTasks
 3157              		.syntax unified
 3158              		.thumb
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 101


 3159              		.thumb_func
 3161              	uxTaskGetNumberOfTasks:
 3162              	.LFB25:
2328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3163              		.loc 1 2331 1
 3164              		.cfi_startproc
 3165              		@ args = 0, pretend = 0, frame = 0
 3166              		@ frame_needed = 1, uses_anonymous_args = 0
 3167              		@ link register save eliminated.
 3168 0000 80B4     		push	{r7}
 3169              	.LCFI106:
 3170              		.cfi_def_cfa_offset 4
 3171              		.cfi_offset 7, -4
 3172 0002 00AF     		add	r7, sp, #0
 3173              	.LCFI107:
 3174              		.cfi_def_cfa_register 7
2332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
2333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t. */
2334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxCurrentNumberOfTasks;
 3175              		.loc 1 2334 9
 3176 0004 024B     		ldr	r3, .L198
 3177 0006 1B68     		ldr	r3, [r3]
2335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3178              		.loc 1 2335 1
 3179 0008 1846     		mov	r0, r3
 3180 000a BD46     		mov	sp, r7
 3181              	.LCFI108:
 3182              		.cfi_def_cfa_register 13
 3183              		@ sp needed
 3184 000c 80BC     		pop	{r7}
 3185              	.LCFI109:
 3186              		.cfi_restore 7
 3187              		.cfi_def_cfa_offset 0
 3188 000e 7047     		bx	lr
 3189              	.L199:
 3190              		.align	2
 3191              	.L198:
 3192 0010 00000000 		.word	uxCurrentNumberOfTasks
 3193              		.cfi_endproc
 3194              	.LFE25:
 3196              		.section	.text.pcTaskGetName,"ax",%progbits
 3197              		.align	1
 3198              		.global	pcTaskGetName
 3199              		.syntax unified
 3200              		.thumb
 3201              		.thumb_func
 3203              	pcTaskGetName:
 3204              	.LFB26:
2336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed fo
2339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3205              		.loc 1 2339 1
 3206              		.cfi_startproc
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 102


 3207              		@ args = 0, pretend = 0, frame = 16
 3208              		@ frame_needed = 1, uses_anonymous_args = 0
 3209              		@ link register save eliminated.
 3210 0000 80B4     		push	{r7}
 3211              	.LCFI110:
 3212              		.cfi_def_cfa_offset 4
 3213              		.cfi_offset 7, -4
 3214 0002 85B0     		sub	sp, sp, #20
 3215              	.LCFI111:
 3216              		.cfi_def_cfa_offset 24
 3217 0004 00AF     		add	r7, sp, #0
 3218              	.LCFI112:
 3219              		.cfi_def_cfa_register 7
 3220 0006 7860     		str	r0, [r7, #4]
2340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
2341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If null is passed in here then the name of the calling task is being
2343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queried. */
2344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 3221              		.loc 1 2344 10
 3222 0008 7B68     		ldr	r3, [r7, #4]
 3223 000a 002B     		cmp	r3, #0
 3224 000c 02D1     		bne	.L201
 3225              		.loc 1 2344 10 is_stmt 0 discriminator 1
 3226 000e 0D4B     		ldr	r3, .L206
 3227 0010 1B68     		ldr	r3, [r3]
 3228 0012 00E0     		b	.L202
 3229              	.L201:
 3230              		.loc 1 2344 10 discriminator 2
 3231 0014 7B68     		ldr	r3, [r7, #4]
 3232              	.L202:
 3233              		.loc 1 2344 8 is_stmt 1 discriminator 4
 3234 0016 FB60     		str	r3, [r7, #12]
2345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
 3235              		.loc 1 2345 2 discriminator 4
 3236 0018 FB68     		ldr	r3, [r7, #12]
 3237 001a 002B     		cmp	r3, #0
 3238 001c 0AD1     		bne	.L203
 3239              	.LBB170:
 3240              	.LBB171:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3241              		.loc 2 195 2
 3242              		.syntax unified
 3243              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 3244 001e 4FF05003 			mov r3, #80												
 3245 0022 83F31188 		msr basepri, r3											
 3246 0026 BFF36F8F 		isb														
 3247 002a BFF34F8F 		dsb														
 3248              	
 3249              	@ 0 "" 2
 3250              		.thumb
 3251              		.syntax unified
 3252 002e BB60     		str	r3, [r7, #8]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 3253              		.loc 2 203 1
 3254 0030 00BF     		nop
 3255              	.L204:
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 103


 3256              	.LBE171:
 3257              	.LBE170:
 3258              		.loc 1 2345 2 discriminator 1
 3259 0032 FEE7     		b	.L204
 3260              	.L203:
2346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 3261              		.loc 1 2346 9
 3262 0034 FB68     		ldr	r3, [r7, #12]
 3263 0036 3433     		adds	r3, r3, #52
2347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3264              		.loc 1 2347 1
 3265 0038 1846     		mov	r0, r3
 3266 003a 1437     		adds	r7, r7, #20
 3267              	.LCFI113:
 3268              		.cfi_def_cfa_offset 4
 3269 003c BD46     		mov	sp, r7
 3270              	.LCFI114:
 3271              		.cfi_def_cfa_register 13
 3272              		@ sp needed
 3273 003e 80BC     		pop	{r7}
 3274              	.LCFI115:
 3275              		.cfi_restore 7
 3276              		.cfi_def_cfa_offset 0
 3277 0040 7047     		bx	lr
 3278              	.L207:
 3279 0042 00BF     		.align	2
 3280              	.L206:
 3281 0044 00000000 		.word	pxCurrentTCB
 3282              		.cfi_endproc
 3283              	.LFE26:
 3285              		.section	.text.prvSearchForNameWithinSingleList,"ax",%progbits
 3286              		.align	1
 3287              		.syntax unified
 3288              		.thumb
 3289              		.thumb_func
 3291              	prvSearchForNameWithinSingleList:
 3292              	.LFB27:
2348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
2353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3293              		.loc 1 2353 2
 3294              		.cfi_startproc
 3295              		@ args = 0, pretend = 0, frame = 40
 3296              		@ frame_needed = 1, uses_anonymous_args = 0
 3297              		@ link register save eliminated.
 3298 0000 80B4     		push	{r7}
 3299              	.LCFI116:
 3300              		.cfi_def_cfa_offset 4
 3301              		.cfi_offset 7, -4
 3302 0002 8BB0     		sub	sp, sp, #44
 3303              	.LCFI117:
 3304              		.cfi_def_cfa_offset 48
 3305 0004 00AF     		add	r7, sp, #0
 3306              	.LCFI118:
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 104


 3307              		.cfi_def_cfa_register 7
 3308 0006 7860     		str	r0, [r7, #4]
 3309 0008 3960     		str	r1, [r7]
2354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
 3310              		.loc 1 2354 34
 3311 000a 0023     		movs	r3, #0
 3312 000c 7B62     		str	r3, [r7, #36]
2355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t x;
2356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cNextChar;
2357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xBreakLoop;
2358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function is called with the scheduler suspended. */
2360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 3313              		.loc 1 2361 7
 3314 000e 7B68     		ldr	r3, [r7, #4]
 3315 0010 1B68     		ldr	r3, [r3]
 3316              		.loc 1 2361 5
 3317 0012 002B     		cmp	r3, #0
 3318 0014 5BD0     		beq	.L209
 3319              	.LBB172:
2362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );  /*lint !e9079 void * is used as this macro i
 3320              		.loc 1 2363 4
 3321 0016 7B68     		ldr	r3, [r7, #4]
 3322 0018 BB61     		str	r3, [r7, #24]
 3323 001a BB69     		ldr	r3, [r7, #24]
 3324 001c 5B68     		ldr	r3, [r3, #4]
 3325 001e 5A68     		ldr	r2, [r3, #4]
 3326 0020 BB69     		ldr	r3, [r7, #24]
 3327 0022 5A60     		str	r2, [r3, #4]
 3328 0024 BB69     		ldr	r3, [r7, #24]
 3329 0026 5A68     		ldr	r2, [r3, #4]
 3330 0028 BB69     		ldr	r3, [r7, #24]
 3331 002a 0833     		adds	r3, r3, #8
 3332 002c 9A42     		cmp	r2, r3
 3333 002e 04D1     		bne	.L210
 3334              		.loc 1 2363 4 is_stmt 0 discriminator 1
 3335 0030 BB69     		ldr	r3, [r7, #24]
 3336 0032 5B68     		ldr	r3, [r3, #4]
 3337 0034 5A68     		ldr	r2, [r3, #4]
 3338 0036 BB69     		ldr	r3, [r7, #24]
 3339 0038 5A60     		str	r2, [r3, #4]
 3340              	.L210:
 3341              		.loc 1 2363 4 discriminator 3
 3342 003a BB69     		ldr	r3, [r7, #24]
 3343 003c 5B68     		ldr	r3, [r3, #4]
 3344 003e DB68     		ldr	r3, [r3, #12]
 3345 0040 7B61     		str	r3, [r7, #20]
 3346              	.L220:
 3347              	.LBE172:
 3348              	.LBB173:
2364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is
 3349              		.loc 1 2367 5 is_stmt 1
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 105


 3350 0042 7B68     		ldr	r3, [r7, #4]
 3351 0044 3B61     		str	r3, [r7, #16]
 3352 0046 3B69     		ldr	r3, [r7, #16]
 3353 0048 5B68     		ldr	r3, [r3, #4]
 3354 004a 5A68     		ldr	r2, [r3, #4]
 3355 004c 3B69     		ldr	r3, [r7, #16]
 3356 004e 5A60     		str	r2, [r3, #4]
 3357 0050 3B69     		ldr	r3, [r7, #16]
 3358 0052 5A68     		ldr	r2, [r3, #4]
 3359 0054 3B69     		ldr	r3, [r7, #16]
 3360 0056 0833     		adds	r3, r3, #8
 3361 0058 9A42     		cmp	r2, r3
 3362 005a 04D1     		bne	.L211
 3363              		.loc 1 2367 5 is_stmt 0 discriminator 1
 3364 005c 3B69     		ldr	r3, [r7, #16]
 3365 005e 5B68     		ldr	r3, [r3, #4]
 3366 0060 5A68     		ldr	r2, [r3, #4]
 3367 0062 3B69     		ldr	r3, [r7, #16]
 3368 0064 5A60     		str	r2, [r3, #4]
 3369              	.L211:
 3370              		.loc 1 2367 5 discriminator 3
 3371 0066 3B69     		ldr	r3, [r7, #16]
 3372 0068 5B68     		ldr	r3, [r3, #4]
 3373 006a DB68     		ldr	r3, [r3, #12]
 3374 006c FB60     		str	r3, [r7, #12]
 3375              	.LBE173:
2368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check each character in the name looking for a match or
2370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mismatch. */
2371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xBreakLoop = pdFALSE;
 3376              		.loc 1 2371 16 is_stmt 1 discriminator 3
 3377 006e 0023     		movs	r3, #0
 3378 0070 FB61     		str	r3, [r7, #28]
2372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 3379              		.loc 1 2372 12 discriminator 3
 3380 0072 0023     		movs	r3, #0
 3381 0074 3B62     		str	r3, [r7, #32]
 3382              		.loc 1 2372 5 discriminator 3
 3383 0076 1CE0     		b	.L212
 3384              	.L217:
2373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					cNextChar = pxNextTCB->pcTaskName[ x ];
 3385              		.loc 1 2374 16
 3386 0078 FA68     		ldr	r2, [r7, #12]
 3387 007a 3B6A     		ldr	r3, [r7, #32]
 3388 007c 1344     		add	r3, r3, r2
 3389 007e 3433     		adds	r3, r3, #52
 3390 0080 1B78     		ldrb	r3, [r3]
 3391 0082 FB72     		strb	r3, [r7, #11]
2375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( cNextChar != pcNameToQuery[ x ] )
 3392              		.loc 1 2376 36
 3393 0084 3A68     		ldr	r2, [r7]
 3394 0086 3B6A     		ldr	r3, [r7, #32]
 3395 0088 1344     		add	r3, r3, r2
 3396 008a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3397              		.loc 1 2376 8
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 106


 3398 008c FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 3399 008e 9A42     		cmp	r2, r3
 3400 0090 02D0     		beq	.L213
2377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Characters didn't match. */
2379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xBreakLoop = pdTRUE;
 3401              		.loc 1 2379 18
 3402 0092 0123     		movs	r3, #1
 3403 0094 FB61     		str	r3, [r7, #28]
 3404 0096 06E0     		b	.L214
 3405              	.L213:
2380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else if( cNextChar == ( char ) 0x00 )
 3406              		.loc 1 2381 13
 3407 0098 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 3408 009a 002B     		cmp	r3, #0
 3409 009c 03D1     		bne	.L214
2382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Both strings terminated, a match must have been
2384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						found. */
2385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxReturn = pxNextTCB;
 3410              		.loc 1 2385 16
 3411 009e FB68     		ldr	r3, [r7, #12]
 3412 00a0 7B62     		str	r3, [r7, #36]
2386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xBreakLoop = pdTRUE;
 3413              		.loc 1 2386 18
 3414 00a2 0123     		movs	r3, #1
 3415 00a4 FB61     		str	r3, [r7, #28]
 3416              	.L214:
2387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xBreakLoop != pdFALSE )
 3417              		.loc 1 2393 8
 3418 00a6 FB69     		ldr	r3, [r7, #28]
 3419 00a8 002B     		cmp	r3, #0
 3420 00aa 06D1     		bne	.L222
2372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3421              		.loc 1 2372 79 discriminator 2
 3422 00ac 3B6A     		ldr	r3, [r7, #32]
 3423 00ae 0133     		adds	r3, r3, #1
 3424 00b0 3B62     		str	r3, [r7, #32]
 3425              	.L212:
2372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3426              		.loc 1 2372 5 discriminator 1
 3427 00b2 3B6A     		ldr	r3, [r7, #32]
 3428 00b4 0F2B     		cmp	r3, #15
 3429 00b6 DFD9     		bls	.L217
 3430 00b8 00E0     		b	.L216
 3431              	.L222:
2394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
 3432              		.loc 1 2395 7
 3433 00ba 00BF     		nop
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 107


 3434              	.L216:
2396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxReturn != NULL )
 3435              		.loc 1 2399 7
 3436 00bc 7B6A     		ldr	r3, [r7, #36]
 3437 00be 002B     		cmp	r3, #0
 3438 00c0 04D1     		bne	.L223
2400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The handle has been found. */
2402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
 3439              		.loc 1 2405 4
 3440 00c2 FA68     		ldr	r2, [r7, #12]
 3441 00c4 7B69     		ldr	r3, [r7, #20]
 3442 00c6 9A42     		cmp	r2, r3
 3443 00c8 BBD1     		bne	.L220
 3444 00ca 00E0     		b	.L209
 3445              	.L223:
2402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3446              		.loc 1 2402 6
 3447 00cc 00BF     		nop
 3448              	.L209:
2406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxReturn;
 3449              		.loc 1 2412 10
 3450 00ce 7B6A     		ldr	r3, [r7, #36]
2413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3451              		.loc 1 2413 2
 3452 00d0 1846     		mov	r0, r3
 3453 00d2 2C37     		adds	r7, r7, #44
 3454              	.LCFI119:
 3455              		.cfi_def_cfa_offset 4
 3456 00d4 BD46     		mov	sp, r7
 3457              	.LCFI120:
 3458              		.cfi_def_cfa_register 13
 3459              		@ sp needed
 3460 00d6 80BC     		pop	{r7}
 3461              	.LCFI121:
 3462              		.cfi_restore 7
 3463              		.cfi_def_cfa_offset 0
 3464 00d8 7047     		bx	lr
 3465              		.cfi_endproc
 3466              	.LFE27:
 3468              		.section	.text.xTaskGetHandle,"ax",%progbits
 3469              		.align	1
 3470              		.global	xTaskGetHandle
 3471              		.syntax unified
 3472              		.thumb
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 108


 3473              		.thumb_func
 3475              	xTaskGetHandle:
 3476              	.LFB28:
2414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are a
2421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3477              		.loc 1 2421 2
 3478              		.cfi_startproc
 3479              		@ args = 0, pretend = 0, frame = 24
 3480              		@ frame_needed = 1, uses_anonymous_args = 0
 3481 0000 80B5     		push	{r7, lr}
 3482              	.LCFI122:
 3483              		.cfi_def_cfa_offset 8
 3484              		.cfi_offset 7, -8
 3485              		.cfi_offset 14, -4
 3486 0002 86B0     		sub	sp, sp, #24
 3487              	.LCFI123:
 3488              		.cfi_def_cfa_offset 32
 3489 0004 00AF     		add	r7, sp, #0
 3490              	.LCFI124:
 3491              		.cfi_def_cfa_register 7
 3492 0006 7860     		str	r0, [r7, #4]
2422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxQueue = configMAX_PRIORITIES;
 3493              		.loc 1 2422 14
 3494 0008 3823     		movs	r3, #56
 3495 000a 7B61     		str	r3, [r7, #20]
2423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t* pxTCB;
2424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
 3496              		.loc 1 2426 3
 3497 000c 7868     		ldr	r0, [r7, #4]
 3498 000e FFF7FEFF 		bl	strlen
 3499 0012 0346     		mov	r3, r0
 3500 0014 0F2B     		cmp	r3, #15
 3501 0016 0AD9     		bls	.L225
 3502              	.LBB174:
 3503              	.LBB175:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3504              		.loc 2 195 2
 3505              		.syntax unified
 3506              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 3507 0018 4FF05003 			mov r3, #80												
 3508 001c 83F31188 		msr basepri, r3											
 3509 0020 BFF36F8F 		isb														
 3510 0024 BFF34F8F 		dsb														
 3511              	
 3512              	@ 0 "" 2
 3513              		.thumb
 3514              		.syntax unified
 3515 0028 FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 109


 3516              		.loc 2 203 1
 3517 002a 00BF     		nop
 3518              	.L226:
 3519              	.LBE175:
 3520              	.LBE174:
 3521              		.loc 1 2426 3 discriminator 1
 3522 002c FEE7     		b	.L226
 3523              	.L225:
2427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
 3524              		.loc 1 2428 3
 3525 002e FFF7FEFF 		bl	vTaskSuspendAll
 3526              	.L229:
2429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the ready lists. */
2431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxQueue--;
 3527              		.loc 1 2433 12
 3528 0032 7B69     		ldr	r3, [r7, #20]
 3529 0034 013B     		subs	r3, r3, #1
 3530 0036 7B61     		str	r3, [r7, #20]
2434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNam
 3531              		.loc 1 2434 13
 3532 0038 7A69     		ldr	r2, [r7, #20]
 3533 003a 1346     		mov	r3, r2
 3534 003c 9B00     		lsls	r3, r3, #2
 3535 003e 1344     		add	r3, r3, r2
 3536 0040 9B00     		lsls	r3, r3, #2
 3537 0042 1D4A     		ldr	r2, .L236
 3538 0044 1344     		add	r3, r3, r2
 3539 0046 7968     		ldr	r1, [r7, #4]
 3540 0048 1846     		mov	r0, r3
 3541 004a FFF7FEFF 		bl	prvSearchForNameWithinSingleList
 3542 004e 3861     		str	r0, [r7, #16]
2435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
 3543              		.loc 1 2436 7
 3544 0050 3B69     		ldr	r3, [r7, #16]
 3545 0052 002B     		cmp	r3, #0
 3546 0054 03D1     		bne	.L235
2437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Found the handle. */
2439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts
 3547              		.loc 1 2442 4
 3548 0056 7B69     		ldr	r3, [r7, #20]
 3549 0058 002B     		cmp	r3, #0
 3550 005a EAD1     		bne	.L229
 3551 005c 00E0     		b	.L228
 3552              	.L235:
2439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3553              		.loc 1 2439 6
 3554 005e 00BF     		nop
 3555              	.L228:
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 110


2443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the delayed lists. */
2445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
 3556              		.loc 1 2445 6
 3557 0060 3B69     		ldr	r3, [r7, #16]
 3558 0062 002B     		cmp	r3, #0
 3559 0064 06D1     		bne	.L230
2446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
 3560              		.loc 1 2447 13
 3561 0066 154B     		ldr	r3, .L236+4
 3562 0068 1B68     		ldr	r3, [r3]
 3563 006a 7968     		ldr	r1, [r7, #4]
 3564 006c 1846     		mov	r0, r3
 3565 006e FFF7FEFF 		bl	prvSearchForNameWithinSingleList
 3566 0072 3861     		str	r0, [r7, #16]
 3567              	.L230:
2448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
 3568              		.loc 1 2450 6
 3569 0074 3B69     		ldr	r3, [r7, #16]
 3570 0076 002B     		cmp	r3, #0
 3571 0078 06D1     		bne	.L231
2451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery
 3572              		.loc 1 2452 13
 3573 007a 114B     		ldr	r3, .L236+8
 3574 007c 1B68     		ldr	r3, [r3]
 3575 007e 7968     		ldr	r1, [r7, #4]
 3576 0080 1846     		mov	r0, r3
 3577 0082 FFF7FEFF 		bl	prvSearchForNameWithinSingleList
 3578 0086 3861     		str	r0, [r7, #16]
 3579              	.L231:
2453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
2456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
 3580              		.loc 1 2457 7
 3581 0088 3B69     		ldr	r3, [r7, #16]
 3582 008a 002B     		cmp	r3, #0
 3583 008c 04D1     		bne	.L232
2458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the suspended list. */
2460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
 3584              		.loc 1 2460 14
 3585 008e 7968     		ldr	r1, [r7, #4]
 3586 0090 0C48     		ldr	r0, .L236+12
 3587 0092 FFF7FEFF 		bl	prvSearchForNameWithinSingleList
 3588 0096 3861     		str	r0, [r7, #16]
 3589              	.L232:
2461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 111


2466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
 3590              		.loc 1 2467 7
 3591 0098 3B69     		ldr	r3, [r7, #16]
 3592 009a 002B     		cmp	r3, #0
 3593 009c 04D1     		bne	.L233
2468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the deleted list. */
2470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
 3594              		.loc 1 2470 14
 3595 009e 7968     		ldr	r1, [r7, #4]
 3596 00a0 0948     		ldr	r0, .L236+16
 3597 00a2 FFF7FEFF 		bl	prvSearchForNameWithinSingleList
 3598 00a6 3861     		str	r0, [r7, #16]
 3599              	.L233:
2471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
 3600              		.loc 1 2475 12
 3601 00a8 FFF7FEFF 		bl	xTaskResumeAll
2476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxTCB;
 3602              		.loc 1 2477 10
 3603 00ac 3B69     		ldr	r3, [r7, #16]
2478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3604              		.loc 1 2478 2
 3605 00ae 1846     		mov	r0, r3
 3606 00b0 1837     		adds	r7, r7, #24
 3607              	.LCFI125:
 3608              		.cfi_def_cfa_offset 8
 3609 00b2 BD46     		mov	sp, r7
 3610              	.LCFI126:
 3611              		.cfi_def_cfa_register 13
 3612              		@ sp needed
 3613 00b4 80BD     		pop	{r7, pc}
 3614              	.L237:
 3615 00b6 00BF     		.align	2
 3616              	.L236:
 3617 00b8 00000000 		.word	pxReadyTasksLists
 3618 00bc 00000000 		.word	pxDelayedTaskList
 3619 00c0 00000000 		.word	pxOverflowDelayedTaskList
 3620 00c4 00000000 		.word	xSuspendedTaskList
 3621 00c8 00000000 		.word	xTasksWaitingTermination
 3622              		.cfi_endproc
 3623              	.LFE28:
 3625              		.section	.text.uxTaskGetSystemState,"ax",%progbits
 3626              		.align	1
 3627              		.global	uxTaskGetSystemState
 3628              		.syntax unified
 3629              		.thumb
 3630              		.thumb_func
 3632              	uxTaskGetSystemState:
 3633              	.LFB29:
2479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 112


2481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
2486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3634              		.loc 1 2486 2
 3635              		.cfi_startproc
 3636              		@ args = 0, pretend = 0, frame = 24
 3637              		@ frame_needed = 1, uses_anonymous_args = 0
 3638 0000 80B5     		push	{r7, lr}
 3639              	.LCFI127:
 3640              		.cfi_def_cfa_offset 8
 3641              		.cfi_offset 7, -8
 3642              		.cfi_offset 14, -4
 3643 0002 86B0     		sub	sp, sp, #24
 3644              	.LCFI128:
 3645              		.cfi_def_cfa_offset 32
 3646 0004 00AF     		add	r7, sp, #0
 3647              	.LCFI129:
 3648              		.cfi_def_cfa_register 7
 3649 0006 F860     		str	r0, [r7, #12]
 3650 0008 B960     		str	r1, [r7, #8]
 3651 000a 7A60     		str	r2, [r7, #4]
2487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 3652              		.loc 1 2487 14
 3653 000c 0023     		movs	r3, #0
 3654 000e 7B61     		str	r3, [r7, #20]
 3655              		.loc 1 2487 26
 3656 0010 3823     		movs	r3, #56
 3657 0012 3B61     		str	r3, [r7, #16]
2488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
 3658              		.loc 1 2489 3
 3659 0014 FFF7FEFF 		bl	vTaskSuspendAll
2490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is there a space in the array for each task in the system? */
2492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
 3660              		.loc 1 2492 20
 3661 0018 3A4B     		ldr	r3, .L242
 3662 001a 1B68     		ldr	r3, [r3]
 3663              		.loc 1 2492 6
 3664 001c BA68     		ldr	r2, [r7, #8]
 3665 001e 9A42     		cmp	r2, r3
 3666 0020 68D3     		bcc	.L239
 3667              	.L240:
2493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Ready state. */
2496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				do
2497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxQueue--;
 3668              		.loc 1 2498 13 discriminator 1
 3669 0022 3B69     		ldr	r3, [r7, #16]
 3670 0024 013B     		subs	r3, r3, #1
 3671 0026 3B61     		str	r3, [r7, #16]
2499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 113


 3672              		.loc 1 2499 66 discriminator 1
 3673 0028 7A69     		ldr	r2, [r7, #20]
 3674 002a 1346     		mov	r3, r2
 3675 002c DB00     		lsls	r3, r3, #3
 3676 002e 1344     		add	r3, r3, r2
 3677 0030 9B00     		lsls	r3, r3, #2
 3678 0032 1A46     		mov	r2, r3
 3679              		.loc 1 2499 16 discriminator 1
 3680 0034 FB68     		ldr	r3, [r7, #12]
 3681 0036 9818     		adds	r0, r3, r2
 3682 0038 3A69     		ldr	r2, [r7, #16]
 3683 003a 1346     		mov	r3, r2
 3684 003c 9B00     		lsls	r3, r3, #2
 3685 003e 1344     		add	r3, r3, r2
 3686 0040 9B00     		lsls	r3, r3, #2
 3687 0042 314A     		ldr	r2, .L242+4
 3688 0044 1344     		add	r3, r3, r2
 3689 0046 0122     		movs	r2, #1
 3690 0048 1946     		mov	r1, r3
 3691 004a FFF7FEFF 		bl	prvListTasksWithinSingleList
 3692 004e 0246     		mov	r2, r0
 3693              		.loc 1 2499 13 discriminator 1
 3694 0050 7B69     		ldr	r3, [r7, #20]
 3695 0052 1344     		add	r3, r3, r2
 3696 0054 7B61     		str	r3, [r7, #20]
2500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
 3697              		.loc 1 2501 5 discriminator 1
 3698 0056 3B69     		ldr	r3, [r7, #16]
 3699 0058 002B     		cmp	r3, #0
 3700 005a E2D1     		bne	.L240
2502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Blocked state. */
2505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelaye
 3701              		.loc 1 2505 65
 3702 005c 7A69     		ldr	r2, [r7, #20]
 3703 005e 1346     		mov	r3, r2
 3704 0060 DB00     		lsls	r3, r3, #3
 3705 0062 1344     		add	r3, r3, r2
 3706 0064 9B00     		lsls	r3, r3, #2
 3707 0066 1A46     		mov	r2, r3
 3708              		.loc 1 2505 15
 3709 0068 FB68     		ldr	r3, [r7, #12]
 3710 006a 1344     		add	r3, r3, r2
 3711 006c 274A     		ldr	r2, .L242+8
 3712 006e 1168     		ldr	r1, [r2]
 3713 0070 0222     		movs	r2, #2
 3714 0072 1846     		mov	r0, r3
 3715 0074 FFF7FEFF 		bl	prvListTasksWithinSingleList
 3716 0078 0246     		mov	r2, r0
 3717              		.loc 1 2505 12
 3718 007a 7B69     		ldr	r3, [r7, #20]
 3719 007c 1344     		add	r3, r3, r2
 3720 007e 7B61     		str	r3, [r7, #20]
2506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
 3721              		.loc 1 2506 65
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 114


 3722 0080 7A69     		ldr	r2, [r7, #20]
 3723 0082 1346     		mov	r3, r2
 3724 0084 DB00     		lsls	r3, r3, #3
 3725 0086 1344     		add	r3, r3, r2
 3726 0088 9B00     		lsls	r3, r3, #2
 3727 008a 1A46     		mov	r2, r3
 3728              		.loc 1 2506 15
 3729 008c FB68     		ldr	r3, [r7, #12]
 3730 008e 1344     		add	r3, r3, r2
 3731 0090 1F4A     		ldr	r2, .L242+12
 3732 0092 1168     		ldr	r1, [r2]
 3733 0094 0222     		movs	r2, #2
 3734 0096 1846     		mov	r0, r3
 3735 0098 FFF7FEFF 		bl	prvListTasksWithinSingleList
 3736 009c 0246     		mov	r2, r0
 3737              		.loc 1 2506 12
 3738 009e 7B69     		ldr	r3, [r7, #20]
 3739 00a0 1344     		add	r3, r3, r2
 3740 00a2 7B61     		str	r3, [r7, #20]
2507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
2509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
2512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermin
 3741              		.loc 1 2512 66
 3742 00a4 7A69     		ldr	r2, [r7, #20]
 3743 00a6 1346     		mov	r3, r2
 3744 00a8 DB00     		lsls	r3, r3, #3
 3745 00aa 1344     		add	r3, r3, r2
 3746 00ac 9B00     		lsls	r3, r3, #2
 3747 00ae 1A46     		mov	r2, r3
 3748              		.loc 1 2512 16
 3749 00b0 FB68     		ldr	r3, [r7, #12]
 3750 00b2 1344     		add	r3, r3, r2
 3751 00b4 0422     		movs	r2, #4
 3752 00b6 1749     		ldr	r1, .L242+16
 3753 00b8 1846     		mov	r0, r3
 3754 00ba FFF7FEFF 		bl	prvListTasksWithinSingleList
 3755 00be 0246     		mov	r2, r0
 3756              		.loc 1 2512 13
 3757 00c0 7B69     		ldr	r3, [r7, #20]
 3758 00c2 1344     		add	r3, r3, r2
 3759 00c4 7B61     		str	r3, [r7, #20]
2513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
2517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task in the Suspended state. */
2520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList,
 3760              		.loc 1 2520 66
 3761 00c6 7A69     		ldr	r2, [r7, #20]
 3762 00c8 1346     		mov	r3, r2
 3763 00ca DB00     		lsls	r3, r3, #3
 3764 00cc 1344     		add	r3, r3, r2
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 115


 3765 00ce 9B00     		lsls	r3, r3, #2
 3766 00d0 1A46     		mov	r2, r3
 3767              		.loc 1 2520 16
 3768 00d2 FB68     		ldr	r3, [r7, #12]
 3769 00d4 1344     		add	r3, r3, r2
 3770 00d6 0322     		movs	r2, #3
 3771 00d8 0F49     		ldr	r1, .L242+20
 3772 00da 1846     		mov	r0, r3
 3773 00dc FFF7FEFF 		bl	prvListTasksWithinSingleList
 3774 00e0 0246     		mov	r2, r0
 3775              		.loc 1 2520 13
 3776 00e2 7B69     		ldr	r3, [r7, #20]
 3777 00e4 1344     		add	r3, r3, r2
 3778 00e6 7B61     		str	r3, [r7, #20]
2521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
2525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
2531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
2533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
2536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
 3779              		.loc 1 2537 8
 3780 00e8 7B68     		ldr	r3, [r7, #4]
 3781 00ea 002B     		cmp	r3, #0
 3782 00ec 02D0     		beq	.L239
2538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pulTotalRunTime = 0;
 3783              		.loc 1 2539 24
 3784 00ee 7B68     		ldr	r3, [r7, #4]
 3785 00f0 0022     		movs	r2, #0
 3786 00f2 1A60     		str	r2, [r3]
 3787              	.L239:
2540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
 3788              		.loc 1 2549 12
 3789 00f4 FFF7FEFF 		bl	xTaskResumeAll
2550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
 3790              		.loc 1 2551 10
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 116


 3791 00f8 7B69     		ldr	r3, [r7, #20]
2552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3792              		.loc 1 2552 2
 3793 00fa 1846     		mov	r0, r3
 3794 00fc 1837     		adds	r7, r7, #24
 3795              	.LCFI130:
 3796              		.cfi_def_cfa_offset 8
 3797 00fe BD46     		mov	sp, r7
 3798              	.LCFI131:
 3799              		.cfi_def_cfa_register 13
 3800              		@ sp needed
 3801 0100 80BD     		pop	{r7, pc}
 3802              	.L243:
 3803 0102 00BF     		.align	2
 3804              	.L242:
 3805 0104 00000000 		.word	uxCurrentNumberOfTasks
 3806 0108 00000000 		.word	pxReadyTasksLists
 3807 010c 00000000 		.word	pxDelayedTaskList
 3808 0110 00000000 		.word	pxOverflowDelayedTaskList
 3809 0114 00000000 		.word	xTasksWaitingTermination
 3810 0118 00000000 		.word	xSuspendedTaskList
 3811              		.cfi_endproc
 3812              	.LFE29:
 3814              		.section	.text.xTaskIncrementTick,"ax",%progbits
 3815              		.align	1
 3816              		.global	xTaskIncrementTick
 3817              		.syntax unified
 3818              		.thumb
 3819              		.thumb_func
 3821              	xTaskIncrementTick:
 3822              	.LFB30:
2553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
2560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
2563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
2564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xIdleTaskHandle;
2565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
2572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 1. */
2574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
2577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Correct the tick count value after a period during which the tick
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 117


2579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
2580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		each stepped tick. */
2581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount += xTicksToJump;
2583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
2584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB = xTask;
2594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
2597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only be prematurely removed from the Blocked state if
2601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			it is actually in the Blocked state. */
2602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( eTaskGetState( xTask ) == eBlocked )
2603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
2605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove the reference to the task from the blocked list.  An
2607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				interrupt won't touch the xStateListItem because the
2608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended. */
2609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is the task waiting on an event also?  If so remove it from
2612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the event list too.  Interrupts can touch the event list item,
2613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				even though the scheduler is suspended, so a critical section
2614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
2615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskENTER_CRITICAL();
2616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ucDelayAborted = pdTRUE;
2621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskEXIT_CRITICAL();
2628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Place the unblocked task into the appropriate ready list. */
2630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
2631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task being unblocked cannot cause an immediate context
2633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch if preemption is turned off. */
2634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if (  configUSE_PREEMPTION == 1 )
2635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 118


2636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Preemption is on, but a context switch should only be
2637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					performed if the unblocked task has a priority that is
2638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					equal to or higher than the currently executing task. */
2639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Pend the yield to be performed when the scheduler
2642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						is unsuspended. */
2643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
2644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* configUSE_PREEMPTION */
2651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
2655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskIncrementTick( void )
2666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3823              		.loc 1 2666 1
 3824              		.cfi_startproc
 3825              		@ args = 0, pretend = 0, frame = 24
 3826              		@ frame_needed = 1, uses_anonymous_args = 0
 3827 0000 80B5     		push	{r7, lr}
 3828              	.LCFI132:
 3829              		.cfi_def_cfa_offset 8
 3830              		.cfi_offset 7, -8
 3831              		.cfi_offset 14, -4
 3832 0002 86B0     		sub	sp, sp, #24
 3833              	.LCFI133:
 3834              		.cfi_def_cfa_offset 32
 3835 0004 00AF     		add	r7, sp, #0
 3836              	.LCFI134:
 3837              		.cfi_def_cfa_register 7
2667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t * pxTCB;
2668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xItemValue;
2669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
 3838              		.loc 1 2669 12
 3839 0006 0023     		movs	r3, #0
 3840 0008 7B61     		str	r3, [r7, #20]
2670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
2672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
2673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks to be unblocked. */
2674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 119


2675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 3841              		.loc 1 2675 27
 3842 000a 4F4B     		ldr	r3, .L259
 3843 000c 1B68     		ldr	r3, [r3]
 3844              		.loc 1 2675 4
 3845 000e 002B     		cmp	r3, #0
 3846 0010 40F08980 		bne	.L245
 3847              	.LBB176:
2676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this
2678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		block. */
2679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 3848              		.loc 1 2679 49
 3849 0014 4D4B     		ldr	r3, .L259+4
 3850 0016 1B68     		ldr	r3, [r3]
 3851              		.loc 1 2679 20
 3852 0018 0133     		adds	r3, r3, #1
 3853 001a 3B61     		str	r3, [r7, #16]
2680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
2682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		delayed lists if it wraps to 0. */
2683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = xConstTickCount;
 3854              		.loc 1 2683 14
 3855 001c 4B4A     		ldr	r2, .L259+4
 3856 001e 3B69     		ldr	r3, [r7, #16]
 3857 0020 1360     		str	r3, [r2]
2684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as
 3858              		.loc 1 2685 5
 3859 0022 3B69     		ldr	r3, [r7, #16]
 3860 0024 002B     		cmp	r3, #0
 3861 0026 20D1     		bne	.L246
 3862              	.LBB177:
2686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskSWITCH_DELAYED_LISTS();
 3863              		.loc 1 2687 4
 3864 0028 494B     		ldr	r3, .L259+8
 3865 002a 1B68     		ldr	r3, [r3]
 3866 002c 1B68     		ldr	r3, [r3]
 3867 002e 002B     		cmp	r3, #0
 3868 0030 0AD0     		beq	.L247
 3869              	.LBB178:
 3870              	.LBB179:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 3871              		.loc 2 195 2
 3872              		.syntax unified
 3873              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 3874 0032 4FF05003 			mov r3, #80												
 3875 0036 83F31188 		msr basepri, r3											
 3876 003a BFF36F8F 		isb														
 3877 003e BFF34F8F 		dsb														
 3878              	
 3879              	@ 0 "" 2
 3880              		.thumb
 3881              		.syntax unified
 3882 0042 3B60     		str	r3, [r7]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 120


 3883              		.loc 2 203 1
 3884 0044 00BF     		nop
 3885              	.L248:
 3886              	.LBE179:
 3887              	.LBE178:
 3888              		.loc 1 2687 4 discriminator 1
 3889 0046 FEE7     		b	.L248
 3890              	.L247:
 3891              		.loc 1 2687 4 is_stmt 0 discriminator 2
 3892 0048 414B     		ldr	r3, .L259+8
 3893 004a 1B68     		ldr	r3, [r3]
 3894 004c FB60     		str	r3, [r7, #12]
 3895 004e 414B     		ldr	r3, .L259+12
 3896 0050 1B68     		ldr	r3, [r3]
 3897 0052 3F4A     		ldr	r2, .L259+8
 3898 0054 1360     		str	r3, [r2]
 3899 0056 3F4A     		ldr	r2, .L259+12
 3900 0058 FB68     		ldr	r3, [r7, #12]
 3901 005a 1360     		str	r3, [r2]
 3902 005c 3E4B     		ldr	r3, .L259+16
 3903 005e 1B68     		ldr	r3, [r3]
 3904 0060 0133     		adds	r3, r3, #1
 3905 0062 3D4A     		ldr	r2, .L259+16
 3906 0064 1360     		str	r3, [r2]
 3907 0066 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 3908              	.L246:
 3909              	.LBE177:
2688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if this tick has made a timeout expire.  Tasks are stored in
2695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	queue in the order of their wake time - meaning once one task
2696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		has been found whose block time has not expired there is no need to
2697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		look any further down the list. */
2698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount >= xNextTaskUnblockTime )
 3910              		.loc 1 2698 23 is_stmt 1
 3911 006a 3C4B     		ldr	r3, .L259+20
 3912 006c 1B68     		ldr	r3, [r3]
 3913              		.loc 1 2698 5
 3914 006e 3A69     		ldr	r2, [r7, #16]
 3915 0070 9A42     		cmp	r2, r3
 3916 0072 49D3     		bcc	.L249
 3917              	.L255:
2699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( ;; )
2701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 3918              		.loc 1 2702 9
 3919 0074 364B     		ldr	r3, .L259+8
 3920 0076 1B68     		ldr	r3, [r3]
 3921 0078 1B68     		ldr	r3, [r3]
 3922              		.loc 1 2702 7
 3923 007a 002B     		cmp	r3, #0
 3924 007c 04D1     		bne	.L250
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 121


2703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is empty.  Set xNextTaskUnblockTime
2705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					to the maximum possible value so it is extremely
2706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unlikely that the
2707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xTickCount >= xNextTaskUnblockTime ) test will pass
2708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					next time through. */
2709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redun
 3925              		.loc 1 2709 27
 3926 007e 374B     		ldr	r3, .L259+20
 3927 0080 4FF0FF32 		mov	r2, #-1
 3928 0084 1A60     		str	r2, [r3]
2710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 3929              		.loc 1 2710 6
 3930 0086 3FE0     		b	.L249
 3931              	.L250:
2711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is not empty, get the value of the
2715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					item at the head of the delayed list.  This is the time
2716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					at which the task at the head of the delayed list must
2717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be removed from the Blocked state. */
2718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this
 3932              		.loc 1 2718 14
 3933 0088 314B     		ldr	r3, .L259+8
 3934 008a 1B68     		ldr	r3, [r3]
 3935 008c DB68     		ldr	r3, [r3, #12]
 3936              		.loc 1 2718 12
 3937 008e DB68     		ldr	r3, [r3, #12]
 3938 0090 BB60     		str	r3, [r7, #8]
2719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 3939              		.loc 1 2719 17
 3940 0092 BB68     		ldr	r3, [r7, #8]
 3941 0094 5B68     		ldr	r3, [r3, #4]
 3942 0096 7B60     		str	r3, [r7, #4]
2720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xConstTickCount < xItemValue )
 3943              		.loc 1 2721 8
 3944 0098 3A69     		ldr	r2, [r7, #16]
 3945 009a 7B68     		ldr	r3, [r7, #4]
 3946 009c 9A42     		cmp	r2, r3
 3947 009e 03D2     		bcs	.L251
2722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is not time to unblock this item yet, but the
2724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						item value is the time at which the task at the head
2725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						of the blocked list must be removed from the Blocked
2726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						state -	so record the item value in
2727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime. */
2728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime = xItemValue;
 3948              		.loc 1 2728 28
 3949 00a0 2E4A     		ldr	r2, .L259+20
 3950 00a2 7B68     		ldr	r3, [r7, #4]
 3951 00a4 1360     		str	r3, [r2]
2729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks
 3952              		.loc 1 2729 7
 3953 00a6 2FE0     		b	.L249
 3954              	.L251:
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 122


2730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* It is time to remove the item from the Blocked state. */
2737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 3955              		.loc 1 2737 15
 3956 00a8 BB68     		ldr	r3, [r7, #8]
 3957 00aa 0433     		adds	r3, r3, #4
 3958 00ac 1846     		mov	r0, r3
 3959 00ae FFF7FEFF 		bl	uxListRemove
2738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Is the task waiting on an event also?  If so remove
2740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it from the event list. */
2741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 3960              		.loc 1 2741 10
 3961 00b2 BB68     		ldr	r3, [r7, #8]
 3962 00b4 9B6A     		ldr	r3, [r3, #40]
 3963              		.loc 1 2741 8
 3964 00b6 002B     		cmp	r3, #0
 3965 00b8 04D0     		beq	.L252
2742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 3966              		.loc 1 2743 16
 3967 00ba BB68     		ldr	r3, [r7, #8]
 3968 00bc 1833     		adds	r3, r3, #24
 3969 00be 1846     		mov	r0, r3
 3970 00c0 FFF7FEFF 		bl	uxListRemove
 3971              	.L252:
2744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Place the unblocked task into the appropriate ready
2751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list. */
2752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 3972              		.loc 1 2752 6
 3973 00c4 BB68     		ldr	r3, [r7, #8]
 3974 00c6 DA6A     		ldr	r2, [r3, #44]
 3975 00c8 254B     		ldr	r3, .L259+24
 3976 00ca 1B68     		ldr	r3, [r3]
 3977 00cc 9A42     		cmp	r2, r3
 3978 00ce 03D9     		bls	.L253
 3979              		.loc 1 2752 6 is_stmt 0 discriminator 1
 3980 00d0 BB68     		ldr	r3, [r7, #8]
 3981 00d2 DB6A     		ldr	r3, [r3, #44]
 3982 00d4 224A     		ldr	r2, .L259+24
 3983 00d6 1360     		str	r3, [r2]
 3984              	.L253:
 3985              		.loc 1 2752 6 discriminator 3
 3986 00d8 BB68     		ldr	r3, [r7, #8]
 3987 00da DA6A     		ldr	r2, [r3, #44]
 3988 00dc 1346     		mov	r3, r2
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 123


 3989 00de 9B00     		lsls	r3, r3, #2
 3990 00e0 1344     		add	r3, r3, r2
 3991 00e2 9B00     		lsls	r3, r3, #2
 3992 00e4 1F4A     		ldr	r2, .L259+28
 3993 00e6 1A44     		add	r2, r2, r3
 3994 00e8 BB68     		ldr	r3, [r7, #8]
 3995 00ea 0433     		adds	r3, r3, #4
 3996 00ec 1946     		mov	r1, r3
 3997 00ee 1046     		mov	r0, r2
 3998 00f0 FFF7FEFF 		bl	vListInsertEnd
2753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task being unblocked cannot cause an immediate
2755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					context switch if preemption is turned off. */
2756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if (  configUSE_PREEMPTION == 1 )
2757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Preemption is on, but a context switch should
2759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						only be performed if the unblocked task has a
2760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority that is equal to or higher than the
2761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						currently executing task. */
2762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 3999              		.loc 1 2762 16 is_stmt 1 discriminator 3
 4000 00f4 BB68     		ldr	r3, [r7, #8]
 4001 00f6 DA6A     		ldr	r2, [r3, #44]
 4002              		.loc 1 2762 44 discriminator 3
 4003 00f8 1B4B     		ldr	r3, .L259+32
 4004 00fa 1B68     		ldr	r3, [r3]
 4005 00fc DB6A     		ldr	r3, [r3, #44]
 4006              		.loc 1 2762 9 discriminator 3
 4007 00fe 9A42     		cmp	r2, r3
 4008 0100 B8D3     		bcc	.L255
2763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xSwitchRequired = pdTRUE;
 4009              		.loc 1 2764 24
 4010 0102 0123     		movs	r3, #1
 4011 0104 7B61     		str	r3, [r7, #20]
2702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4012              		.loc 1 2702 7
 4013 0106 B5E7     		b	.L255
 4014              	.L249:
2765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
2767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif /* configUSE_PREEMPTION */
2772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
2777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		processing time (time slice) if preemption is on, and the application
2778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		writer has not explicitly turned time slicing off. */
2779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
 4015              		.loc 1 2781 8
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 124


 4016 0108 174B     		ldr	r3, .L259+32
 4017 010a 1B68     		ldr	r3, [r3]
 4018 010c DA6A     		ldr	r2, [r3, #44]
 4019 010e 1549     		ldr	r1, .L259+28
 4020 0110 1346     		mov	r3, r2
 4021 0112 9B00     		lsls	r3, r3, #2
 4022 0114 1344     		add	r3, r3, r2
 4023 0116 9B00     		lsls	r3, r3, #2
 4024 0118 0B44     		add	r3, r3, r1
 4025 011a 1B68     		ldr	r3, [r3]
 4026              		.loc 1 2781 6
 4027 011c 012B     		cmp	r3, #1
 4028 011e 07D9     		bls	.L256
2782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xSwitchRequired = pdTRUE;
 4029              		.loc 1 2783 21
 4030 0120 0123     		movs	r3, #1
 4031 0122 7B61     		str	r3, [r7, #20]
 4032 0124 04E0     		b	.L256
 4033              	.L245:
 4034              	.LBE176:
2784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
2795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxPendedTicks == ( UBaseType_t ) 0U )
2797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vApplicationTickHook();
2799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		++uxPendedTicks;
 4035              		.loc 1 2809 3
 4036 0126 114B     		ldr	r3, .L259+36
 4037 0128 1B68     		ldr	r3, [r3]
 4038 012a 0133     		adds	r3, r3, #1
 4039 012c 0F4A     		ldr	r2, .L259+36
 4040 012e 1360     		str	r3, [r2]
 4041              	.L256:
2810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		scheduler is locked. */
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 125


2813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationTickHook();
2816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_PREEMPTION == 1 )
2821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xYieldPending != pdFALSE )
 4042              		.loc 1 2822 21
 4043 0130 0F4B     		ldr	r3, .L259+40
 4044 0132 1B68     		ldr	r3, [r3]
 4045              		.loc 1 2822 5
 4046 0134 002B     		cmp	r3, #0
 4047 0136 01D0     		beq	.L257
2823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xSwitchRequired = pdTRUE;
 4048              		.loc 1 2824 20
 4049 0138 0123     		movs	r3, #1
 4050 013a 7B61     		str	r3, [r7, #20]
 4051              	.L257:
2825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_PREEMPTION */
2832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xSwitchRequired;
 4052              		.loc 1 2833 9
 4053 013c 7B69     		ldr	r3, [r7, #20]
2834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4054              		.loc 1 2834 1
 4055 013e 1846     		mov	r0, r3
 4056 0140 1837     		adds	r7, r7, #24
 4057              	.LCFI135:
 4058              		.cfi_def_cfa_offset 8
 4059 0142 BD46     		mov	sp, r7
 4060              	.LCFI136:
 4061              		.cfi_def_cfa_register 13
 4062              		@ sp needed
 4063 0144 80BD     		pop	{r7, pc}
 4064              	.L260:
 4065 0146 00BF     		.align	2
 4066              	.L259:
 4067 0148 00000000 		.word	uxSchedulerSuspended
 4068 014c 00000000 		.word	xTickCount
 4069 0150 00000000 		.word	pxDelayedTaskList
 4070 0154 00000000 		.word	pxOverflowDelayedTaskList
 4071 0158 00000000 		.word	xNumOfOverflows
 4072 015c 00000000 		.word	xNextTaskUnblockTime
 4073 0160 00000000 		.word	uxTopReadyPriority
 4074 0164 00000000 		.word	pxReadyTasksLists
 4075 0168 00000000 		.word	pxCurrentTCB
 4076 016c 00000000 		.word	uxPendedTicks
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 126


 4077 0170 00000000 		.word	xYieldPending
 4078              		.cfi_endproc
 4079              	.LFE30:
 4081              		.section	.text.vTaskSwitchContext,"ax",%progbits
 4082              		.align	1
 4083              		.global	vTaskSwitchContext
 4084              		.syntax unified
 4085              		.thumb
 4086              		.thumb_func
 4088              	vTaskSwitchContext:
 4089              	.LFB31:
2835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		getting set. */
2845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = xTask;
2852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
2859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
2871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xReturn;
2872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then set the calling task's hook. */
2874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
2875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pxTCB->pxTaskTag;
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 127


2881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTagFromISR( TaskHandle_t xTask )
2893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
2895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xReturn;
2896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
2897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then set the calling task's hook. */
2899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
2900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
2904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pxTCB->pxTaskTag;
2906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = pxCurrentTCB;
2926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = xTask;
2930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 128


2938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
2939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSwitchContext( void )
2948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4090              		.loc 1 2948 1
 4091              		.cfi_startproc
 4092              		@ args = 0, pretend = 0, frame = 16
 4093              		@ frame_needed = 1, uses_anonymous_args = 0
 4094              		@ link register save eliminated.
 4095 0000 80B4     		push	{r7}
 4096              	.LCFI137:
 4097              		.cfi_def_cfa_offset 4
 4098              		.cfi_offset 7, -4
 4099 0002 85B0     		sub	sp, sp, #20
 4100              	.LCFI138:
 4101              		.cfi_def_cfa_offset 24
 4102 0004 00AF     		add	r7, sp, #0
 4103              	.LCFI139:
 4104              		.cfi_def_cfa_register 7
2949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 4105              		.loc 1 2949 27
 4106 0006 274B     		ldr	r3, .L270
 4107 0008 1B68     		ldr	r3, [r3]
 4108              		.loc 1 2949 4
 4109 000a 002B     		cmp	r3, #0
 4110 000c 03D0     		beq	.L262
2950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		switch. */
2953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
 4111              		.loc 1 2953 17
 4112 000e 264B     		ldr	r3, .L270+4
 4113 0010 0122     		movs	r2, #1
 4114 0012 1A60     		str	r2, [r3]
2954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdFALSE;
2958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
2959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
2961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
2964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
2965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add the amount of time the task has been running to the
2969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			accumulated time so far.  The time the task started running was
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 129


2970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			stored in ulTaskSwitchedInTime.  Note that there is no overflow
2971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			protection here so count values are only valid until the timer
2972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			overflows.  The guard against negative values is to protect
2973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			against suspect run time stat counter implementations - which
2974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			are provided by the application, not the kernel. */
2975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulTotalRunTime > ulTaskSwitchedInTime )
2976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
2978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulTaskSwitchedInTime = ulTotalRunTime;
2984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
2986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check for stack overflow, if configured. */
2988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskCHECK_FOR_STACK_OVERFLOW();
2989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Before the currently running task is switched out, save its errno. */
2991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_POSIX_ERRNO == 1 )
2992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
2994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Select a new task to run using either the generic C or port
2998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		optimised asm code. */
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timer
3000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
3001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* After the new task is switched in, update the global errno. */
3003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_POSIX_ERRNO == 1 )
3004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
3006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
3012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to this task. */
3013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
3014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4115              		.loc 1 3017 1
 4116 0014 41E0     		b	.L269
 4117              	.L262:
2957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
 4118              		.loc 1 2957 17
 4119 0016 244B     		ldr	r3, .L270+4
 4120 0018 0022     		movs	r2, #0
 4121 001a 1A60     		str	r2, [r3]
 4122              	.LBB180:
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 130


2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 4123              		.loc 1 2999 3
 4124 001c 234B     		ldr	r3, .L270+8
 4125 001e 1B68     		ldr	r3, [r3]
 4126 0020 FB60     		str	r3, [r7, #12]
 4127 0022 10E0     		b	.L264
 4128              	.L267:
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 4129              		.loc 1 2999 3 is_stmt 0 discriminator 5
 4130 0024 FB68     		ldr	r3, [r7, #12]
 4131 0026 002B     		cmp	r3, #0
 4132 0028 0AD1     		bne	.L265
 4133              	.LBB181:
 4134              	.LBB182:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 4135              		.loc 2 195 2 is_stmt 1
 4136              		.syntax unified
 4137              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 4138 002a 4FF05003 			mov r3, #80												
 4139 002e 83F31188 		msr basepri, r3											
 4140 0032 BFF36F8F 		isb														
 4141 0036 BFF34F8F 		dsb														
 4142              	
 4143              	@ 0 "" 2
 4144              		.thumb
 4145              		.syntax unified
 4146 003a 7B60     		str	r3, [r7, #4]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 4147              		.loc 2 203 1
 4148 003c 00BF     		nop
 4149              	.L266:
 4150              	.LBE182:
 4151              	.LBE181:
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 4152              		.loc 1 2999 3 discriminator 1
 4153 003e FEE7     		b	.L266
 4154              	.L265:
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 4155              		.loc 1 2999 3 is_stmt 0 discriminator 3
 4156 0040 FB68     		ldr	r3, [r7, #12]
 4157 0042 013B     		subs	r3, r3, #1
 4158 0044 FB60     		str	r3, [r7, #12]
 4159              	.L264:
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 4160              		.loc 1 2999 3 discriminator 4
 4161 0046 1A49     		ldr	r1, .L270+12
 4162 0048 FA68     		ldr	r2, [r7, #12]
 4163 004a 1346     		mov	r3, r2
 4164 004c 9B00     		lsls	r3, r3, #2
 4165 004e 1344     		add	r3, r3, r2
 4166 0050 9B00     		lsls	r3, r3, #2
 4167 0052 0B44     		add	r3, r3, r1
 4168 0054 1B68     		ldr	r3, [r3]
 4169 0056 002B     		cmp	r3, #0
 4170 0058 E4D0     		beq	.L267
 4171              	.LBB183:
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 131


 4172              		.loc 1 2999 3 discriminator 6
 4173 005a FA68     		ldr	r2, [r7, #12]
 4174 005c 1346     		mov	r3, r2
 4175 005e 9B00     		lsls	r3, r3, #2
 4176 0060 1344     		add	r3, r3, r2
 4177 0062 9B00     		lsls	r3, r3, #2
 4178 0064 124A     		ldr	r2, .L270+12
 4179 0066 1344     		add	r3, r3, r2
 4180 0068 BB60     		str	r3, [r7, #8]
 4181 006a BB68     		ldr	r3, [r7, #8]
 4182 006c 5B68     		ldr	r3, [r3, #4]
 4183 006e 5A68     		ldr	r2, [r3, #4]
 4184 0070 BB68     		ldr	r3, [r7, #8]
 4185 0072 5A60     		str	r2, [r3, #4]
 4186 0074 BB68     		ldr	r3, [r7, #8]
 4187 0076 5A68     		ldr	r2, [r3, #4]
 4188 0078 BB68     		ldr	r3, [r7, #8]
 4189 007a 0833     		adds	r3, r3, #8
 4190 007c 9A42     		cmp	r2, r3
 4191 007e 04D1     		bne	.L268
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 4192              		.loc 1 2999 3 discriminator 7
 4193 0080 BB68     		ldr	r3, [r7, #8]
 4194 0082 5B68     		ldr	r3, [r3, #4]
 4195 0084 5A68     		ldr	r2, [r3, #4]
 4196 0086 BB68     		ldr	r3, [r7, #8]
 4197 0088 5A60     		str	r2, [r3, #4]
 4198              	.L268:
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 4199              		.loc 1 2999 3 discriminator 9
 4200 008a BB68     		ldr	r3, [r7, #8]
 4201 008c 5B68     		ldr	r3, [r3, #4]
 4202 008e DB68     		ldr	r3, [r3, #12]
 4203 0090 084A     		ldr	r2, .L270+16
 4204 0092 1360     		str	r3, [r2]
 4205              	.LBE183:
 4206 0094 054A     		ldr	r2, .L270+8
 4207 0096 FB68     		ldr	r3, [r7, #12]
 4208 0098 1360     		str	r3, [r2]
 4209              	.L269:
 4210              	.LBE180:
 4211              		.loc 1 3017 1 is_stmt 1
 4212 009a 00BF     		nop
 4213 009c 1437     		adds	r7, r7, #20
 4214              	.LCFI140:
 4215              		.cfi_def_cfa_offset 4
 4216 009e BD46     		mov	sp, r7
 4217              	.LCFI141:
 4218              		.cfi_def_cfa_register 13
 4219              		@ sp needed
 4220 00a0 80BC     		pop	{r7}
 4221              	.LCFI142:
 4222              		.cfi_restore 7
 4223              		.cfi_def_cfa_offset 0
 4224 00a2 7047     		bx	lr
 4225              	.L271:
 4226              		.align	2
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 132


 4227              	.L270:
 4228 00a4 00000000 		.word	uxSchedulerSuspended
 4229 00a8 00000000 		.word	xYieldPending
 4230 00ac 00000000 		.word	uxTopReadyPriority
 4231 00b0 00000000 		.word	pxReadyTasksLists
 4232 00b4 00000000 		.word	pxCurrentTCB
 4233              		.cfi_endproc
 4234              	.LFE31:
 4236              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 4237              		.align	1
 4238              		.global	vTaskPlaceOnEventList
 4239              		.syntax unified
 4240              		.thumb
 4241              		.thumb_func
 4243              	vTaskPlaceOnEventList:
 4244              	.LFB32:
3018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
3021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4245              		.loc 1 3021 1
 4246              		.cfi_startproc
 4247              		@ args = 0, pretend = 0, frame = 16
 4248              		@ frame_needed = 1, uses_anonymous_args = 0
 4249 0000 80B5     		push	{r7, lr}
 4250              	.LCFI143:
 4251              		.cfi_def_cfa_offset 8
 4252              		.cfi_offset 7, -8
 4253              		.cfi_offset 14, -4
 4254 0002 84B0     		sub	sp, sp, #16
 4255              	.LCFI144:
 4256              		.cfi_def_cfa_offset 24
 4257 0004 00AF     		add	r7, sp, #0
 4258              	.LCFI145:
 4259              		.cfi_def_cfa_register 7
 4260 0006 7860     		str	r0, [r7, #4]
 4261 0008 3960     		str	r1, [r7]
3022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 4262              		.loc 1 3022 2
 4263 000a 7B68     		ldr	r3, [r7, #4]
 4264 000c 002B     		cmp	r3, #0
 4265 000e 0AD1     		bne	.L273
 4266              	.LBB184:
 4267              	.LBB185:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 4268              		.loc 2 195 2
 4269              		.syntax unified
 4270              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 4271 0010 4FF05003 			mov r3, #80												
 4272 0014 83F31188 		msr basepri, r3											
 4273 0018 BFF36F8F 		isb														
 4274 001c BFF34F8F 		dsb														
 4275              	
 4276              	@ 0 "" 2
 4277              		.thumb
 4278              		.syntax unified
 4279 0020 FB60     		str	r3, [r7, #12]
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 133


 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 4280              		.loc 2 203 1
 4281 0022 00BF     		nop
 4282              	.L274:
 4283              	.LBE185:
 4284              	.LBE184:
 4285              		.loc 1 3022 2 discriminator 1
 4286 0024 FEE7     		b	.L274
 4287              	.L273:
3023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
3025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
3026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
3028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This is placed in the list in priority order so the highest priority task
3029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
3030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
3031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 4288              		.loc 1 3031 43
 4289 0026 074B     		ldr	r3, .L275
 4290 0028 1B68     		ldr	r3, [r3]
 4291              		.loc 1 3031 2
 4292 002a 1833     		adds	r3, r3, #24
 4293 002c 1946     		mov	r1, r3
 4294 002e 7868     		ldr	r0, [r7, #4]
 4295 0030 FFF7FEFF 		bl	vListInsert
3032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 4296              		.loc 1 3033 2
 4297 0034 0121     		movs	r1, #1
 4298 0036 3868     		ldr	r0, [r7]
 4299 0038 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
3034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4300              		.loc 1 3034 1
 4301 003c 00BF     		nop
 4302 003e 1037     		adds	r7, r7, #16
 4303              	.LCFI146:
 4304              		.cfi_def_cfa_offset 8
 4305 0040 BD46     		mov	sp, r7
 4306              	.LCFI147:
 4307              		.cfi_def_cfa_register 13
 4308              		@ sp needed
 4309 0042 80BD     		pop	{r7, pc}
 4310              	.L276:
 4311              		.align	2
 4312              	.L275:
 4313 0044 00000000 		.word	pxCurrentTCB
 4314              		.cfi_endproc
 4315              	.LFE32:
 4317              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 4318              		.align	1
 4319              		.global	vTaskPlaceOnUnorderedEventList
 4320              		.syntax unified
 4321              		.thumb
 4322              		.thumb_func
 4324              	vTaskPlaceOnUnorderedEventList:
 4325              	.LFB33:
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 134


3035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
3038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4326              		.loc 1 3038 1
 4327              		.cfi_startproc
 4328              		@ args = 0, pretend = 0, frame = 24
 4329              		@ frame_needed = 1, uses_anonymous_args = 0
 4330 0000 80B5     		push	{r7, lr}
 4331              	.LCFI148:
 4332              		.cfi_def_cfa_offset 8
 4333              		.cfi_offset 7, -8
 4334              		.cfi_offset 14, -4
 4335 0002 86B0     		sub	sp, sp, #24
 4336              	.LCFI149:
 4337              		.cfi_def_cfa_offset 32
 4338 0004 00AF     		add	r7, sp, #0
 4339              	.LCFI150:
 4340              		.cfi_def_cfa_register 7
 4341 0006 F860     		str	r0, [r7, #12]
 4342 0008 B960     		str	r1, [r7, #8]
 4343 000a 7A60     		str	r2, [r7, #4]
3039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 4344              		.loc 1 3039 2
 4345 000c FB68     		ldr	r3, [r7, #12]
 4346 000e 002B     		cmp	r3, #0
 4347 0010 0AD1     		bne	.L278
 4348              	.LBB186:
 4349              	.LBB187:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 4350              		.loc 2 195 2
 4351              		.syntax unified
 4352              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 4353 0012 4FF05003 			mov r3, #80												
 4354 0016 83F31188 		msr basepri, r3											
 4355 001a BFF36F8F 		isb														
 4356 001e BFF34F8F 		dsb														
 4357              	
 4358              	@ 0 "" 2
 4359              		.thumb
 4360              		.syntax unified
 4361 0022 7B61     		str	r3, [r7, #20]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 4362              		.loc 2 203 1
 4363 0024 00BF     		nop
 4364              	.L279:
 4365              	.LBE187:
 4366              	.LBE186:
 4367              		.loc 1 3039 2 discriminator 1
 4368 0026 FEE7     		b	.L279
 4369              	.L278:
3040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event groups implementation. */
3043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
 4370              		.loc 1 3043 2
 4371 0028 114B     		ldr	r3, .L282
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 135


 4372 002a 1B68     		ldr	r3, [r3]
 4373 002c 002B     		cmp	r3, #0
 4374 002e 0AD1     		bne	.L280
 4375              	.LBB188:
 4376              	.LBB189:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 4377              		.loc 2 195 2
 4378              		.syntax unified
 4379              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 4380 0030 4FF05003 			mov r3, #80												
 4381 0034 83F31188 		msr basepri, r3											
 4382 0038 BFF36F8F 		isb														
 4383 003c BFF34F8F 		dsb														
 4384              	
 4385              	@ 0 "" 2
 4386              		.thumb
 4387              		.syntax unified
 4388 0040 3B61     		str	r3, [r7, #16]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 4389              		.loc 2 203 1
 4390 0042 00BF     		nop
 4391              	.L281:
 4392              	.LBE189:
 4393              	.LBE188:
 4394              		.loc 1 3043 2 discriminator 2
 4395 0044 FEE7     		b	.L281
 4396              	.L280:
3044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
3046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event list item here as interrupts won't access the event list item of a
3047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	task that is not in the Blocked state. */
3048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
 4397              		.loc 1 3048 2
 4398 0046 0B4B     		ldr	r3, .L282+4
 4399 0048 1B68     		ldr	r3, [r3]
 4400 004a BA68     		ldr	r2, [r7, #8]
 4401 004c 42F00042 		orr	r2, r2, #-2147483648
 4402 0050 9A61     		str	r2, [r3, #24]
3049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
3051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
3052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event group implementation - and interrupts don't access event groups
3053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
3054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the task level). */
3055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 4403              		.loc 1 3055 46
 4404 0052 084B     		ldr	r3, .L282+4
 4405 0054 1B68     		ldr	r3, [r3]
 4406              		.loc 1 3055 2
 4407 0056 1833     		adds	r3, r3, #24
 4408 0058 1946     		mov	r1, r3
 4409 005a F868     		ldr	r0, [r7, #12]
 4410 005c FFF7FEFF 		bl	vListInsertEnd
3056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 4411              		.loc 1 3057 2
 4412 0060 0121     		movs	r1, #1
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 136


 4413 0062 7868     		ldr	r0, [r7, #4]
 4414 0064 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
3058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4415              		.loc 1 3058 1
 4416 0068 00BF     		nop
 4417 006a 1837     		adds	r7, r7, #24
 4418              	.LCFI151:
 4419              		.cfi_def_cfa_offset 8
 4420 006c BD46     		mov	sp, r7
 4421              	.LCFI152:
 4422              		.cfi_def_cfa_register 13
 4423              		@ sp needed
 4424 006e 80BD     		pop	{r7, pc}
 4425              	.L283:
 4426              		.align	2
 4427              	.L282:
 4428 0070 00000000 		.word	uxSchedulerSuspended
 4429 0074 00000000 		.word	pxCurrentTCB
 4430              		.cfi_endproc
 4431              	.LFE33:
 4433              		.section	.text.vTaskPlaceOnEventListRestricted,"ax",%progbits
 4434              		.align	1
 4435              		.global	vTaskPlaceOnEventListRestricted
 4436              		.syntax unified
 4437              		.thumb
 4438              		.thumb_func
 4440              	vTaskPlaceOnEventListRestricted:
 4441              	.LFB34:
3059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TIMERS == 1 )
3062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const B
3064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 4442              		.loc 1 3064 2
 4443              		.cfi_startproc
 4444              		@ args = 0, pretend = 0, frame = 24
 4445              		@ frame_needed = 1, uses_anonymous_args = 0
 4446 0000 80B5     		push	{r7, lr}
 4447              	.LCFI153:
 4448              		.cfi_def_cfa_offset 8
 4449              		.cfi_offset 7, -8
 4450              		.cfi_offset 14, -4
 4451 0002 86B0     		sub	sp, sp, #24
 4452              	.LCFI154:
 4453              		.cfi_def_cfa_offset 32
 4454 0004 00AF     		add	r7, sp, #0
 4455              	.LCFI155:
 4456              		.cfi_def_cfa_register 7
 4457 0006 F860     		str	r0, [r7, #12]
 4458 0008 B960     		str	r1, [r7, #8]
 4459 000a 7A60     		str	r2, [r7, #4]
3065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxEventList );
 4460              		.loc 1 3065 3
 4461 000c FB68     		ldr	r3, [r7, #12]
 4462 000e 002B     		cmp	r3, #0
 4463 0010 0AD1     		bne	.L285
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 137


 4464              	.LBB190:
 4465              	.LBB191:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 4466              		.loc 2 195 2
 4467              		.syntax unified
 4468              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 4469 0012 4FF05003 			mov r3, #80												
 4470 0016 83F31188 		msr basepri, r3											
 4471 001a BFF36F8F 		isb														
 4472 001e BFF34F8F 		dsb														
 4473              	
 4474              	@ 0 "" 2
 4475              		.thumb
 4476              		.syntax unified
 4477 0022 7B61     		str	r3, [r7, #20]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 4478              		.loc 2 203 1
 4479 0024 00BF     		nop
 4480              	.L286:
 4481              	.LBE191:
 4482              	.LBE190:
 4483              		.loc 1 3065 3 discriminator 1
 4484 0026 FEE7     		b	.L286
 4485              	.L285:
3066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function should not be called by application code hence the
3068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
3069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
3070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should be called with the scheduler suspended. */
3071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
3074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		In this case it is assume that this is the only task that is going to
3075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
3076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		can be used in place of vListInsert. */
3077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 4486              		.loc 1 3077 47
 4487 0028 0A4B     		ldr	r3, .L288
 4488 002a 1B68     		ldr	r3, [r3]
 4489              		.loc 1 3077 3
 4490 002c 1833     		adds	r3, r3, #24
 4491 002e 1946     		mov	r1, r3
 4492 0030 F868     		ldr	r0, [r7, #12]
 4493 0032 FFF7FEFF 		bl	vListInsertEnd
3078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the task should block indefinitely then set the block time to a
3080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value that will be recognised as an indefinite delay inside the
3081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList() function. */
3082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xWaitIndefinitely != pdFALSE )
 4494              		.loc 1 3082 5
 4495 0036 7B68     		ldr	r3, [r7, #4]
 4496 0038 002B     		cmp	r3, #0
 4497 003a 02D0     		beq	.L287
3083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTicksToWait = portMAX_DELAY;
 4498              		.loc 1 3084 17
 4499 003c 4FF0FF33 		mov	r3, #-1
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 138


 4500 0040 BB60     		str	r3, [r7, #8]
 4501              	.L287:
3085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
3088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 4502              		.loc 1 3088 3
 4503 0042 7968     		ldr	r1, [r7, #4]
 4504 0044 B868     		ldr	r0, [r7, #8]
 4505 0046 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
3089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4506              		.loc 1 3089 2
 4507 004a 00BF     		nop
 4508 004c 1837     		adds	r7, r7, #24
 4509              	.LCFI156:
 4510              		.cfi_def_cfa_offset 8
 4511 004e BD46     		mov	sp, r7
 4512              	.LCFI157:
 4513              		.cfi_def_cfa_register 13
 4514              		@ sp needed
 4515 0050 80BD     		pop	{r7, pc}
 4516              	.L289:
 4517 0052 00BF     		.align	2
 4518              	.L288:
 4519 0054 00000000 		.word	pxCurrentTCB
 4520              		.cfi_endproc
 4521              	.LFE34:
 4523              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 4524              		.align	1
 4525              		.global	xTaskRemoveFromEventList
 4526              		.syntax unified
 4527              		.thumb
 4528              		.thumb_func
 4530              	xTaskRemoveFromEventList:
 4531              	.LFB35:
3090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TIMERS */
3092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
3095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4532              		.loc 1 3095 1
 4533              		.cfi_startproc
 4534              		@ args = 0, pretend = 0, frame = 24
 4535              		@ frame_needed = 1, uses_anonymous_args = 0
 4536 0000 80B5     		push	{r7, lr}
 4537              	.LCFI158:
 4538              		.cfi_def_cfa_offset 8
 4539              		.cfi_offset 7, -8
 4540              		.cfi_offset 14, -4
 4541 0002 86B0     		sub	sp, sp, #24
 4542              	.LCFI159:
 4543              		.cfi_def_cfa_offset 32
 4544 0004 00AF     		add	r7, sp, #0
 4545              	.LCFI160:
 4546              		.cfi_def_cfa_register 7
 4547 0006 7860     		str	r0, [r7, #4]
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 139


3096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
3097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
3098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
3100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	called from a critical section within an ISR. */
3101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
3103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
3104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the delayed list, and add it to the ready list.
3105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	If an event is for a queue that is locked then this function will never
3107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
3108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	means exclusive access to the event list is guaranteed here.
3109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This function assumes that a check has already been made to ensure that
3111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxEventList is not empty. */
3112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this 
 4548              		.loc 1 3112 19
 4549 0008 7B68     		ldr	r3, [r7, #4]
 4550 000a DB68     		ldr	r3, [r3, #12]
 4551              		.loc 1 3112 17
 4552 000c DB68     		ldr	r3, [r3, #12]
 4553 000e 3B61     		str	r3, [r7, #16]
3113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 4554              		.loc 1 3113 2
 4555 0010 3B69     		ldr	r3, [r7, #16]
 4556 0012 002B     		cmp	r3, #0
 4557 0014 0AD1     		bne	.L291
 4558              	.LBB192:
 4559              	.LBB193:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 4560              		.loc 2 195 2
 4561              		.syntax unified
 4562              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 4563 0016 4FF05003 			mov r3, #80												
 4564 001a 83F31188 		msr basepri, r3											
 4565 001e BFF36F8F 		isb														
 4566 0022 BFF34F8F 		dsb														
 4567              	
 4568              	@ 0 "" 2
 4569              		.thumb
 4570              		.syntax unified
 4571 0026 FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 4572              		.loc 2 203 1
 4573 0028 00BF     		nop
 4574              	.L292:
 4575              	.LBE193:
 4576              	.LBE192:
 4577              		.loc 1 3113 2 discriminator 1
 4578 002a FEE7     		b	.L292
 4579              	.L291:
3114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 4580              		.loc 1 3114 11
 4581 002c 3B69     		ldr	r3, [r7, #16]
 4582 002e 1833     		adds	r3, r3, #24
 4583 0030 1846     		mov	r0, r3
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 140


 4584 0032 FFF7FEFF 		bl	uxListRemove
3115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 4585              		.loc 1 3116 27
 4586 0036 1E4B     		ldr	r3, .L299
 4587 0038 1B68     		ldr	r3, [r3]
 4588              		.loc 1 3116 4
 4589 003a 002B     		cmp	r3, #0
 4590 003c 1DD1     		bne	.L293
3117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 4591              		.loc 1 3118 12
 4592 003e 3B69     		ldr	r3, [r7, #16]
 4593 0040 0433     		adds	r3, r3, #4
 4594 0042 1846     		mov	r0, r3
 4595 0044 FFF7FEFF 		bl	uxListRemove
3119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 4596              		.loc 1 3119 3
 4597 0048 3B69     		ldr	r3, [r7, #16]
 4598 004a DA6A     		ldr	r2, [r3, #44]
 4599 004c 194B     		ldr	r3, .L299+4
 4600 004e 1B68     		ldr	r3, [r3]
 4601 0050 9A42     		cmp	r2, r3
 4602 0052 03D9     		bls	.L294
 4603              		.loc 1 3119 3 is_stmt 0 discriminator 1
 4604 0054 3B69     		ldr	r3, [r7, #16]
 4605 0056 DB6A     		ldr	r3, [r3, #44]
 4606 0058 164A     		ldr	r2, .L299+4
 4607 005a 1360     		str	r3, [r2]
 4608              	.L294:
 4609              		.loc 1 3119 3 discriminator 3
 4610 005c 3B69     		ldr	r3, [r7, #16]
 4611 005e DA6A     		ldr	r2, [r3, #44]
 4612 0060 1346     		mov	r3, r2
 4613 0062 9B00     		lsls	r3, r3, #2
 4614 0064 1344     		add	r3, r3, r2
 4615 0066 9B00     		lsls	r3, r3, #2
 4616 0068 134A     		ldr	r2, .L299+8
 4617 006a 1A44     		add	r2, r2, r3
 4618 006c 3B69     		ldr	r3, [r7, #16]
 4619 006e 0433     		adds	r3, r3, #4
 4620 0070 1946     		mov	r1, r3
 4621 0072 1046     		mov	r0, r2
 4622 0074 FFF7FEFF 		bl	vListInsertEnd
 4623 0078 05E0     		b	.L295
 4624              	.L293:
3120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_TICKLESS_IDLE != 0 )
3122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If a task is blocked on a kernel object then xNextTaskUnblockTime
3124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			might be set to the blocked task's time out time.  If the task is
3125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			unblocked for a reason other than a timeout xNextTaskUnblockTime is
3126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			normally left unchanged, because it is automatically reset to a new
3127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			value when the tick count equals xNextTaskUnblockTime.  However if
3128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			tickless idling is used it might be more important to enter sleep mode
3129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			at the earliest possible time - so reset xNextTaskUnblockTime here to
3130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ensure it is updated at the earliest possible time. */
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 141


3131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvResetNextTaskUnblockTime();
3132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
3138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pending until the scheduler is resumed. */
3139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 4625              		.loc 1 3139 3 is_stmt 1
 4626 007a 3B69     		ldr	r3, [r7, #16]
 4627 007c 1833     		adds	r3, r3, #24
 4628 007e 1946     		mov	r1, r3
 4629 0080 0E48     		ldr	r0, .L299+12
 4630 0082 FFF7FEFF 		bl	vListInsertEnd
 4631              	.L295:
3140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 4632              		.loc 1 3142 20
 4633 0086 3B69     		ldr	r3, [r7, #16]
 4634 0088 DA6A     		ldr	r2, [r3, #44]
 4635              		.loc 1 3142 47
 4636 008a 0D4B     		ldr	r3, .L299+16
 4637 008c 1B68     		ldr	r3, [r3]
 4638 008e DB6A     		ldr	r3, [r3, #44]
 4639              		.loc 1 3142 4
 4640 0090 9A42     		cmp	r2, r3
 4641 0092 05D9     		bls	.L296
3143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return true if the task removed from the event list has a higher
3145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
3146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should force a context switch now. */
3147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdTRUE;
 4642              		.loc 1 3147 11
 4643 0094 0123     		movs	r3, #1
 4644 0096 7B61     		str	r3, [r7, #20]
3148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
3150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
3151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
 4645              		.loc 1 3151 17
 4646 0098 0A4B     		ldr	r3, .L299+20
 4647 009a 0122     		movs	r2, #1
 4648 009c 1A60     		str	r2, [r3]
 4649 009e 01E0     		b	.L297
 4650              	.L296:
3152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdFALSE;
 4651              		.loc 1 3155 11
 4652 00a0 0023     		movs	r3, #0
 4653 00a2 7B61     		str	r3, [r7, #20]
 4654              	.L297:
3156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 142


3158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
 4655              		.loc 1 3158 9
 4656 00a4 7B69     		ldr	r3, [r7, #20]
3159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4657              		.loc 1 3159 1
 4658 00a6 1846     		mov	r0, r3
 4659 00a8 1837     		adds	r7, r7, #24
 4660              	.LCFI161:
 4661              		.cfi_def_cfa_offset 8
 4662 00aa BD46     		mov	sp, r7
 4663              	.LCFI162:
 4664              		.cfi_def_cfa_register 13
 4665              		@ sp needed
 4666 00ac 80BD     		pop	{r7, pc}
 4667              	.L300:
 4668 00ae 00BF     		.align	2
 4669              	.L299:
 4670 00b0 00000000 		.word	uxSchedulerSuspended
 4671 00b4 00000000 		.word	uxTopReadyPriority
 4672 00b8 00000000 		.word	pxReadyTasksLists
 4673 00bc 00000000 		.word	xPendingReadyList
 4674 00c0 00000000 		.word	pxCurrentTCB
 4675 00c4 00000000 		.word	xYieldPending
 4676              		.cfi_endproc
 4677              	.LFE35:
 4679              		.section	.text.vTaskRemoveFromUnorderedEventList,"ax",%progbits
 4680              		.align	1
 4681              		.global	vTaskRemoveFromUnorderedEventList
 4682              		.syntax unified
 4683              		.thumb
 4684              		.thumb_func
 4686              	vTaskRemoveFromUnorderedEventList:
 4687              	.LFB36:
3160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
3163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4688              		.loc 1 3163 1
 4689              		.cfi_startproc
 4690              		@ args = 0, pretend = 0, frame = 24
 4691              		@ frame_needed = 1, uses_anonymous_args = 0
 4692 0000 80B5     		push	{r7, lr}
 4693              	.LCFI163:
 4694              		.cfi_def_cfa_offset 8
 4695              		.cfi_offset 7, -8
 4696              		.cfi_offset 14, -4
 4697 0002 86B0     		sub	sp, sp, #24
 4698              	.LCFI164:
 4699              		.cfi_def_cfa_offset 32
 4700 0004 00AF     		add	r7, sp, #0
 4701              	.LCFI165:
 4702              		.cfi_def_cfa_register 7
 4703 0006 7860     		str	r0, [r7, #4]
 4704 0008 3960     		str	r1, [r7]
3164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
3165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 143


3167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event flags implementation. */
3168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
 4705              		.loc 1 3168 2
 4706 000a 294B     		ldr	r3, .L309
 4707 000c 1B68     		ldr	r3, [r3]
 4708 000e 002B     		cmp	r3, #0
 4709 0010 0AD1     		bne	.L302
 4710              	.LBB194:
 4711              	.LBB195:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 4712              		.loc 2 195 2
 4713              		.syntax unified
 4714              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 4715 0012 4FF05003 			mov r3, #80												
 4716 0016 83F31188 		msr basepri, r3											
 4717 001a BFF36F8F 		isb														
 4718 001e BFF34F8F 		dsb														
 4719              	
 4720              	@ 0 "" 2
 4721              		.thumb
 4722              		.syntax unified
 4723 0022 3B61     		str	r3, [r7, #16]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 4724              		.loc 2 203 1
 4725 0024 00BF     		nop
 4726              	.L303:
 4727              	.LBE195:
 4728              	.LBE194:
 4729              		.loc 1 3168 2 discriminator 1
 4730 0026 FEE7     		b	.L303
 4731              	.L302:
3169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the new item value in the event list. */
3171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 4732              		.loc 1 3171 2
 4733 0028 3B68     		ldr	r3, [r7]
 4734 002a 43F00042 		orr	r2, r3, #-2147483648
 4735 002e 7B68     		ldr	r3, [r7, #4]
 4736 0030 1A60     		str	r2, [r3]
3172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
3174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event flags. */
3175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this 
 4737              		.loc 1 3175 17
 4738 0032 7B68     		ldr	r3, [r7, #4]
 4739 0034 DB68     		ldr	r3, [r3, #12]
 4740 0036 7B61     		str	r3, [r7, #20]
3176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 4741              		.loc 1 3176 2
 4742 0038 7B69     		ldr	r3, [r7, #20]
 4743 003a 002B     		cmp	r3, #0
 4744 003c 0AD1     		bne	.L304
 4745              	.LBB196:
 4746              	.LBB197:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 4747              		.loc 2 195 2
 4748              		.syntax unified
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 144


 4749              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 4750 003e 4FF05003 			mov r3, #80												
 4751 0042 83F31188 		msr basepri, r3											
 4752 0046 BFF36F8F 		isb														
 4753 004a BFF34F8F 		dsb														
 4754              	
 4755              	@ 0 "" 2
 4756              		.thumb
 4757              		.syntax unified
 4758 004e FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 4759              		.loc 2 203 1
 4760 0050 00BF     		nop
 4761              	.L305:
 4762              	.LBE197:
 4763              	.LBE196:
 4764              		.loc 1 3176 2 discriminator 2
 4765 0052 FEE7     		b	.L305
 4766              	.L304:
3177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 4767              		.loc 1 3177 11
 4768 0054 7868     		ldr	r0, [r7, #4]
 4769 0056 FFF7FEFF 		bl	uxListRemove
3178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
3180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
3181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	lists. */
3182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 4770              		.loc 1 3182 11
 4771 005a 7B69     		ldr	r3, [r7, #20]
 4772 005c 0433     		adds	r3, r3, #4
 4773 005e 1846     		mov	r0, r3
 4774 0060 FFF7FEFF 		bl	uxListRemove
3183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 4775              		.loc 1 3183 2
 4776 0064 7B69     		ldr	r3, [r7, #20]
 4777 0066 DA6A     		ldr	r2, [r3, #44]
 4778 0068 124B     		ldr	r3, .L309+4
 4779 006a 1B68     		ldr	r3, [r3]
 4780 006c 9A42     		cmp	r2, r3
 4781 006e 03D9     		bls	.L306
 4782              		.loc 1 3183 2 is_stmt 0 discriminator 1
 4783 0070 7B69     		ldr	r3, [r7, #20]
 4784 0072 DB6A     		ldr	r3, [r3, #44]
 4785 0074 0F4A     		ldr	r2, .L309+4
 4786 0076 1360     		str	r3, [r2]
 4787              	.L306:
 4788              		.loc 1 3183 2 discriminator 3
 4789 0078 7B69     		ldr	r3, [r7, #20]
 4790 007a DA6A     		ldr	r2, [r3, #44]
 4791 007c 1346     		mov	r3, r2
 4792 007e 9B00     		lsls	r3, r3, #2
 4793 0080 1344     		add	r3, r3, r2
 4794 0082 9B00     		lsls	r3, r3, #2
 4795 0084 0C4A     		ldr	r2, .L309+8
 4796 0086 1A44     		add	r2, r2, r3
 4797 0088 7B69     		ldr	r3, [r7, #20]
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 145


 4798 008a 0433     		adds	r3, r3, #4
 4799 008c 1946     		mov	r1, r3
 4800 008e 1046     		mov	r0, r2
 4801 0090 FFF7FEFF 		bl	vListInsertEnd
3184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 4802              		.loc 1 3185 20 is_stmt 1 discriminator 3
 4803 0094 7B69     		ldr	r3, [r7, #20]
 4804 0096 DA6A     		ldr	r2, [r3, #44]
 4805              		.loc 1 3185 47 discriminator 3
 4806 0098 084B     		ldr	r3, .L309+12
 4807 009a 1B68     		ldr	r3, [r3]
 4808 009c DB6A     		ldr	r3, [r3, #44]
 4809              		.loc 1 3185 4 discriminator 3
 4810 009e 9A42     		cmp	r2, r3
 4811 00a0 02D9     		bls	.L308
3186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The unblocked task has a priority above that of the calling task, so
3188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		a context switch is required.  This function is called with the
3189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		scheduler suspended so xYieldPending is set so the context switch
3190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		occurs immediately that the scheduler is resumed (unsuspended). */
3191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
 4812              		.loc 1 3191 17
 4813 00a2 074B     		ldr	r3, .L309+16
 4814 00a4 0122     		movs	r2, #1
 4815 00a6 1A60     		str	r2, [r3]
 4816              	.L308:
3192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4817              		.loc 1 3193 1
 4818 00a8 00BF     		nop
 4819 00aa 1837     		adds	r7, r7, #24
 4820              	.LCFI166:
 4821              		.cfi_def_cfa_offset 8
 4822 00ac BD46     		mov	sp, r7
 4823              	.LCFI167:
 4824              		.cfi_def_cfa_register 13
 4825              		@ sp needed
 4826 00ae 80BD     		pop	{r7, pc}
 4827              	.L310:
 4828              		.align	2
 4829              	.L309:
 4830 00b0 00000000 		.word	uxSchedulerSuspended
 4831 00b4 00000000 		.word	uxTopReadyPriority
 4832 00b8 00000000 		.word	pxReadyTasksLists
 4833 00bc 00000000 		.word	pxCurrentTCB
 4834 00c0 00000000 		.word	xYieldPending
 4835              		.cfi_endproc
 4836              	.LFE36:
 4838              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 4839              		.align	1
 4840              		.global	vTaskSetTimeOutState
 4841              		.syntax unified
 4842              		.thumb
 4843              		.thumb_func
 4845              	vTaskSetTimeOutState:
 4846              	.LFB37:
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 146


3194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4847              		.loc 1 3197 1
 4848              		.cfi_startproc
 4849              		@ args = 0, pretend = 0, frame = 16
 4850              		@ frame_needed = 1, uses_anonymous_args = 0
 4851 0000 80B5     		push	{r7, lr}
 4852              	.LCFI168:
 4853              		.cfi_def_cfa_offset 8
 4854              		.cfi_offset 7, -8
 4855              		.cfi_offset 14, -4
 4856 0002 84B0     		sub	sp, sp, #16
 4857              	.LCFI169:
 4858              		.cfi_def_cfa_offset 24
 4859 0004 00AF     		add	r7, sp, #0
 4860              	.LCFI170:
 4861              		.cfi_def_cfa_register 7
 4862 0006 7860     		str	r0, [r7, #4]
3198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 4863              		.loc 1 3198 2
 4864 0008 7B68     		ldr	r3, [r7, #4]
 4865 000a 002B     		cmp	r3, #0
 4866 000c 0AD1     		bne	.L312
 4867              	.LBB198:
 4868              	.LBB199:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 4869              		.loc 2 195 2
 4870              		.syntax unified
 4871              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 4872 000e 4FF05003 			mov r3, #80												
 4873 0012 83F31188 		msr basepri, r3											
 4874 0016 BFF36F8F 		isb														
 4875 001a BFF34F8F 		dsb														
 4876              	
 4877              	@ 0 "" 2
 4878              		.thumb
 4879              		.syntax unified
 4880 001e FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 4881              		.loc 2 203 1
 4882 0020 00BF     		nop
 4883              	.L313:
 4884              	.LBE199:
 4885              	.LBE198:
 4886              		.loc 1 3198 2 discriminator 1
 4887 0022 FEE7     		b	.L313
 4888              	.L312:
3199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 4889              		.loc 1 3199 2
 4890 0024 FFF7FEFF 		bl	vPortEnterCritical
3200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xOverflowCount = xNumOfOverflows;
 4891              		.loc 1 3201 29
 4892 0028 064B     		ldr	r3, .L314
 4893 002a 1A68     		ldr	r2, [r3]
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 147


 4894 002c 7B68     		ldr	r3, [r7, #4]
 4895 002e 1A60     		str	r2, [r3]
3202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
 4896              		.loc 1 3202 30
 4897 0030 054B     		ldr	r3, .L314+4
 4898 0032 1A68     		ldr	r2, [r3]
 4899 0034 7B68     		ldr	r3, [r7, #4]
 4900 0036 5A60     		str	r2, [r3, #4]
3203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 4901              		.loc 1 3204 2
 4902 0038 FFF7FEFF 		bl	vPortExitCritical
3205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4903              		.loc 1 3205 1
 4904 003c 00BF     		nop
 4905 003e 1037     		adds	r7, r7, #16
 4906              	.LCFI171:
 4907              		.cfi_def_cfa_offset 8
 4908 0040 BD46     		mov	sp, r7
 4909              	.LCFI172:
 4910              		.cfi_def_cfa_register 13
 4911              		@ sp needed
 4912 0042 80BD     		pop	{r7, pc}
 4913              	.L315:
 4914              		.align	2
 4915              	.L314:
 4916 0044 00000000 		.word	xNumOfOverflows
 4917 0048 00000000 		.word	xTickCount
 4918              		.cfi_endproc
 4919              	.LFE37:
 4921              		.section	.text.vTaskInternalSetTimeOutState,"ax",%progbits
 4922              		.align	1
 4923              		.global	vTaskInternalSetTimeOutState
 4924              		.syntax unified
 4925              		.thumb
 4926              		.thumb_func
 4928              	vTaskInternalSetTimeOutState:
 4929              	.LFB38:
3206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
3209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4930              		.loc 1 3209 1
 4931              		.cfi_startproc
 4932              		@ args = 0, pretend = 0, frame = 8
 4933              		@ frame_needed = 1, uses_anonymous_args = 0
 4934              		@ link register save eliminated.
 4935 0000 80B4     		push	{r7}
 4936              	.LCFI173:
 4937              		.cfi_def_cfa_offset 4
 4938              		.cfi_offset 7, -4
 4939 0002 83B0     		sub	sp, sp, #12
 4940              	.LCFI174:
 4941              		.cfi_def_cfa_offset 16
 4942 0004 00AF     		add	r7, sp, #0
 4943              	.LCFI175:
 4944              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 148


 4945 0006 7860     		str	r0, [r7, #4]
3210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* For internal use only as it does not use a critical section. */
3211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
 4946              		.loc 1 3211 28
 4947 0008 064B     		ldr	r3, .L317
 4948 000a 1A68     		ldr	r2, [r3]
 4949 000c 7B68     		ldr	r3, [r7, #4]
 4950 000e 1A60     		str	r2, [r3]
3212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 4951              		.loc 1 3212 29
 4952 0010 054B     		ldr	r3, .L317+4
 4953 0012 1A68     		ldr	r2, [r3]
 4954 0014 7B68     		ldr	r3, [r7, #4]
 4955 0016 5A60     		str	r2, [r3, #4]
3213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4956              		.loc 1 3213 1
 4957 0018 00BF     		nop
 4958 001a 0C37     		adds	r7, r7, #12
 4959              	.LCFI176:
 4960              		.cfi_def_cfa_offset 4
 4961 001c BD46     		mov	sp, r7
 4962              	.LCFI177:
 4963              		.cfi_def_cfa_register 13
 4964              		@ sp needed
 4965 001e 80BC     		pop	{r7}
 4966              	.LCFI178:
 4967              		.cfi_restore 7
 4968              		.cfi_def_cfa_offset 0
 4969 0020 7047     		bx	lr
 4970              	.L318:
 4971 0022 00BF     		.align	2
 4972              	.L317:
 4973 0024 00000000 		.word	xNumOfOverflows
 4974 0028 00000000 		.word	xTickCount
 4975              		.cfi_endproc
 4976              	.LFE38:
 4978              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 4979              		.align	1
 4980              		.global	xTaskCheckForTimeOut
 4981              		.syntax unified
 4982              		.thumb
 4983              		.thumb_func
 4985              	xTaskCheckForTimeOut:
 4986              	.LFB39:
3214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
3217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4987              		.loc 1 3217 1
 4988              		.cfi_startproc
 4989              		@ args = 0, pretend = 0, frame = 32
 4990              		@ frame_needed = 1, uses_anonymous_args = 0
 4991 0000 80B5     		push	{r7, lr}
 4992              	.LCFI179:
 4993              		.cfi_def_cfa_offset 8
 4994              		.cfi_offset 7, -8
 4995              		.cfi_offset 14, -4
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 149


 4996 0002 88B0     		sub	sp, sp, #32
 4997              	.LCFI180:
 4998              		.cfi_def_cfa_offset 40
 4999 0004 00AF     		add	r7, sp, #0
 5000              	.LCFI181:
 5001              		.cfi_def_cfa_register 7
 5002 0006 7860     		str	r0, [r7, #4]
 5003 0008 3960     		str	r1, [r7]
3218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
3219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 5004              		.loc 1 3220 2
 5005 000a 7B68     		ldr	r3, [r7, #4]
 5006 000c 002B     		cmp	r3, #0
 5007 000e 0AD1     		bne	.L320
 5008              	.LBB200:
 5009              	.LBB201:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 5010              		.loc 2 195 2
 5011              		.syntax unified
 5012              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 5013 0010 4FF05003 			mov r3, #80												
 5014 0014 83F31188 		msr basepri, r3											
 5015 0018 BFF36F8F 		isb														
 5016 001c BFF34F8F 		dsb														
 5017              	
 5018              	@ 0 "" 2
 5019              		.thumb
 5020              		.syntax unified
 5021 0020 3B61     		str	r3, [r7, #16]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 5022              		.loc 2 203 1
 5023 0022 00BF     		nop
 5024              	.L321:
 5025              	.LBE201:
 5026              	.LBE200:
 5027              		.loc 1 3220 2 discriminator 1
 5028 0024 FEE7     		b	.L321
 5029              	.L320:
3221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
 5030              		.loc 1 3221 2
 5031 0026 3B68     		ldr	r3, [r7]
 5032 0028 002B     		cmp	r3, #0
 5033 002a 0AD1     		bne	.L322
 5034              	.LBB202:
 5035              	.LBB203:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 5036              		.loc 2 195 2
 5037              		.syntax unified
 5038              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 5039 002c 4FF05003 			mov r3, #80												
 5040 0030 83F31188 		msr basepri, r3											
 5041 0034 BFF36F8F 		isb														
 5042 0038 BFF34F8F 		dsb														
 5043              	
 5044              	@ 0 "" 2
 5045              		.thumb
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 150


 5046              		.syntax unified
 5047 003c FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 5048              		.loc 2 203 1
 5049 003e 00BF     		nop
 5050              	.L323:
 5051              	.LBE203:
 5052              	.LBE202:
 5053              		.loc 1 3221 2 discriminator 2
 5054 0040 FEE7     		b	.L323
 5055              	.L322:
3222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 5056              		.loc 1 3223 2
 5057 0042 FFF7FEFF 		bl	vPortEnterCritical
 5058              	.LBB204:
3224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
3226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
 5059              		.loc 1 3226 20
 5060 0046 1D4B     		ldr	r3, .L329
 5061 0048 1B68     		ldr	r3, [r3]
 5062 004a BB61     		str	r3, [r7, #24]
3227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 5063              		.loc 1 3227 62
 5064 004c 7B68     		ldr	r3, [r7, #4]
 5065 004e 5B68     		ldr	r3, [r3, #4]
 5066              		.loc 1 3227 20
 5067 0050 BA69     		ldr	r2, [r7, #24]
 5068 0052 D31A     		subs	r3, r2, r3
 5069 0054 7B61     		str	r3, [r7, #20]
3228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( INCLUDE_xTaskAbortDelay == 1 )
3230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
3231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The delay was aborted, which is not the same as a time out,
3233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				but has the same result. */
3234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucDelayAborted = pdFALSE;
3235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
3236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
 5070              		.loc 1 3241 8
 5071 0056 3B68     		ldr	r3, [r7]
 5072 0058 1B68     		ldr	r3, [r3]
 5073              		.loc 1 3241 6
 5074 005a B3F1FF3F 		cmp	r3, #-1
 5075 005e 02D1     		bne	.L324
3242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
3244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				specified is the maximum block time then the task should block
3245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				indefinitely, and therefore never time out. */
3246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
 5076              		.loc 1 3246 13
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 151


 5077 0060 0023     		movs	r3, #0
 5078 0062 FB61     		str	r3, [r7, #28]
 5079 0064 23E0     		b	.L325
 5080              	.L324:
3247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
 5081              		.loc 1 3251 37
 5082 0066 7B68     		ldr	r3, [r7, #4]
 5083 0068 1A68     		ldr	r2, [r3]
 5084              		.loc 1 3251 25
 5085 006a 154B     		ldr	r3, .L329+4
 5086 006c 1B68     		ldr	r3, [r3]
 5087              		.loc 1 3251 5
 5088 006e 9A42     		cmp	r2, r3
 5089 0070 07D0     		beq	.L326
 5090              		.loc 1 3251 89 discriminator 1
 5091 0072 7B68     		ldr	r3, [r7, #4]
 5092 0074 5B68     		ldr	r3, [r3, #4]
 5093              		.loc 1 3251 56 discriminator 1
 5094 0076 BA69     		ldr	r2, [r7, #24]
 5095 0078 9A42     		cmp	r2, r3
 5096 007a 02D3     		bcc	.L326
3252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The tick count is greater than the time at which
3254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeout() was called, but has also overflowed since
3255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeOut() was called.  It must have wrapped all the way
3256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			around and gone past again. This passed since vTaskSetTimeout()
3257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			was called. */
3258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
 5097              		.loc 1 3258 12
 5098 007c 0123     		movs	r3, #1
 5099 007e FB61     		str	r3, [r7, #28]
 5100 0080 15E0     		b	.L325
 5101              	.L326:
3259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with som
 5102              		.loc 1 3260 27
 5103 0082 3B68     		ldr	r3, [r7]
 5104 0084 1B68     		ldr	r3, [r3]
 5105              		.loc 1 3260 10
 5106 0086 7A69     		ldr	r2, [r7, #20]
 5107 0088 9A42     		cmp	r2, r3
 5108 008a 0BD2     		bcs	.L327
3261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
3263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait -= xElapsedTime;
 5109              		.loc 1 3263 19
 5110 008c 3B68     		ldr	r3, [r7]
 5111 008e 1A68     		ldr	r2, [r3]
 5112 0090 7B69     		ldr	r3, [r7, #20]
 5113 0092 D21A     		subs	r2, r2, r3
 5114 0094 3B68     		ldr	r3, [r7]
 5115 0096 1A60     		str	r2, [r3]
3264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 152


 5116              		.loc 1 3264 4
 5117 0098 7868     		ldr	r0, [r7, #4]
 5118 009a FFF7FEFF 		bl	vTaskInternalSetTimeOutState
3265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
 5119              		.loc 1 3265 12
 5120 009e 0023     		movs	r3, #0
 5121 00a0 FB61     		str	r3, [r7, #28]
 5122 00a2 04E0     		b	.L325
 5123              	.L327:
3266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait = 0;
 5124              		.loc 1 3269 19
 5125 00a4 3B68     		ldr	r3, [r7]
 5126 00a6 0022     		movs	r2, #0
 5127 00a8 1A60     		str	r2, [r3]
3270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
 5128              		.loc 1 3270 12
 5129 00aa 0123     		movs	r3, #1
 5130 00ac FB61     		str	r3, [r7, #28]
 5131              	.L325:
 5132              	.LBE204:
3271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 5133              		.loc 1 3273 2
 5134 00ae FFF7FEFF 		bl	vPortExitCritical
3274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
 5135              		.loc 1 3275 9
 5136 00b2 FB69     		ldr	r3, [r7, #28]
3276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 5137              		.loc 1 3276 1
 5138 00b4 1846     		mov	r0, r3
 5139 00b6 2037     		adds	r7, r7, #32
 5140              	.LCFI182:
 5141              		.cfi_def_cfa_offset 8
 5142 00b8 BD46     		mov	sp, r7
 5143              	.LCFI183:
 5144              		.cfi_def_cfa_register 13
 5145              		@ sp needed
 5146 00ba 80BD     		pop	{r7, pc}
 5147              	.L330:
 5148              		.align	2
 5149              	.L329:
 5150 00bc 00000000 		.word	xTickCount
 5151 00c0 00000000 		.word	xNumOfOverflows
 5152              		.cfi_endproc
 5153              	.LFE39:
 5155              		.section	.text.vTaskMissedYield,"ax",%progbits
 5156              		.align	1
 5157              		.global	vTaskMissedYield
 5158              		.syntax unified
 5159              		.thumb
 5160              		.thumb_func
 5162              	vTaskMissedYield:
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 153


 5163              	.LFB40:
3277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskMissedYield( void )
3280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 5164              		.loc 1 3280 1
 5165              		.cfi_startproc
 5166              		@ args = 0, pretend = 0, frame = 0
 5167              		@ frame_needed = 1, uses_anonymous_args = 0
 5168              		@ link register save eliminated.
 5169 0000 80B4     		push	{r7}
 5170              	.LCFI184:
 5171              		.cfi_def_cfa_offset 4
 5172              		.cfi_offset 7, -4
 5173 0002 00AF     		add	r7, sp, #0
 5174              	.LCFI185:
 5175              		.cfi_def_cfa_register 7
3281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldPending = pdTRUE;
 5176              		.loc 1 3281 16
 5177 0004 034B     		ldr	r3, .L332
 5178 0006 0122     		movs	r2, #1
 5179 0008 1A60     		str	r2, [r3]
3282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 5180              		.loc 1 3282 1
 5181 000a 00BF     		nop
 5182 000c BD46     		mov	sp, r7
 5183              	.LCFI186:
 5184              		.cfi_def_cfa_register 13
 5185              		@ sp needed
 5186 000e 80BC     		pop	{r7}
 5187              	.LCFI187:
 5188              		.cfi_restore 7
 5189              		.cfi_def_cfa_offset 0
 5190 0010 7047     		bx	lr
 5191              	.L333:
 5192 0012 00BF     		.align	2
 5193              	.L332:
 5194 0014 00000000 		.word	xYieldPending
 5195              		.cfi_endproc
 5196              	.LFE40:
 5198              		.section	.text.uxTaskGetTaskNumber,"ax",%progbits
 5199              		.align	1
 5200              		.global	uxTaskGetTaskNumber
 5201              		.syntax unified
 5202              		.thumb
 5203              		.thumb_func
 5205              	uxTaskGetTaskNumber:
 5206              	.LFB41:
3283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5207              		.loc 1 3288 2
 5208              		.cfi_startproc
 5209              		@ args = 0, pretend = 0, frame = 16
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 154


 5210              		@ frame_needed = 1, uses_anonymous_args = 0
 5211              		@ link register save eliminated.
 5212 0000 80B4     		push	{r7}
 5213              	.LCFI188:
 5214              		.cfi_def_cfa_offset 4
 5215              		.cfi_offset 7, -4
 5216 0002 85B0     		sub	sp, sp, #20
 5217              	.LCFI189:
 5218              		.cfi_def_cfa_offset 24
 5219 0004 00AF     		add	r7, sp, #0
 5220              	.LCFI190:
 5221              		.cfi_def_cfa_register 7
 5222 0006 7860     		str	r0, [r7, #4]
3289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
3291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
 5223              		.loc 1 3292 5
 5224 0008 7B68     		ldr	r3, [r7, #4]
 5225 000a 002B     		cmp	r3, #0
 5226 000c 05D0     		beq	.L335
3293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = xTask;
 5227              		.loc 1 3294 10
 5228 000e 7B68     		ldr	r3, [r7, #4]
 5229 0010 BB60     		str	r3, [r7, #8]
3295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
 5230              		.loc 1 3295 13
 5231 0012 BB68     		ldr	r3, [r7, #8]
 5232 0014 9B6C     		ldr	r3, [r3, #72]
 5233 0016 FB60     		str	r3, [r7, #12]
 5234 0018 01E0     		b	.L336
 5235              	.L335:
3296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = 0U;
 5236              		.loc 1 3299 13
 5237 001a 0023     		movs	r3, #0
 5238 001c FB60     		str	r3, [r7, #12]
 5239              	.L336:
3300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
 5240              		.loc 1 3302 10
 5241 001e FB68     		ldr	r3, [r7, #12]
3303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5242              		.loc 1 3303 2
 5243 0020 1846     		mov	r0, r3
 5244 0022 1437     		adds	r7, r7, #20
 5245              	.LCFI191:
 5246              		.cfi_def_cfa_offset 4
 5247 0024 BD46     		mov	sp, r7
 5248              	.LCFI192:
 5249              		.cfi_def_cfa_register 13
 5250              		@ sp needed
 5251 0026 80BC     		pop	{r7}
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 155


 5252              	.LCFI193:
 5253              		.cfi_restore 7
 5254              		.cfi_def_cfa_offset 0
 5255 0028 7047     		bx	lr
 5256              		.cfi_endproc
 5257              	.LFE41:
 5259              		.section	.text.vTaskSetTaskNumber,"ax",%progbits
 5260              		.align	1
 5261              		.global	vTaskSetTaskNumber
 5262              		.syntax unified
 5263              		.thumb
 5264              		.thumb_func
 5266              	vTaskSetTaskNumber:
 5267              	.LFB42:
3304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
3311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5268              		.loc 1 3311 2
 5269              		.cfi_startproc
 5270              		@ args = 0, pretend = 0, frame = 16
 5271              		@ frame_needed = 1, uses_anonymous_args = 0
 5272              		@ link register save eliminated.
 5273 0000 80B4     		push	{r7}
 5274              	.LCFI194:
 5275              		.cfi_def_cfa_offset 4
 5276              		.cfi_offset 7, -4
 5277 0002 85B0     		sub	sp, sp, #20
 5278              	.LCFI195:
 5279              		.cfi_def_cfa_offset 24
 5280 0004 00AF     		add	r7, sp, #0
 5281              	.LCFI196:
 5282              		.cfi_def_cfa_register 7
 5283 0006 7860     		str	r0, [r7, #4]
 5284 0008 3960     		str	r1, [r7]
3312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
3313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
 5285              		.loc 1 3314 5
 5286 000a 7B68     		ldr	r3, [r7, #4]
 5287 000c 002B     		cmp	r3, #0
 5288 000e 04D0     		beq	.L340
3315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = xTask;
 5289              		.loc 1 3316 10
 5290 0010 7B68     		ldr	r3, [r7, #4]
 5291 0012 FB60     		str	r3, [r7, #12]
3317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
 5292              		.loc 1 3317 24
 5293 0014 FB68     		ldr	r3, [r7, #12]
 5294 0016 3A68     		ldr	r2, [r7]
 5295 0018 9A64     		str	r2, [r3, #72]
 5296              	.L340:
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 156


3318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5297              		.loc 1 3319 2
 5298 001a 00BF     		nop
 5299 001c 1437     		adds	r7, r7, #20
 5300              	.LCFI197:
 5301              		.cfi_def_cfa_offset 4
 5302 001e BD46     		mov	sp, r7
 5303              	.LCFI198:
 5304              		.cfi_def_cfa_register 13
 5305              		@ sp needed
 5306 0020 80BC     		pop	{r7}
 5307              	.LCFI199:
 5308              		.cfi_restore 7
 5309              		.cfi_def_cfa_offset 0
 5310 0022 7047     		bx	lr
 5311              		.cfi_endproc
 5312              	.LFE42:
 5314              		.section	.text.prvIdleTask,"ax",%progbits
 5315              		.align	1
 5316              		.syntax unified
 5317              		.thumb
 5318              		.thumb_func
 5320              	prvIdleTask:
 5321              	.LFB43:
3320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
3324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * -----------------------------------------------------------
3325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The Idle task.
3326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * ----------------------------------------------------------
3327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
3332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
3334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 5322              		.loc 1 3335 1
 5323              		.cfi_startproc
 5324              		@ args = 0, pretend = 0, frame = 8
 5325              		@ frame_needed = 1, uses_anonymous_args = 0
 5326 0000 80B5     		push	{r7, lr}
 5327              	.LCFI200:
 5328              		.cfi_def_cfa_offset 8
 5329              		.cfi_offset 7, -8
 5330              		.cfi_offset 14, -4
 5331 0002 82B0     		sub	sp, sp, #8
 5332              	.LCFI201:
 5333              		.cfi_def_cfa_offset 16
 5334 0004 00AF     		add	r7, sp, #0
 5335              	.LCFI202:
 5336              		.cfi_def_cfa_register 7
 5337 0006 7860     		str	r0, [r7, #4]
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 157


 5338              	.L343:
3336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
3337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) pvParameters;
3338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER IS STARTED. **/
3341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* In case a task that has a secure context deletes itself, in which case
3343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the idle task is responsible for deleting the task's secure context, if
3344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	any. */
3345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portALLOCATE_SECURE_CONTEXT( configMINIMAL_SECURE_STACK_SIZE );
3346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( ;; )
3348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if any tasks have deleted themselves - if so then the idle task
3350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is responsible for freeing the deleted task's TCB and stack. */
3351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvCheckTasksWaitingTermination();
 5339              		.loc 1 3351 3
 5340 0008 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
3352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
3354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
3356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			see if any other task has become available.  If we are using
3357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			preemption we don't need to do this as any task becoming available
3358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			will automatically get the processor anyway. */
3359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD();
3360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_PREEMPTION */
3362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When using preemption tasks of equal priority will be
3366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
3367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			to run then the idle task should yield before the end of the
3368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timeslice.
3369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			A critical region is not required here as we are just reading from
3371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
3372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the ready list at the idle priority contains more than one task
3373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then a task other than the idle task is ready to execute. */
3374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 5341              		.loc 1 3374 8
 5342 000c 064B     		ldr	r3, .L344
 5343 000e 1B68     		ldr	r3, [r3]
 5344              		.loc 1 3374 6
 5345 0010 012B     		cmp	r3, #1
 5346 0012 F9D9     		bls	.L343
3375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskYIELD();
 5347              		.loc 1 3376 5
 5348 0014 054B     		ldr	r3, .L344+4
 5349 0016 4FF08052 		mov	r2, #268435456
 5350 001a 1A60     		str	r2, [r3]
 5351              		.syntax unified
 5352              	@ 3376 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5353 001c BFF34F8F 		dsb
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 158


 5354              	@ 0 "" 2
 5355              	@ 3376 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5356 0020 BFF36F8F 		isb
 5357              	@ 0 "" 2
3351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5358              		.loc 1 3351 3
 5359              		.thumb
 5360              		.syntax unified
 5361 0024 F0E7     		b	.L343
 5362              	.L345:
 5363 0026 00BF     		.align	2
 5364              	.L344:
 5365 0028 00000000 		.word	pxReadyTasksLists
 5366 002c 04ED00E0 		.word	-536810236
 5367              		.cfi_endproc
 5368              	.LFE43:
 5370              		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 5371              		.align	1
 5372              		.syntax unified
 5373              		.thumb
 5374              		.thumb_func
 5376              	prvInitialiseTaskLists:
 5377              	.LFB44:
3377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
3386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			extern void vApplicationIdleHook( void );
3388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Call the user defined function from within the idle task.  This
3390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allows the application designer to add background functionality
3391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			without the overhead of a separate task.
3392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
3394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationIdleHook();
3395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
3397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
3399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		user defined low power mode	implementations require
3401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
3403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TickType_t xExpectedIdleTime;
3405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
3407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
3408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			test of the expected idle time is performed without the
3409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			scheduler suspended.  The result here is not necessarily
3410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			valid. */
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 159


3411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
3412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskSuspendAll();
3416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
3418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					time can be sampled again, and this time its value can
3419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be used. */
3420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
3421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
3422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Define the following macro to set xExpectedIdleTime to 0
3424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if the application does not want
3425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
3426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );
3427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
3431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_END();
3433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) xTaskResumeAll();
3440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
3447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
3452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The idle task exists in addition to the application tasks. */
3456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
3457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
3458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
3462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( xYieldPending != pdFALSE )
3465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
3467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 160


3468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
3472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			have an infinite block time rather than actually being suspended)
3473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then it is safe to turn all clocks off and just wait for external
3474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupts. */
3475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
3476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
3478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
3486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
3494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
3500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
3510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvReturn = NULL;
3512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
3517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = NULL;
3522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pvReturn;
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 161


3525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
3533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
3537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the calling task. */
3538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
3539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void )
3547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 5378              		.loc 1 3547 1
 5379              		.cfi_startproc
 5380              		@ args = 0, pretend = 0, frame = 8
 5381              		@ frame_needed = 1, uses_anonymous_args = 0
 5382 0000 80B5     		push	{r7, lr}
 5383              	.LCFI203:
 5384              		.cfi_def_cfa_offset 8
 5385              		.cfi_offset 7, -8
 5386              		.cfi_offset 14, -4
 5387 0002 82B0     		sub	sp, sp, #8
 5388              	.LCFI204:
 5389              		.cfi_def_cfa_offset 16
 5390 0004 00AF     		add	r7, sp, #0
 5391              	.LCFI205:
 5392              		.cfi_def_cfa_register 7
3548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxPriority;
3549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
 5393              		.loc 1 3550 18
 5394 0006 0023     		movs	r3, #0
 5395 0008 7B60     		str	r3, [r7, #4]
 5396              		.loc 1 3550 2
 5397 000a 0CE0     		b	.L347
 5398              	.L348:
3551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 5399              		.loc 1 3552 3 discriminator 3
 5400 000c 7A68     		ldr	r2, [r7, #4]
 5401 000e 1346     		mov	r3, r2
 5402 0010 9B00     		lsls	r3, r3, #2
 5403 0012 1344     		add	r3, r3, r2
 5404 0014 9B00     		lsls	r3, r3, #2
 5405 0016 124A     		ldr	r2, .L349
 5406 0018 1344     		add	r3, r3, r2
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 162


 5407 001a 1846     		mov	r0, r3
 5408 001c FFF7FEFF 		bl	vListInitialise
3550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5409              		.loc 1 3550 101 discriminator 3
 5410 0020 7B68     		ldr	r3, [r7, #4]
 5411 0022 0133     		adds	r3, r3, #1
 5412 0024 7B60     		str	r3, [r7, #4]
 5413              	.L347:
3550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5414              		.loc 1 3550 2 discriminator 1
 5415 0026 7B68     		ldr	r3, [r7, #4]
 5416 0028 372B     		cmp	r3, #55
 5417 002a EFD9     		bls	.L348
3553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
 5418              		.loc 1 3555 2
 5419 002c 0D48     		ldr	r0, .L349+4
 5420 002e FFF7FEFF 		bl	vListInitialise
3556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 5421              		.loc 1 3556 2
 5422 0032 0D48     		ldr	r0, .L349+8
 5423 0034 FFF7FEFF 		bl	vListInitialise
3557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
 5424              		.loc 1 3557 2
 5425 0038 0C48     		ldr	r0, .L349+12
 5426 003a FFF7FEFF 		bl	vListInitialise
3558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
 5427              		.loc 1 3561 3
 5428 003e 0C48     		ldr	r0, .L349+16
 5429 0040 FFF7FEFF 		bl	vListInitialise
3562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
3566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
 5430              		.loc 1 3567 3
 5431 0044 0B48     		ldr	r0, .L349+20
 5432 0046 FFF7FEFF 		bl	vListInitialise
3568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
3570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	using list2. */
3573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
 5433              		.loc 1 3573 20
 5434 004a 0B4B     		ldr	r3, .L349+24
 5435 004c 054A     		ldr	r2, .L349+4
 5436 004e 1A60     		str	r2, [r3]
3574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 5437              		.loc 1 3574 28
 5438 0050 0A4B     		ldr	r3, .L349+28
 5439 0052 054A     		ldr	r2, .L349+8
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 163


 5440 0054 1A60     		str	r2, [r3]
3575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 5441              		.loc 1 3575 1
 5442 0056 00BF     		nop
 5443 0058 0837     		adds	r7, r7, #8
 5444              	.LCFI206:
 5445              		.cfi_def_cfa_offset 8
 5446 005a BD46     		mov	sp, r7
 5447              	.LCFI207:
 5448              		.cfi_def_cfa_register 13
 5449              		@ sp needed
 5450 005c 80BD     		pop	{r7, pc}
 5451              	.L350:
 5452 005e 00BF     		.align	2
 5453              	.L349:
 5454 0060 00000000 		.word	pxReadyTasksLists
 5455 0064 00000000 		.word	xDelayedTaskList1
 5456 0068 00000000 		.word	xDelayedTaskList2
 5457 006c 00000000 		.word	xPendingReadyList
 5458 0070 00000000 		.word	xTasksWaitingTermination
 5459 0074 00000000 		.word	xSuspendedTaskList
 5460 0078 00000000 		.word	pxDelayedTaskList
 5461 007c 00000000 		.word	pxOverflowDelayedTaskList
 5462              		.cfi_endproc
 5463              	.LFE44:
 5465              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 5466              		.align	1
 5467              		.syntax unified
 5468              		.thumb
 5469              		.thumb_func
 5471              	prvCheckTasksWaitingTermination:
 5472              	.LFB45:
3576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 5473              		.loc 1 3579 1
 5474              		.cfi_startproc
 5475              		@ args = 0, pretend = 0, frame = 8
 5476              		@ frame_needed = 1, uses_anonymous_args = 0
 5477 0000 80B5     		push	{r7, lr}
 5478              	.LCFI208:
 5479              		.cfi_def_cfa_offset 8
 5480              		.cfi_offset 7, -8
 5481              		.cfi_offset 14, -4
 5482 0002 82B0     		sub	sp, sp, #8
 5483              	.LCFI209:
 5484              		.cfi_def_cfa_offset 16
 5485 0004 00AF     		add	r7, sp, #0
 5486              	.LCFI210:
 5487              		.cfi_def_cfa_register 7
 5488              	.LBB205:
3580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 164


3585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TCB_t *pxTCB;
3586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
3588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		being called too often in the idle task. */
3589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 5489              		.loc 1 3589 8
 5490 0006 19E0     		b	.L352
 5491              	.L353:
3590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
 5492              		.loc 1 3591 4
 5493 0008 FFF7FEFF 		bl	vPortEnterCritical
3592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is u
 5494              		.loc 1 3593 13
 5495 000c 104B     		ldr	r3, .L354
 5496 000e DB68     		ldr	r3, [r3, #12]
 5497              		.loc 1 3593 11
 5498 0010 DB68     		ldr	r3, [r3, #12]
 5499 0012 7B60     		str	r3, [r7, #4]
3594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 5500              		.loc 1 3594 14
 5501 0014 7B68     		ldr	r3, [r7, #4]
 5502 0016 0433     		adds	r3, r3, #4
 5503 0018 1846     		mov	r0, r3
 5504 001a FFF7FEFF 		bl	uxListRemove
3595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
 5505              		.loc 1 3595 5
 5506 001e 0D4B     		ldr	r3, .L354+4
 5507 0020 1B68     		ldr	r3, [r3]
 5508 0022 013B     		subs	r3, r3, #1
 5509 0024 0B4A     		ldr	r2, .L354+4
 5510 0026 1360     		str	r3, [r2]
3596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
 5511              		.loc 1 3596 5
 5512 0028 0B4B     		ldr	r3, .L354+8
 5513 002a 1B68     		ldr	r3, [r3]
 5514 002c 013B     		subs	r3, r3, #1
 5515 002e 0A4A     		ldr	r2, .L354+8
 5516 0030 1360     		str	r3, [r2]
3597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
 5517              		.loc 1 3598 4
 5518 0032 FFF7FEFF 		bl	vPortExitCritical
3599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvDeleteTCB( pxTCB );
 5519              		.loc 1 3600 4
 5520 0036 7868     		ldr	r0, [r7, #4]
 5521 0038 FFF7FEFF 		bl	prvDeleteTCB
 5522              	.L352:
3589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5523              		.loc 1 3589 39
 5524 003c 064B     		ldr	r3, .L354+8
 5525 003e 1B68     		ldr	r3, [r3]
3589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5526              		.loc 1 3589 8
 5527 0040 002B     		cmp	r3, #0
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 165


 5528 0042 E1D1     		bne	.L353
 5529              	.LBE205:
3601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 5530              		.loc 1 3604 1
 5531 0044 00BF     		nop
 5532 0046 00BF     		nop
 5533 0048 0837     		adds	r7, r7, #8
 5534              	.LCFI211:
 5535              		.cfi_def_cfa_offset 8
 5536 004a BD46     		mov	sp, r7
 5537              	.LCFI212:
 5538              		.cfi_def_cfa_register 13
 5539              		@ sp needed
 5540 004c 80BD     		pop	{r7, pc}
 5541              	.L355:
 5542 004e 00BF     		.align	2
 5543              	.L354:
 5544 0050 00000000 		.word	xTasksWaitingTermination
 5545 0054 00000000 		.word	uxCurrentNumberOfTasks
 5546 0058 00000000 		.word	uxDeletedTasksWaitingCleanUp
 5547              		.cfi_endproc
 5548              	.LFE45:
 5550              		.section	.text.vTaskGetInfo,"ax",%progbits
 5551              		.align	1
 5552              		.global	vTaskGetInfo
 5553              		.syntax unified
 5554              		.thumb
 5555              		.thumb_func
 5557              	vTaskGetInfo:
 5558              	.LFB46:
3605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TRACE_FACILITY == 1 )
3608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, 
3610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5559              		.loc 1 3610 2
 5560              		.cfi_startproc
 5561              		@ args = 0, pretend = 0, frame = 24
 5562              		@ frame_needed = 1, uses_anonymous_args = 0
 5563 0000 80B5     		push	{r7, lr}
 5564              	.LCFI213:
 5565              		.cfi_def_cfa_offset 8
 5566              		.cfi_offset 7, -8
 5567              		.cfi_offset 14, -4
 5568 0002 86B0     		sub	sp, sp, #24
 5569              	.LCFI214:
 5570              		.cfi_def_cfa_offset 32
 5571 0004 00AF     		add	r7, sp, #0
 5572              	.LCFI215:
 5573              		.cfi_def_cfa_register 7
 5574 0006 F860     		str	r0, [r7, #12]
 5575 0008 B960     		str	r1, [r7, #8]
 5576 000a 7A60     		str	r2, [r7, #4]
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 166


 5577 000c FB70     		strb	r3, [r7, #3]
3611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* xTask is NULL then get the state of the calling task. */
3614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 5578              		.loc 1 3614 11
 5579 000e FB68     		ldr	r3, [r7, #12]
 5580 0010 002B     		cmp	r3, #0
 5581 0012 02D1     		bne	.L357
 5582              		.loc 1 3614 11 is_stmt 0 discriminator 1
 5583 0014 2C4B     		ldr	r3, .L366
 5584 0016 1B68     		ldr	r3, [r3]
 5585 0018 00E0     		b	.L358
 5586              	.L357:
 5587              		.loc 1 3614 11 discriminator 2
 5588 001a FB68     		ldr	r3, [r7, #12]
 5589              	.L358:
 5590              		.loc 1 3614 9 is_stmt 1 discriminator 4
 5591 001c 7B61     		str	r3, [r7, #20]
3615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 5592              		.loc 1 3616 25 discriminator 4
 5593 001e BB68     		ldr	r3, [r7, #8]
 5594 0020 7A69     		ldr	r2, [r7, #20]
 5595 0022 1A60     		str	r2, [r3]
3617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 5596              		.loc 1 3617 47 discriminator 4
 5597 0024 7B69     		ldr	r3, [r7, #20]
 5598 0026 03F13402 		add	r2, r3, #52
 5599              		.loc 1 3617 28 discriminator 4
 5600 002a BB68     		ldr	r3, [r7, #8]
 5601 002c 5A60     		str	r2, [r3, #4]
3618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 5602              		.loc 1 3618 42 discriminator 4
 5603 002e 7B69     		ldr	r3, [r7, #20]
 5604 0030 DA6A     		ldr	r2, [r3, #44]
 5605              		.loc 1 3618 35 discriminator 4
 5606 0032 BB68     		ldr	r3, [r7, #8]
 5607 0034 1A61     		str	r2, [r3, #16]
3619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 5608              		.loc 1 3619 36 discriminator 4
 5609 0036 7B69     		ldr	r3, [r7, #20]
 5610 0038 1A6B     		ldr	r2, [r3, #48]
 5611              		.loc 1 3619 29 discriminator 4
 5612 003a BB68     		ldr	r3, [r7, #8]
 5613 003c DA61     		str	r2, [r3, #28]
3620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 5614              		.loc 1 3620 36 discriminator 4
 5615 003e 7B69     		ldr	r3, [r7, #20]
 5616 0040 5A6C     		ldr	r2, [r3, #68]
 5617              		.loc 1 3620 29 discriminator 4
 5618 0042 BB68     		ldr	r3, [r7, #8]
 5619 0044 9A60     		str	r2, [r3, #8]
3621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_MUTEXES == 1 )
3623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 167


 5620              		.loc 1 3624 40 discriminator 4
 5621 0046 7B69     		ldr	r3, [r7, #20]
 5622 0048 DA6C     		ldr	r2, [r3, #76]
 5623              		.loc 1 3624 33 discriminator 4
 5624 004a BB68     		ldr	r3, [r7, #8]
 5625 004c 5A61     		str	r2, [r3, #20]
3625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = 0;
3629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = 0;
 5626              		.loc 1 3638 35 discriminator 4
 5627 004e BB68     		ldr	r3, [r7, #8]
 5628 0050 0022     		movs	r2, #0
 5629 0052 9A61     		str	r2, [r3, #24]
3639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the task state is a little fiddly, so is only done if the
3643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value of eState passed into this function is eInvalid - otherwise the
3644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		state is just set to whatever is passed in. */
3645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( eState != eInvalid )
 5630              		.loc 1 3645 5 discriminator 4
 5631 0054 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 5632 0056 052B     		cmp	r3, #5
 5633 0058 1AD0     		beq	.L359
3646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
 5634              		.loc 1 3647 14
 5635 005a 1B4B     		ldr	r3, .L366
 5636 005c 1B68     		ldr	r3, [r3]
 5637              		.loc 1 3647 6
 5638 005e 7A69     		ldr	r2, [r7, #20]
 5639 0060 9A42     		cmp	r2, r3
 5640 0062 03D1     		bne	.L360
3648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->eCurrentState = eRunning;
 5641              		.loc 1 3649 33
 5642 0064 BB68     		ldr	r3, [r7, #8]
 5643 0066 0022     		movs	r2, #0
 5644 0068 1A73     		strb	r2, [r3, #12]
 5645 006a 18E0     		b	.L361
 5646              	.L360:
3650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->eCurrentState = eState;
 5647              		.loc 1 3653 33
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 168


 5648 006c BB68     		ldr	r3, [r7, #8]
 5649 006e FA78     		ldrb	r2, [r7, #3]
 5650 0070 1A73     		strb	r2, [r3, #12]
3654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
3656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the task is in the suspended list then there is a
3658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					chance it is actually just blocked indefinitely - so really
3659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it should be reported as being in the Blocked state. */
3660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( eState == eSuspended )
 5651              		.loc 1 3660 8
 5652 0072 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 5653 0074 032B     		cmp	r3, #3
 5654 0076 12D1     		bne	.L361
3661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						vTaskSuspendAll();
 5655              		.loc 1 3662 7
 5656 0078 FFF7FEFF 		bl	vTaskSuspendAll
3663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
3664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 5657              		.loc 1 3664 12
 5658 007c 7B69     		ldr	r3, [r7, #20]
 5659 007e 9B6A     		ldr	r3, [r3, #40]
 5660              		.loc 1 3664 10
 5661 0080 002B     		cmp	r3, #0
 5662 0082 02D0     		beq	.L362
3665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
3666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								pxTaskStatus->eCurrentState = eBlocked;
 5663              		.loc 1 3666 37
 5664 0084 BB68     		ldr	r3, [r7, #8]
 5665 0086 0222     		movs	r2, #2
 5666 0088 1A73     		strb	r2, [r3, #12]
 5667              	.L362:
3667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
3668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
3669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) xTaskResumeAll();
 5668              		.loc 1 3669 16
 5669 008a FFF7FEFF 		bl	xTaskResumeAll
 5670 008e 06E0     		b	.L361
 5671              	.L359:
3670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* INCLUDE_vTaskSuspend */
3673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 5672              		.loc 1 3677 34
 5673 0090 7869     		ldr	r0, [r7, #20]
 5674 0092 FFF7FEFF 		bl	eTaskGetState
 5675 0096 0346     		mov	r3, r0
 5676 0098 1A46     		mov	r2, r3
 5677              		.loc 1 3677 32
 5678 009a BB68     		ldr	r3, [r7, #8]
 5679 009c 1A73     		strb	r2, [r3, #12]
 5680              	.L361:
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 169


3678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		parameter is provided to allow it to be skipped. */
3682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xGetFreeStackSpace != pdFALSE )
 5681              		.loc 1 3682 5
 5682 009e 7B68     		ldr	r3, [r7, #4]
 5683 00a0 002B     		cmp	r3, #0
 5684 00a2 09D0     		beq	.L363
3683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
3685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfSt
3687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
3689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack )
 5685              		.loc 1 3690 89
 5686 00a4 7B69     		ldr	r3, [r7, #20]
 5687 00a6 1B6B     		ldr	r3, [r3, #48]
 5688              		.loc 1 3690 42
 5689 00a8 1846     		mov	r0, r3
 5690 00aa FFF7FEFF 		bl	prvTaskCheckFreeStackSpace
 5691 00ae 0346     		mov	r3, r0
 5692 00b0 1A46     		mov	r2, r3
 5693              		.loc 1 3690 40
 5694 00b2 BB68     		ldr	r3, [r7, #8]
 5695 00b4 1A84     		strh	r2, [r3, #32]	@ movhi
3691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
3693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->usStackHighWaterMark = 0;
3697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5696              		.loc 1 3698 2
 5697 00b6 02E0     		b	.L365
 5698              	.L363:
3696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 5699              		.loc 1 3696 39
 5700 00b8 BB68     		ldr	r3, [r7, #8]
 5701 00ba 0022     		movs	r2, #0
 5702 00bc 1A84     		strh	r2, [r3, #32]	@ movhi
 5703              	.L365:
 5704              		.loc 1 3698 2
 5705 00be 00BF     		nop
 5706 00c0 1837     		adds	r7, r7, #24
 5707              	.LCFI216:
 5708              		.cfi_def_cfa_offset 8
 5709 00c2 BD46     		mov	sp, r7
 5710              	.LCFI217:
 5711              		.cfi_def_cfa_register 13
 5712              		@ sp needed
 5713 00c4 80BD     		pop	{r7, pc}
 5714              	.L367:
 5715 00c6 00BF     		.align	2
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 170


 5716              	.L366:
 5717 00c8 00000000 		.word	pxCurrentTCB
 5718              		.cfi_endproc
 5719              	.LFE46:
 5721              		.section	.text.prvListTasksWithinSingleList,"ax",%progbits
 5722              		.align	1
 5723              		.syntax unified
 5724              		.thumb
 5725              		.thumb_func
 5727              	prvListTasksWithinSingleList:
 5728              	.LFB47:
3699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
3706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5729              		.loc 1 3706 2
 5730              		.cfi_startproc
 5731              		@ args = 0, pretend = 0, frame = 40
 5732              		@ frame_needed = 1, uses_anonymous_args = 0
 5733 0000 80B5     		push	{r7, lr}
 5734              	.LCFI218:
 5735              		.cfi_def_cfa_offset 8
 5736              		.cfi_offset 7, -8
 5737              		.cfi_offset 14, -4
 5738 0002 8AB0     		sub	sp, sp, #40
 5739              	.LCFI219:
 5740              		.cfi_def_cfa_offset 48
 5741 0004 00AF     		add	r7, sp, #0
 5742              	.LCFI220:
 5743              		.cfi_def_cfa_register 7
 5744 0006 F860     		str	r0, [r7, #12]
 5745 0008 B960     		str	r1, [r7, #8]
 5746 000a 1346     		mov	r3, r2
 5747 000c FB71     		strb	r3, [r7, #7]
3707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
3708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0;
 5748              		.loc 1 3708 14
 5749 000e 0023     		movs	r3, #0
 5750 0010 7B62     		str	r3, [r7, #36]
3709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 5751              		.loc 1 3710 7
 5752 0012 BB68     		ldr	r3, [r7, #8]
 5753 0014 1B68     		ldr	r3, [r3]
 5754              		.loc 1 3710 5
 5755 0016 002B     		cmp	r3, #0
 5756 0018 3FD0     		beq	.L369
 5757              	.LBB206:
3711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is
 5758              		.loc 1 3712 4
 5759 001a BB68     		ldr	r3, [r7, #8]
 5760 001c 3B62     		str	r3, [r7, #32]
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 171


 5761 001e 3B6A     		ldr	r3, [r7, #32]
 5762 0020 5B68     		ldr	r3, [r3, #4]
 5763 0022 5A68     		ldr	r2, [r3, #4]
 5764 0024 3B6A     		ldr	r3, [r7, #32]
 5765 0026 5A60     		str	r2, [r3, #4]
 5766 0028 3B6A     		ldr	r3, [r7, #32]
 5767 002a 5A68     		ldr	r2, [r3, #4]
 5768 002c 3B6A     		ldr	r3, [r7, #32]
 5769 002e 0833     		adds	r3, r3, #8
 5770 0030 9A42     		cmp	r2, r3
 5771 0032 04D1     		bne	.L370
 5772              		.loc 1 3712 4 is_stmt 0 discriminator 1
 5773 0034 3B6A     		ldr	r3, [r7, #32]
 5774 0036 5B68     		ldr	r3, [r3, #4]
 5775 0038 5A68     		ldr	r2, [r3, #4]
 5776 003a 3B6A     		ldr	r3, [r7, #32]
 5777 003c 5A60     		str	r2, [r3, #4]
 5778              	.L370:
 5779              		.loc 1 3712 4 discriminator 3
 5780 003e 3B6A     		ldr	r3, [r7, #32]
 5781 0040 5B68     		ldr	r3, [r3, #4]
 5782 0042 DB68     		ldr	r3, [r3, #12]
 5783 0044 FB61     		str	r3, [r7, #28]
 5784              	.L372:
 5785              	.LBE206:
 5786              	.LBB207:
3713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Populate an TaskStatus_t structure within the
3715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			meaning of each TaskStatus_t structure member. */
3718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
3719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is
 5787              		.loc 1 3720 5 is_stmt 1
 5788 0046 BB68     		ldr	r3, [r7, #8]
 5789 0048 BB61     		str	r3, [r7, #24]
 5790 004a BB69     		ldr	r3, [r7, #24]
 5791 004c 5B68     		ldr	r3, [r3, #4]
 5792 004e 5A68     		ldr	r2, [r3, #4]
 5793 0050 BB69     		ldr	r3, [r7, #24]
 5794 0052 5A60     		str	r2, [r3, #4]
 5795 0054 BB69     		ldr	r3, [r7, #24]
 5796 0056 5A68     		ldr	r2, [r3, #4]
 5797 0058 BB69     		ldr	r3, [r7, #24]
 5798 005a 0833     		adds	r3, r3, #8
 5799 005c 9A42     		cmp	r2, r3
 5800 005e 04D1     		bne	.L371
 5801              		.loc 1 3720 5 is_stmt 0 discriminator 1
 5802 0060 BB69     		ldr	r3, [r7, #24]
 5803 0062 5B68     		ldr	r3, [r3, #4]
 5804 0064 5A68     		ldr	r2, [r3, #4]
 5805 0066 BB69     		ldr	r3, [r7, #24]
 5806 0068 5A60     		str	r2, [r3, #4]
 5807              	.L371:
 5808              		.loc 1 3720 5 discriminator 3
 5809 006a BB69     		ldr	r3, [r7, #24]
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 172


 5810 006c 5B68     		ldr	r3, [r3, #4]
 5811 006e DB68     		ldr	r3, [r3, #12]
 5812 0070 7B61     		str	r3, [r7, #20]
 5813              	.LBE207:
3721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 5814              		.loc 1 3721 67 is_stmt 1 discriminator 3
 5815 0072 7A6A     		ldr	r2, [r7, #36]
 5816 0074 1346     		mov	r3, r2
 5817 0076 DB00     		lsls	r3, r3, #3
 5818 0078 1344     		add	r3, r3, r2
 5819 007a 9B00     		lsls	r3, r3, #2
 5820 007c 1A46     		mov	r2, r3
 5821              		.loc 1 3721 5 discriminator 3
 5822 007e FB68     		ldr	r3, [r7, #12]
 5823 0080 9918     		adds	r1, r3, r2
 5824 0082 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5825 0084 0122     		movs	r2, #1
 5826 0086 7869     		ldr	r0, [r7, #20]
 5827 0088 FFF7FEFF 		bl	vTaskGetInfo
3722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask++;
 5828              		.loc 1 3722 11 discriminator 3
 5829 008c 7B6A     		ldr	r3, [r7, #36]
 5830 008e 0133     		adds	r3, r3, #1
 5831 0090 7B62     		str	r3, [r7, #36]
3723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
 5832              		.loc 1 3723 4 discriminator 3
 5833 0092 7A69     		ldr	r2, [r7, #20]
 5834 0094 FB69     		ldr	r3, [r7, #28]
 5835 0096 9A42     		cmp	r2, r3
 5836 0098 D5D1     		bne	.L372
 5837              	.L369:
3724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
 5838              		.loc 1 3730 10
 5839 009a 7B6A     		ldr	r3, [r7, #36]
3731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5840              		.loc 1 3731 2
 5841 009c 1846     		mov	r0, r3
 5842 009e 2837     		adds	r7, r7, #40
 5843              	.LCFI221:
 5844              		.cfi_def_cfa_offset 8
 5845 00a0 BD46     		mov	sp, r7
 5846              	.LCFI222:
 5847              		.cfi_def_cfa_register 13
 5848              		@ sp needed
 5849 00a2 80BD     		pop	{r7, pc}
 5850              		.cfi_endproc
 5851              	.LFE47:
 5853              		.section	.text.prvTaskCheckFreeStackSpace,"ax",%progbits
 5854              		.align	1
 5855              		.syntax unified
 5856              		.thumb
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 173


 5857              		.thumb_func
 5859              	prvTaskCheckFreeStackSpace:
 5860              	.LFB48:
3732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
3737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5861              		.loc 1 3739 2
 5862              		.cfi_startproc
 5863              		@ args = 0, pretend = 0, frame = 16
 5864              		@ frame_needed = 1, uses_anonymous_args = 0
 5865              		@ link register save eliminated.
 5866 0000 80B4     		push	{r7}
 5867              	.LCFI223:
 5868              		.cfi_def_cfa_offset 4
 5869              		.cfi_offset 7, -4
 5870 0002 85B0     		sub	sp, sp, #20
 5871              	.LCFI224:
 5872              		.cfi_def_cfa_offset 24
 5873 0004 00AF     		add	r7, sp, #0
 5874              	.LCFI225:
 5875              		.cfi_def_cfa_register 7
 5876 0006 7860     		str	r0, [r7, #4]
3740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulCount = 0U;
 5877              		.loc 1 3740 11
 5878 0008 0023     		movs	r3, #0
 5879 000a FB60     		str	r3, [r7, #12]
3741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 5880              		.loc 1 3742 8
 5881 000c 05E0     		b	.L375
 5882              	.L376:
3743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
 5883              		.loc 1 3744 17
 5884 000e 7B68     		ldr	r3, [r7, #4]
 5885 0010 0133     		adds	r3, r3, #1
 5886 0012 7B60     		str	r3, [r7, #4]
3745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulCount++;
 5887              		.loc 1 3745 11
 5888 0014 FB68     		ldr	r3, [r7, #12]
 5889 0016 0133     		adds	r3, r3, #1
 5890 0018 FB60     		str	r3, [r7, #12]
 5891              	.L375:
3742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5892              		.loc 1 3742 10
 5893 001a 7B68     		ldr	r3, [r7, #4]
 5894 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
3742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5895              		.loc 1 3742 8
 5896 001e A52B     		cmp	r3, #165
 5897 0020 F5D0     		beq	.L376
3746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 174


3747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
 5898              		.loc 1 3748 11
 5899 0022 FB68     		ldr	r3, [r7, #12]
 5900 0024 9B08     		lsrs	r3, r3, #2
 5901 0026 FB60     		str	r3, [r7, #12]
3749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ( configSTACK_DEPTH_TYPE ) ulCount;
 5902              		.loc 1 3750 10
 5903 0028 FB68     		ldr	r3, [r7, #12]
 5904 002a 9BB2     		uxth	r3, r3
3751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5905              		.loc 1 3751 2
 5906 002c 1846     		mov	r0, r3
 5907 002e 1437     		adds	r7, r7, #20
 5908              	.LCFI226:
 5909              		.cfi_def_cfa_offset 4
 5910 0030 BD46     		mov	sp, r7
 5911              	.LCFI227:
 5912              		.cfi_def_cfa_register 13
 5913              		@ sp needed
 5914 0032 80BC     		pop	{r7}
 5915              	.LCFI228:
 5916              		.cfi_restore 7
 5917              		.cfi_def_cfa_offset 0
 5918 0034 7047     		bx	lr
 5919              		.cfi_endproc
 5920              	.LFE48:
 5922              		.section	.text.uxTaskGetStackHighWaterMark,"ax",%progbits
 5923              		.align	1
 5924              		.global	uxTaskGetStackHighWaterMark
 5925              		.syntax unified
 5926              		.thumb
 5927              		.thumb_func
 5929              	uxTaskGetStackHighWaterMark:
 5930              	.LFB49:
3752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( 
3754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 )
3757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are the
3759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	same except for their return type.  Using configSTACK_DEPTH_TYPE allows the
3760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	user to determine the return type.  It gets around the problem of the value
3761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	overflowing on 8-bit types without breaking backward compatibility for
3762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	applications that expect an 8-bit return type. */
3763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configSTACK_DEPTH_TYPE uxTaskGetStackHighWaterMark2( TaskHandle_t xTask )
3764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t *pucEndOfStack;
3767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configSTACK_DEPTH_TYPE uxReturn;
3768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are
3770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the same except for their return type.  Using configSTACK_DEPTH_TYPE
3771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		allows the user to determine the return type.  It gets around the
3772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		problem of the value overflowing on 8-bit types without breaking
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 175


3773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		backward compatibility for applications that expect an 8-bit return
3774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		type. */
3775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxReturn = prvTaskCheckFreeStackSpace( pucEndOfStack );
3789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark2 */
3794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5931              		.loc 1 3799 2
 5932              		.cfi_startproc
 5933              		@ args = 0, pretend = 0, frame = 24
 5934              		@ frame_needed = 1, uses_anonymous_args = 0
 5935 0000 80B5     		push	{r7, lr}
 5936              	.LCFI229:
 5937              		.cfi_def_cfa_offset 8
 5938              		.cfi_offset 7, -8
 5939              		.cfi_offset 14, -4
 5940 0002 86B0     		sub	sp, sp, #24
 5941              	.LCFI230:
 5942              		.cfi_def_cfa_offset 32
 5943 0004 00AF     		add	r7, sp, #0
 5944              	.LCFI231:
 5945              		.cfi_def_cfa_register 7
 5946 0006 7860     		str	r0, [r7, #4]
3800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t *pucEndOfStack;
3802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 5947              		.loc 1 3804 11
 5948 0008 7B68     		ldr	r3, [r7, #4]
 5949 000a 002B     		cmp	r3, #0
 5950 000c 02D1     		bne	.L379
 5951              		.loc 1 3804 11 is_stmt 0 discriminator 1
 5952 000e 094B     		ldr	r3, .L382
 5953 0010 1B68     		ldr	r3, [r3]
 5954 0012 00E0     		b	.L380
 5955              	.L379:
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 176


 5956              		.loc 1 3804 11 discriminator 2
 5957 0014 7B68     		ldr	r3, [r7, #4]
 5958              	.L380:
 5959              		.loc 1 3804 9 is_stmt 1 discriminator 4
 5960 0016 7B61     		str	r3, [r7, #20]
3805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 5961              		.loc 1 3808 18 discriminator 4
 5962 0018 7B69     		ldr	r3, [r7, #20]
 5963 001a 1B6B     		ldr	r3, [r3, #48]
 5964 001c 3B61     		str	r3, [r7, #16]
3809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 5965              		.loc 1 3816 30 discriminator 4
 5966 001e 3869     		ldr	r0, [r7, #16]
 5967 0020 FFF7FEFF 		bl	prvTaskCheckFreeStackSpace
 5968 0024 0346     		mov	r3, r0
 5969              		.loc 1 3816 12 discriminator 4
 5970 0026 FB60     		str	r3, [r7, #12]
3817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
 5971              		.loc 1 3818 10 discriminator 4
 5972 0028 FB68     		ldr	r3, [r7, #12]
3819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5973              		.loc 1 3819 2 discriminator 4
 5974 002a 1846     		mov	r0, r3
 5975 002c 1837     		adds	r7, r7, #24
 5976              	.LCFI232:
 5977              		.cfi_def_cfa_offset 8
 5978 002e BD46     		mov	sp, r7
 5979              	.LCFI233:
 5980              		.cfi_def_cfa_register 13
 5981              		@ sp needed
 5982 0030 80BD     		pop	{r7, pc}
 5983              	.L383:
 5984 0032 00BF     		.align	2
 5985              	.L382:
 5986 0034 00000000 		.word	pxCurrentTCB
 5987              		.cfi_endproc
 5988              	.LFE49:
 5990              		.section	.text.prvDeleteTCB,"ax",%progbits
 5991              		.align	1
 5992              		.syntax unified
 5993              		.thumb
 5994              		.thumb_func
 5996              	prvDeleteTCB:
 5997              	.LFB50:
3820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 177


3822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5998              		.loc 1 3827 2
 5999              		.cfi_startproc
 6000              		@ args = 0, pretend = 0, frame = 16
 6001              		@ frame_needed = 1, uses_anonymous_args = 0
 6002 0000 80B5     		push	{r7, lr}
 6003              	.LCFI234:
 6004              		.cfi_def_cfa_offset 8
 6005              		.cfi_offset 7, -8
 6006              		.cfi_offset 14, -4
 6007 0002 84B0     		sub	sp, sp, #16
 6008              	.LCFI235:
 6009              		.cfi_def_cfa_offset 24
 6010 0004 00AF     		add	r7, sp, #0
 6011              	.LCFI236:
 6012              		.cfi_def_cfa_register 7
 6013 0006 7860     		str	r0, [r7, #4]
3828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		want to allocate and clean RAM statically. */
3831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to the task to free any memory allocated at the application level. */
3835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( p
3842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task can only have been allocated dynamically - free both
3844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the stack and TCB. */
3845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB->pxStack );
3846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB );
3847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consol
3849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task could have been allocated statically or dynamically, so
3851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			check what was statically allocated before trying to free the
3852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			memory. */
3853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 6014              		.loc 1 3853 13
 6015 0008 7B68     		ldr	r3, [r7, #4]
 6016 000a 93F85930 		ldrb	r3, [r3, #89]	@ zero_extendqisi2
 6017              		.loc 1 3853 6
 6018 000e 002B     		cmp	r3, #0
 6019 0010 08D1     		bne	.L385
3854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Both the stack and TCB were allocated dynamically, so both
3856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be freed. */
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 178


3857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB->pxStack );
 6020              		.loc 1 3857 21
 6021 0012 7B68     		ldr	r3, [r7, #4]
 6022 0014 1B6B     		ldr	r3, [r3, #48]
 6023              		.loc 1 3857 5
 6024 0016 1846     		mov	r0, r3
 6025 0018 FFF7FEFF 		bl	vPortFree
3858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
 6026              		.loc 1 3858 5
 6027 001c 7868     		ldr	r0, [r7, #4]
 6028 001e FFF7FEFF 		bl	vPortFree
3859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only the stack was statically allocated, so the TCB is the
3863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				only memory that must be freed. */
3864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Neither the stack nor the TCB were allocated dynamically, so
3869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing needs to be freed. */
3870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
3871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6029              		.loc 1 3875 2
 6030 0022 18E0     		b	.L389
 6031              	.L385:
3860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 6032              		.loc 1 3860 18
 6033 0024 7B68     		ldr	r3, [r7, #4]
 6034 0026 93F85930 		ldrb	r3, [r3, #89]	@ zero_extendqisi2
3860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 6035              		.loc 1 3860 11
 6036 002a 012B     		cmp	r3, #1
 6037 002c 03D1     		bne	.L387
3864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 6038              		.loc 1 3864 5
 6039 002e 7868     		ldr	r0, [r7, #4]
 6040 0030 FFF7FEFF 		bl	vPortFree
 6041              		.loc 1 3875 2
 6042 0034 0FE0     		b	.L389
 6043              	.L387:
3870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 6044              		.loc 1 3870 5
 6045 0036 7B68     		ldr	r3, [r7, #4]
 6046 0038 93F85930 		ldrb	r3, [r3, #89]	@ zero_extendqisi2
 6047 003c 022B     		cmp	r3, #2
 6048 003e 0AD0     		beq	.L389
 6049              	.LBB208:
 6050              	.LBB209:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 6051              		.loc 2 195 2
 6052              		.syntax unified
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 179


 6053              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 6054 0040 4FF05003 			mov r3, #80												
 6055 0044 83F31188 		msr basepri, r3											
 6056 0048 BFF36F8F 		isb														
 6057 004c BFF34F8F 		dsb														
 6058              	
 6059              	@ 0 "" 2
 6060              		.thumb
 6061              		.syntax unified
 6062 0050 FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 6063              		.loc 2 203 1
 6064 0052 00BF     		nop
 6065              	.L388:
 6066              	.LBE209:
 6067              	.LBE208:
3870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 6068              		.loc 1 3870 5 discriminator 1
 6069 0054 FEE7     		b	.L388
 6070              	.L389:
 6071              		.loc 1 3875 2
 6072 0056 00BF     		nop
 6073 0058 1037     		adds	r7, r7, #16
 6074              	.LCFI237:
 6075              		.cfi_def_cfa_offset 8
 6076 005a BD46     		mov	sp, r7
 6077              	.LCFI238:
 6078              		.cfi_def_cfa_register 13
 6079              		@ sp needed
 6080 005c 80BD     		pop	{r7, pc}
 6081              		.cfi_endproc
 6082              	.LFE50:
 6084              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
 6085              		.align	1
 6086              		.syntax unified
 6087              		.thumb
 6088              		.thumb_func
 6090              	prvResetNextTaskUnblockTime:
 6091              	.LFB51:
3876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 6092              		.loc 1 3881 1
 6093              		.cfi_startproc
 6094              		@ args = 0, pretend = 0, frame = 8
 6095              		@ frame_needed = 1, uses_anonymous_args = 0
 6096              		@ link register save eliminated.
 6097 0000 80B4     		push	{r7}
 6098              	.LCFI239:
 6099              		.cfi_def_cfa_offset 4
 6100              		.cfi_offset 7, -4
 6101 0002 83B0     		sub	sp, sp, #12
 6102              	.LCFI240:
 6103              		.cfi_def_cfa_offset 16
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 180


 6104 0004 00AF     		add	r7, sp, #0
 6105              	.LCFI241:
 6106              		.cfi_def_cfa_register 7
3882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
3883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 6107              		.loc 1 3884 6
 6108 0006 0C4B     		ldr	r3, .L394
 6109 0008 1B68     		ldr	r3, [r3]
 6110 000a 1B68     		ldr	r3, [r3]
 6111              		.loc 1 3884 4
 6112 000c 002B     		cmp	r3, #0
 6113 000e 04D1     		bne	.L391
3885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		there is an item in the delayed list. */
3890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 6114              		.loc 1 3890 24
 6115 0010 0A4B     		ldr	r3, .L394+4
 6116 0012 4FF0FF32 		mov	r2, #-1
 6117 0016 1A60     		str	r2, [r3]
3891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		which the task at the head of the delayed list should be removed
3897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from the Blocked state. */
3898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as thi
3899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
3900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 6118              		.loc 1 3901 1
 6119 0018 08E0     		b	.L393
 6120              	.L391:
3898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 6121              		.loc 1 3898 15
 6122 001a 074B     		ldr	r3, .L394
 6123 001c 1B68     		ldr	r3, [r3]
 6124 001e DB68     		ldr	r3, [r3, #12]
3898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 6125              		.loc 1 3898 13
 6126 0020 DB68     		ldr	r3, [r3, #12]
 6127 0022 7B60     		str	r3, [r7, #4]
3899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6128              		.loc 1 3899 26
 6129 0024 7B68     		ldr	r3, [r7, #4]
 6130 0026 5B68     		ldr	r3, [r3, #4]
3899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6131              		.loc 1 3899 24
 6132 0028 044A     		ldr	r2, .L394+4
 6133 002a 1360     		str	r3, [r2]
 6134              	.L393:
 6135              		.loc 1 3901 1
 6136 002c 00BF     		nop
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 181


 6137 002e 0C37     		adds	r7, r7, #12
 6138              	.LCFI242:
 6139              		.cfi_def_cfa_offset 4
 6140 0030 BD46     		mov	sp, r7
 6141              	.LCFI243:
 6142              		.cfi_def_cfa_register 13
 6143              		@ sp needed
 6144 0032 80BC     		pop	{r7}
 6145              	.LCFI244:
 6146              		.cfi_restore 7
 6147              		.cfi_def_cfa_offset 0
 6148 0034 7047     		bx	lr
 6149              	.L395:
 6150 0036 00BF     		.align	2
 6151              	.L394:
 6152 0038 00000000 		.word	pxDelayedTaskList
 6153 003c 00000000 		.word	xNextTaskUnblockTime
 6154              		.cfi_endproc
 6155              	.LFE51:
 6157              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 6158              		.align	1
 6159              		.global	xTaskGetCurrentTaskHandle
 6160              		.syntax unified
 6161              		.thumb
 6162              		.thumb_func
 6164              	xTaskGetCurrentTaskHandle:
 6165              	.LFB52:
3902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 6166              		.loc 1 3907 2
 6167              		.cfi_startproc
 6168              		@ args = 0, pretend = 0, frame = 8
 6169              		@ frame_needed = 1, uses_anonymous_args = 0
 6170              		@ link register save eliminated.
 6171 0000 80B4     		push	{r7}
 6172              	.LCFI245:
 6173              		.cfi_def_cfa_offset 4
 6174              		.cfi_offset 7, -4
 6175 0002 83B0     		sub	sp, sp, #12
 6176              	.LCFI246:
 6177              		.cfi_def_cfa_offset 16
 6178 0004 00AF     		add	r7, sp, #0
 6179              	.LCFI247:
 6180              		.cfi_def_cfa_register 7
3908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
3909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A critical section is not required as this is not called from
3911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		individual execution thread. */
3913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pxCurrentTCB;
 6181              		.loc 1 3913 11
 6182 0006 044B     		ldr	r3, .L398
 6183 0008 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 182


 6184 000a 7B60     		str	r3, [r7, #4]
3914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 6185              		.loc 1 3915 10
 6186 000c 7B68     		ldr	r3, [r7, #4]
3916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6187              		.loc 1 3916 2
 6188 000e 1846     		mov	r0, r3
 6189 0010 0C37     		adds	r7, r7, #12
 6190              	.LCFI248:
 6191              		.cfi_def_cfa_offset 4
 6192 0012 BD46     		mov	sp, r7
 6193              	.LCFI249:
 6194              		.cfi_def_cfa_register 13
 6195              		@ sp needed
 6196 0014 80BC     		pop	{r7}
 6197              	.LCFI250:
 6198              		.cfi_restore 7
 6199              		.cfi_def_cfa_offset 0
 6200 0016 7047     		bx	lr
 6201              	.L399:
 6202              		.align	2
 6203              	.L398:
 6204 0018 00000000 		.word	pxCurrentTCB
 6205              		.cfi_endproc
 6206              	.LFE52:
 6208              		.section	.text.xTaskGetSchedulerState,"ax",%progbits
 6209              		.align	1
 6210              		.global	xTaskGetSchedulerState
 6211              		.syntax unified
 6212              		.thumb
 6213              		.thumb_func
 6215              	xTaskGetSchedulerState:
 6216              	.LFB53:
3917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 6217              		.loc 1 3924 2
 6218              		.cfi_startproc
 6219              		@ args = 0, pretend = 0, frame = 8
 6220              		@ frame_needed = 1, uses_anonymous_args = 0
 6221              		@ link register save eliminated.
 6222 0000 80B4     		push	{r7}
 6223              	.LCFI251:
 6224              		.cfi_def_cfa_offset 4
 6225              		.cfi_offset 7, -4
 6226 0002 83B0     		sub	sp, sp, #12
 6227              	.LCFI252:
 6228              		.cfi_def_cfa_offset 16
 6229 0004 00AF     		add	r7, sp, #0
 6230              	.LCFI253:
 6231              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 183


3925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
3926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
 6232              		.loc 1 3927 25
 6233 0006 0B4B     		ldr	r3, .L405
 6234 0008 1B68     		ldr	r3, [r3]
 6235              		.loc 1 3927 5
 6236 000a 002B     		cmp	r3, #0
 6237 000c 02D1     		bne	.L401
3928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
 6238              		.loc 1 3929 12
 6239 000e 0123     		movs	r3, #1
 6240 0010 7B60     		str	r3, [r7, #4]
 6241 0012 08E0     		b	.L402
 6242              	.L401:
3930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 6243              		.loc 1 3933 29
 6244 0014 084B     		ldr	r3, .L405+4
 6245 0016 1B68     		ldr	r3, [r3]
 6246              		.loc 1 3933 6
 6247 0018 002B     		cmp	r3, #0
 6248 001a 02D1     		bne	.L403
3934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
 6249              		.loc 1 3935 13
 6250 001c 0223     		movs	r3, #2
 6251 001e 7B60     		str	r3, [r7, #4]
 6252 0020 01E0     		b	.L402
 6253              	.L403:
3936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
 6254              		.loc 1 3939 13
 6255 0022 0023     		movs	r3, #0
 6256 0024 7B60     		str	r3, [r7, #4]
 6257              	.L402:
3940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 6258              		.loc 1 3943 10
 6259 0026 7B68     		ldr	r3, [r7, #4]
3944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6260              		.loc 1 3944 2
 6261 0028 1846     		mov	r0, r3
 6262 002a 0C37     		adds	r7, r7, #12
 6263              	.LCFI254:
 6264              		.cfi_def_cfa_offset 4
 6265 002c BD46     		mov	sp, r7
 6266              	.LCFI255:
 6267              		.cfi_def_cfa_register 13
 6268              		@ sp needed
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 184


 6269 002e 80BC     		pop	{r7}
 6270              	.LCFI256:
 6271              		.cfi_restore 7
 6272              		.cfi_def_cfa_offset 0
 6273 0030 7047     		bx	lr
 6274              	.L406:
 6275 0032 00BF     		.align	2
 6276              	.L405:
 6277 0034 00000000 		.word	xSchedulerRunning
 6278 0038 00000000 		.word	uxSchedulerSuspended
 6279              		.cfi_endproc
 6280              	.LFE53:
 6282              		.section	.text.xTaskPriorityInherit,"ax",%progbits
 6283              		.align	1
 6284              		.global	xTaskPriorityInherit
 6285              		.syntax unified
 6286              		.thumb
 6287              		.thumb_func
 6289              	xTaskPriorityInherit:
 6290              	.LFB54:
3945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
3947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
3952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 6291              		.loc 1 3952 2
 6292              		.cfi_startproc
 6293              		@ args = 0, pretend = 0, frame = 16
 6294              		@ frame_needed = 1, uses_anonymous_args = 0
 6295 0000 80B5     		push	{r7, lr}
 6296              	.LCFI257:
 6297              		.cfi_def_cfa_offset 8
 6298              		.cfi_offset 7, -8
 6299              		.cfi_offset 14, -4
 6300 0002 84B0     		sub	sp, sp, #16
 6301              	.LCFI258:
 6302              		.cfi_def_cfa_offset 24
 6303 0004 00AF     		add	r7, sp, #0
 6304              	.LCFI259:
 6305              		.cfi_def_cfa_register 7
 6306 0006 7860     		str	r0, [r7, #4]
3953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 6307              		.loc 1 3953 16
 6308 0008 7B68     		ldr	r3, [r7, #4]
 6309 000a BB60     		str	r3, [r7, #8]
3954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 6310              		.loc 1 3954 13
 6311 000c 0023     		movs	r3, #0
 6312 000e FB60     		str	r3, [r7, #12]
3955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
3957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		locked then the mutex holder might now be NULL.  _RB_ Is this still
3958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		needed as interrupts can no longer use mutexes? */
3959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 185


 6313              		.loc 1 3959 5
 6314 0010 7B68     		ldr	r3, [r7, #4]
 6315 0012 002B     		cmp	r3, #0
 6316 0014 51D0     		beq	.L408
3960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
3962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
3963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
3964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 6317              		.loc 1 3964 24
 6318 0016 BB68     		ldr	r3, [r7, #8]
 6319 0018 DA6A     		ldr	r2, [r3, #44]
 6320              		.loc 1 3964 51
 6321 001a 2A4B     		ldr	r3, .L415
 6322 001c 1B68     		ldr	r3, [r3]
 6323 001e DB6A     		ldr	r3, [r3, #44]
 6324              		.loc 1 3964 6
 6325 0020 9A42     		cmp	r2, r3
 6326 0022 41D2     		bcs	.L409
3965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Adjust the mutex holder state to account for its new
3967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority.  Only reset the event list item value if the value is
3968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not being used for anything else. */
3969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VA
 6327              		.loc 1 3969 11
 6328 0024 BB68     		ldr	r3, [r7, #8]
 6329 0026 9B69     		ldr	r3, [r3, #24]
 6330              		.loc 1 3969 7
 6331 0028 002B     		cmp	r3, #0
 6332 002a 06DB     		blt	.L410
3970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIOR
 6333              		.loc 1 3971 6
 6334 002c 254B     		ldr	r3, .L415
 6335 002e 1B68     		ldr	r3, [r3]
 6336 0030 DB6A     		ldr	r3, [r3, #44]
 6337 0032 C3F13802 		rsb	r2, r3, #56
 6338 0036 BB68     		ldr	r3, [r7, #8]
 6339 0038 9A61     		str	r2, [r3, #24]
 6340              	.L410:
3972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task being modified is in the ready state it will need
3979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to be moved into a new list. */
3980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutex
 6341              		.loc 1 3980 9
 6342 003a BB68     		ldr	r3, [r7, #8]
 6343 003c 5969     		ldr	r1, [r3, #20]
 6344 003e BB68     		ldr	r3, [r7, #8]
 6345 0040 DA6A     		ldr	r2, [r3, #44]
 6346 0042 1346     		mov	r3, r2
 6347 0044 9B00     		lsls	r3, r3, #2
 6348 0046 1344     		add	r3, r3, r2
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 186


 6349 0048 9B00     		lsls	r3, r3, #2
 6350 004a 1F4A     		ldr	r2, .L415+4
 6351 004c 1344     		add	r3, r3, r2
 6352              		.loc 1 3980 7
 6353 004e 9942     		cmp	r1, r3
 6354 0050 22D1     		bne	.L411
3981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 6355              		.loc 1 3982 10
 6356 0052 BB68     		ldr	r3, [r7, #8]
 6357 0054 0433     		adds	r3, r3, #4
 6358 0056 1846     		mov	r0, r3
 6359 0058 FFF7FEFF 		bl	uxListRemove
3983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
3985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
3992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 6360              		.loc 1 3992 49
 6361 005c 194B     		ldr	r3, .L415
 6362 005e 1B68     		ldr	r3, [r3]
 6363 0060 DA6A     		ldr	r2, [r3, #44]
 6364              		.loc 1 3992 35
 6365 0062 BB68     		ldr	r3, [r7, #8]
 6366 0064 DA62     		str	r2, [r3, #44]
3993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
 6367              		.loc 1 3993 6
 6368 0066 BB68     		ldr	r3, [r7, #8]
 6369 0068 DA6A     		ldr	r2, [r3, #44]
 6370 006a 184B     		ldr	r3, .L415+8
 6371 006c 1B68     		ldr	r3, [r3]
 6372 006e 9A42     		cmp	r2, r3
 6373 0070 03D9     		bls	.L412
 6374              		.loc 1 3993 6 is_stmt 0 discriminator 1
 6375 0072 BB68     		ldr	r3, [r7, #8]
 6376 0074 DB6A     		ldr	r3, [r3, #44]
 6377 0076 154A     		ldr	r2, .L415+8
 6378 0078 1360     		str	r3, [r2]
 6379              	.L412:
 6380              		.loc 1 3993 6 discriminator 3
 6381 007a BB68     		ldr	r3, [r7, #8]
 6382 007c DA6A     		ldr	r2, [r3, #44]
 6383 007e 1346     		mov	r3, r2
 6384 0080 9B00     		lsls	r3, r3, #2
 6385 0082 1344     		add	r3, r3, r2
 6386 0084 9B00     		lsls	r3, r3, #2
 6387 0086 104A     		ldr	r2, .L415+4
 6388 0088 1A44     		add	r2, r2, r3
 6389 008a BB68     		ldr	r3, [r7, #8]
 6390 008c 0433     		adds	r3, r3, #4
 6391 008e 1946     		mov	r1, r3
 6392 0090 1046     		mov	r0, r2
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 187


 6393 0092 FFF7FEFF 		bl	vListInsertEnd
 6394 0096 04E0     		b	.L413
 6395              	.L411:
3994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Just inherit the priority. */
3998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 6396              		.loc 1 3998 49 is_stmt 1
 6397 0098 0A4B     		ldr	r3, .L415
 6398 009a 1B68     		ldr	r3, [r3]
 6399 009c DA6A     		ldr	r2, [r3, #44]
 6400              		.loc 1 3998 35
 6401 009e BB68     		ldr	r3, [r7, #8]
 6402 00a0 DA62     		str	r2, [r3, #44]
 6403              	.L413:
3999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
4002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Inheritance occurred. */
4004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
 6404              		.loc 1 4004 13
 6405 00a2 0123     		movs	r3, #1
 6406 00a4 FB60     		str	r3, [r7, #12]
 6407 00a6 08E0     		b	.L408
 6408              	.L409:
4005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 6409              		.loc 1 4008 25
 6410 00a8 BB68     		ldr	r3, [r7, #8]
 6411 00aa DA6C     		ldr	r2, [r3, #76]
 6412              		.loc 1 4008 56
 6413 00ac 054B     		ldr	r3, .L415
 6414 00ae 1B68     		ldr	r3, [r3]
 6415 00b0 DB6A     		ldr	r3, [r3, #44]
 6416              		.loc 1 4008 7
 6417 00b2 9A42     		cmp	r2, r3
 6418 00b4 01D2     		bcs	.L408
4009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The base priority of the mutex holder is lower than the
4011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority of the task attempting to take the mutex, but the
4012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					current priority of the mutex holder is not lower than the
4013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority of the task attempting to take the mutex.
4014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Therefore the mutex holder must have already inherited a
4015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority, but inheritance would have occurred if that had
4016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					not been the case. */
4017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
 6419              		.loc 1 4017 14
 6420 00b6 0123     		movs	r3, #1
 6421 00b8 FB60     		str	r3, [r7, #12]
 6422              	.L408:
4018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 188


4021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 6423              		.loc 1 4030 10
 6424 00ba FB68     		ldr	r3, [r7, #12]
4031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6425              		.loc 1 4031 2
 6426 00bc 1846     		mov	r0, r3
 6427 00be 1037     		adds	r7, r7, #16
 6428              	.LCFI260:
 6429              		.cfi_def_cfa_offset 8
 6430 00c0 BD46     		mov	sp, r7
 6431              	.LCFI261:
 6432              		.cfi_def_cfa_register 13
 6433              		@ sp needed
 6434 00c2 80BD     		pop	{r7, pc}
 6435              	.L416:
 6436              		.align	2
 6437              	.L415:
 6438 00c4 00000000 		.word	pxCurrentTCB
 6439 00c8 00000000 		.word	pxReadyTasksLists
 6440 00cc 00000000 		.word	uxTopReadyPriority
 6441              		.cfi_endproc
 6442              	.LFE54:
 6444              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 6445              		.align	1
 6446              		.global	xTaskPriorityDisinherit
 6447              		.syntax unified
 6448              		.thumb
 6449              		.thumb_func
 6451              	xTaskPriorityDisinherit:
 6452              	.LFB55:
4032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
4039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 6453              		.loc 1 4039 2
 6454              		.cfi_startproc
 6455              		@ args = 0, pretend = 0, frame = 24
 6456              		@ frame_needed = 1, uses_anonymous_args = 0
 6457 0000 80B5     		push	{r7, lr}
 6458              	.LCFI262:
 6459              		.cfi_def_cfa_offset 8
 6460              		.cfi_offset 7, -8
 6461              		.cfi_offset 14, -4
 6462 0002 86B0     		sub	sp, sp, #24
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 189


 6463              	.LCFI263:
 6464              		.cfi_def_cfa_offset 32
 6465 0004 00AF     		add	r7, sp, #0
 6466              	.LCFI264:
 6467              		.cfi_def_cfa_register 7
 6468 0006 7860     		str	r0, [r7, #4]
4040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 6469              		.loc 1 4040 16
 6470 0008 7B68     		ldr	r3, [r7, #4]
 6471 000a 3B61     		str	r3, [r7, #16]
4041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 6472              		.loc 1 4041 13
 6473 000c 0023     		movs	r3, #0
 6474 000e 7B61     		str	r3, [r7, #20]
4042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
 6475              		.loc 1 4043 5
 6476 0010 7B68     		ldr	r3, [r7, #4]
 6477 0012 002B     		cmp	r3, #0
 6478 0014 56D0     		beq	.L418
4044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
4046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			If the mutex is held by a task then it cannot be given from an
4047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
4048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			be the running state task. */
4049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
 6479              		.loc 1 4049 4
 6480 0016 2E4B     		ldr	r3, .L425
 6481 0018 1B68     		ldr	r3, [r3]
 6482 001a 3A69     		ldr	r2, [r7, #16]
 6483 001c 9A42     		cmp	r2, r3
 6484 001e 0AD0     		beq	.L419
 6485              	.LBB210:
 6486              	.LBB211:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 6487              		.loc 2 195 2
 6488              		.syntax unified
 6489              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 6490 0020 4FF05003 			mov r3, #80												
 6491 0024 83F31188 		msr basepri, r3											
 6492 0028 BFF36F8F 		isb														
 6493 002c BFF34F8F 		dsb														
 6494              	
 6495              	@ 0 "" 2
 6496              		.thumb
 6497              		.syntax unified
 6498 0030 FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 6499              		.loc 2 203 1
 6500 0032 00BF     		nop
 6501              	.L420:
 6502              	.LBE211:
 6503              	.LBE210:
 6504              		.loc 1 4049 4 discriminator 1
 6505 0034 FEE7     		b	.L420
 6506              	.L419:
4050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 190


 6507              		.loc 1 4050 4
 6508 0036 3B69     		ldr	r3, [r7, #16]
 6509 0038 1B6D     		ldr	r3, [r3, #80]
 6510 003a 002B     		cmp	r3, #0
 6511 003c 0AD1     		bne	.L421
 6512              	.LBB212:
 6513              	.LBB213:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 6514              		.loc 2 195 2
 6515              		.syntax unified
 6516              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 6517 003e 4FF05003 			mov r3, #80												
 6518 0042 83F31188 		msr basepri, r3											
 6519 0046 BFF36F8F 		isb														
 6520 004a BFF34F8F 		dsb														
 6521              	
 6522              	@ 0 "" 2
 6523              		.thumb
 6524              		.syntax unified
 6525 004e BB60     		str	r3, [r7, #8]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 6526              		.loc 2 203 1
 6527 0050 00BF     		nop
 6528              	.L422:
 6529              	.LBE213:
 6530              	.LBE212:
 6531              		.loc 1 4050 4 discriminator 2
 6532 0052 FEE7     		b	.L422
 6533              	.L421:
4051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 6534              		.loc 1 4051 11
 6535 0054 3B69     		ldr	r3, [r7, #16]
 6536 0056 1B6D     		ldr	r3, [r3, #80]
 6537              		.loc 1 4051 28
 6538 0058 5A1E     		subs	r2, r3, #1
 6539 005a 3B69     		ldr	r3, [r7, #16]
 6540 005c 1A65     		str	r2, [r3, #80]
4052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
4054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task? */
4055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 6541              		.loc 1 4055 13
 6542 005e 3B69     		ldr	r3, [r7, #16]
 6543 0060 DA6A     		ldr	r2, [r3, #44]
 6544              		.loc 1 4055 34
 6545 0062 3B69     		ldr	r3, [r7, #16]
 6546 0064 DB6C     		ldr	r3, [r3, #76]
 6547              		.loc 1 4055 6
 6548 0066 9A42     		cmp	r2, r3
 6549 0068 2CD0     		beq	.L418
4056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
4058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 6550              		.loc 1 4058 14
 6551 006a 3B69     		ldr	r3, [r7, #16]
 6552 006c 1B6D     		ldr	r3, [r3, #80]
 6553              		.loc 1 4058 7
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 191


 6554 006e 002B     		cmp	r3, #0
 6555 0070 28D1     		bne	.L418
4059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task can only have an inherited priority if it holds
4061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
4062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					given from an interrupt, and if a mutex is given by the
4063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					holding task then it must be the running state task.  Remove
4064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the holding task from the ready list. */
4065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 6556              		.loc 1 4065 10
 6557 0072 3B69     		ldr	r3, [r7, #16]
 6558 0074 0433     		adds	r3, r3, #4
 6559 0076 1846     		mov	r0, r3
 6560 0078 FFF7FEFF 		bl	uxListRemove
4066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
4068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority before adding the task into the
4075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new	ready list. */
4076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
 6561              		.loc 1 4077 31
 6562 007c 3B69     		ldr	r3, [r7, #16]
 6563 007e DA6C     		ldr	r2, [r3, #76]
 6564              		.loc 1 4077 24
 6565 0080 3B69     		ldr	r3, [r7, #16]
 6566 0082 DA62     		str	r2, [r3, #44]
4078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
4080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					any other purpose if this task is running, and it must be
4081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					running to give back the mutex. */
4082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
 6567              		.loc 1 4082 6
 6568 0084 3B69     		ldr	r3, [r7, #16]
 6569 0086 DB6A     		ldr	r3, [r3, #44]
 6570 0088 C3F13802 		rsb	r2, r3, #56
 6571 008c 3B69     		ldr	r3, [r7, #16]
 6572 008e 9A61     		str	r2, [r3, #24]
4083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 6573              		.loc 1 4083 6
 6574 0090 3B69     		ldr	r3, [r7, #16]
 6575 0092 DA6A     		ldr	r2, [r3, #44]
 6576 0094 0F4B     		ldr	r3, .L425+4
 6577 0096 1B68     		ldr	r3, [r3]
 6578 0098 9A42     		cmp	r2, r3
 6579 009a 03D9     		bls	.L423
 6580              		.loc 1 4083 6 is_stmt 0 discriminator 1
 6581 009c 3B69     		ldr	r3, [r7, #16]
 6582 009e DB6A     		ldr	r3, [r3, #44]
 6583 00a0 0C4A     		ldr	r2, .L425+4
 6584 00a2 1360     		str	r3, [r2]
 6585              	.L423:
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 192


 6586              		.loc 1 4083 6 discriminator 3
 6587 00a4 3B69     		ldr	r3, [r7, #16]
 6588 00a6 DA6A     		ldr	r2, [r3, #44]
 6589 00a8 1346     		mov	r3, r2
 6590 00aa 9B00     		lsls	r3, r3, #2
 6591 00ac 1344     		add	r3, r3, r2
 6592 00ae 9B00     		lsls	r3, r3, #2
 6593 00b0 094A     		ldr	r2, .L425+8
 6594 00b2 1A44     		add	r2, r2, r3
 6595 00b4 3B69     		ldr	r3, [r7, #16]
 6596 00b6 0433     		adds	r3, r3, #4
 6597 00b8 1946     		mov	r1, r3
 6598 00ba 1046     		mov	r0, r2
 6599 00bc FFF7FEFF 		bl	vListInsertEnd
4084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Return true to indicate that a context switch is required.
4086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This is only actually required in the corner case whereby
4087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					multiple mutexes were held and the mutexes were given back
4088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					in an order different to that in which they were taken.
4089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					If a context switch did not occur when the first mutex was
4090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					returned, even if a task was waiting on it, then a context
4091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					switch should occur when the last mutex is returned whether
4092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a task is waiting on it or not. */
4093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
 6600              		.loc 1 4093 14 is_stmt 1 discriminator 3
 6601 00c0 0123     		movs	r3, #1
 6602 00c2 7B61     		str	r3, [r7, #20]
 6603              	.L418:
4094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 6604              		.loc 1 4110 10
 6605 00c4 7B69     		ldr	r3, [r7, #20]
4111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6606              		.loc 1 4111 2
 6607 00c6 1846     		mov	r0, r3
 6608 00c8 1837     		adds	r7, r7, #24
 6609              	.LCFI265:
 6610              		.cfi_def_cfa_offset 8
 6611 00ca BD46     		mov	sp, r7
 6612              	.LCFI266:
 6613              		.cfi_def_cfa_register 13
 6614              		@ sp needed
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 193


 6615 00cc 80BD     		pop	{r7, pc}
 6616              	.L426:
 6617 00ce 00BF     		.align	2
 6618              	.L425:
 6619 00d0 00000000 		.word	pxCurrentTCB
 6620 00d4 00000000 		.word	uxTopReadyPriority
 6621 00d8 00000000 		.word	pxReadyTasksLists
 6622              		.cfi_endproc
 6623              	.LFE55:
 6625              		.section	.text.vTaskPriorityDisinheritAfterTimeout,"ax",%progbits
 6626              		.align	1
 6627              		.global	vTaskPriorityDisinheritAfterTimeout
 6628              		.syntax unified
 6629              		.thumb
 6630              		.thumb_func
 6632              	vTaskPriorityDisinheritAfterTimeout:
 6633              	.LFB56:
4112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestP
4119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 6634              		.loc 1 4119 2
 6635              		.cfi_startproc
 6636              		@ args = 0, pretend = 0, frame = 32
 6637              		@ frame_needed = 1, uses_anonymous_args = 0
 6638 0000 80B5     		push	{r7, lr}
 6639              	.LCFI267:
 6640              		.cfi_def_cfa_offset 8
 6641              		.cfi_offset 7, -8
 6642              		.cfi_offset 14, -4
 6643 0002 88B0     		sub	sp, sp, #32
 6644              	.LCFI268:
 6645              		.cfi_def_cfa_offset 40
 6646 0004 00AF     		add	r7, sp, #0
 6647              	.LCFI269:
 6648              		.cfi_def_cfa_register 7
 6649 0006 7860     		str	r0, [r7, #4]
 6650 0008 3960     		str	r1, [r7]
4120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 6651              		.loc 1 4120 16
 6652 000a 7B68     		ldr	r3, [r7, #4]
 6653 000c BB61     		str	r3, [r7, #24]
4121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
4122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 6654              		.loc 1 4122 20
 6655 000e 0123     		movs	r3, #1
 6656 0010 7B61     		str	r3, [r7, #20]
4123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
 6657              		.loc 1 4124 5
 6658 0012 7B68     		ldr	r3, [r7, #4]
 6659 0014 002B     		cmp	r3, #0
 6660 0016 6AD0     		beq	.L437
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 194


4125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If pxMutexHolder is not NULL then the holder must hold at least
4127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			one mutex. */
4128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 6661              		.loc 1 4128 4
 6662 0018 BB69     		ldr	r3, [r7, #24]
 6663 001a 1B6D     		ldr	r3, [r3, #80]
 6664 001c 002B     		cmp	r3, #0
 6665 001e 0AD1     		bne	.L429
 6666              	.LBB214:
 6667              	.LBB215:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 6668              		.loc 2 195 2
 6669              		.syntax unified
 6670              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 6671 0020 4FF05003 			mov r3, #80												
 6672 0024 83F31188 		msr basepri, r3											
 6673 0028 BFF36F8F 		isb														
 6674 002c BFF34F8F 		dsb														
 6675              	
 6676              	@ 0 "" 2
 6677              		.thumb
 6678              		.syntax unified
 6679 0030 FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 6680              		.loc 2 203 1
 6681 0032 00BF     		nop
 6682              	.L430:
 6683              	.LBE215:
 6684              	.LBE214:
 6685              		.loc 1 4128 4 discriminator 1
 6686 0034 FEE7     		b	.L430
 6687              	.L429:
4129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Determine the priority to which the priority of the task that
4131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			holds the mutex should be set.  This will be the greater of the
4132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			holding task's base priority and the priority of the highest
4133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			priority task that is waiting to obtain the mutex. */
4134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 6688              		.loc 1 4134 13
 6689 0036 BB69     		ldr	r3, [r7, #24]
 6690 0038 DB6C     		ldr	r3, [r3, #76]
 6691              		.loc 1 4134 6
 6692 003a 3A68     		ldr	r2, [r7]
 6693 003c 9A42     		cmp	r2, r3
 6694 003e 02D9     		bls	.L431
4135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityToUse = uxHighestPriorityWaitingTask;
 6695              		.loc 1 4136 21
 6696 0040 3B68     		ldr	r3, [r7]
 6697 0042 FB61     		str	r3, [r7, #28]
 6698 0044 02E0     		b	.L432
 6699              	.L431:
4137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityToUse = pxTCB->uxBasePriority;
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 195


 6700              		.loc 1 4140 21
 6701 0046 BB69     		ldr	r3, [r7, #24]
 6702 0048 DB6C     		ldr	r3, [r3, #76]
 6703 004a FB61     		str	r3, [r7, #28]
 6704              	.L432:
4141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Does the priority need to change? */
4144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != uxPriorityToUse )
 6705              		.loc 1 4144 13
 6706 004c BB69     		ldr	r3, [r7, #24]
 6707 004e DB6A     		ldr	r3, [r3, #44]
 6708              		.loc 1 4144 6
 6709 0050 FA69     		ldr	r2, [r7, #28]
 6710 0052 9A42     		cmp	r2, r3
 6711 0054 4BD0     		beq	.L437
4145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held.  This is a
4147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				simplification in the priority inheritance implementation.  If
4148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task that holds the mutex is also holding other mutexes then
4149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the other mutexes may have caused the priority inheritance. */
4150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 6712              		.loc 1 4150 14
 6713 0056 BB69     		ldr	r3, [r7, #24]
 6714 0058 1B6D     		ldr	r3, [r3, #80]
 6715              		.loc 1 4150 7
 6716 005a 7A69     		ldr	r2, [r7, #20]
 6717 005c 9A42     		cmp	r2, r3
 6718 005e 46D1     		bne	.L437
4151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If a task has timed out because it already holds the
4153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mutex it was trying to obtain then it cannot of inherited
4154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					its own priority. */
4155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB != pxCurrentTCB );
 6719              		.loc 1 4155 6
 6720 0060 254B     		ldr	r3, .L438
 6721 0062 1B68     		ldr	r3, [r3]
 6722 0064 BA69     		ldr	r2, [r7, #24]
 6723 0066 9A42     		cmp	r2, r3
 6724 0068 0AD1     		bne	.L433
 6725              	.LBB216:
 6726              	.LBB217:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 6727              		.loc 2 195 2
 6728              		.syntax unified
 6729              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 6730 006a 4FF05003 			mov r3, #80												
 6731 006e 83F31188 		msr basepri, r3											
 6732 0072 BFF36F8F 		isb														
 6733 0076 BFF34F8F 		dsb														
 6734              	
 6735              	@ 0 "" 2
 6736              		.thumb
 6737              		.syntax unified
 6738 007a BB60     		str	r3, [r7, #8]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 6739              		.loc 2 203 1
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 196


 6740 007c 00BF     		nop
 6741              	.L434:
 6742              	.LBE217:
 6743              	.LBE216:
 6744              		.loc 1 4155 6 discriminator 2
 6745 007e FEE7     		b	.L434
 6746              	.L433:
4156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority, remembering the previous
4158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority to facilitate determining the subject task's
4159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					state. */
4160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 6747              		.loc 1 4161 28
 6748 0080 BB69     		ldr	r3, [r7, #24]
 6749 0082 DB6A     		ldr	r3, [r3, #44]
 6750 0084 3B61     		str	r3, [r7, #16]
4162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxPriorityToUse;
 6751              		.loc 1 4162 24
 6752 0086 BB69     		ldr	r3, [r7, #24]
 6753 0088 FA69     		ldr	r2, [r7, #28]
 6754 008a DA62     		str	r2, [r3, #44]
4163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Only reset the event list item value if the value is not
4165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					being used for anything else. */
4166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE
 6755              		.loc 1 4166 12
 6756 008c BB69     		ldr	r3, [r7, #24]
 6757 008e 9B69     		ldr	r3, [r3, #24]
 6758              		.loc 1 4166 8
 6759 0090 002B     		cmp	r3, #0
 6760 0092 04DB     		blt	.L435
4167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( 
 6761              		.loc 1 4168 7
 6762 0094 FB69     		ldr	r3, [r7, #28]
 6763 0096 C3F13802 		rsb	r2, r3, #56
 6764 009a BB69     		ldr	r3, [r7, #24]
 6765 009c 9A61     		str	r2, [r3, #24]
 6766              	.L435:
4169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the running task is not the task that holds the mutex
4176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					then the task that holds the mutex could be in either the
4177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Ready, Blocked or Suspended states.  Only remove the task
4178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					from its current state list if it is in the Ready state as
4179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the task's priority is going to change and there is one
4180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Ready list per priority. */
4181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xState
 6767              		.loc 1 4181 10
 6768 009e BB69     		ldr	r3, [r7, #24]
 6769 00a0 5969     		ldr	r1, [r3, #20]
 6770 00a2 3A69     		ldr	r2, [r7, #16]
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 197


 6771 00a4 1346     		mov	r3, r2
 6772 00a6 9B00     		lsls	r3, r3, #2
 6773 00a8 1344     		add	r3, r3, r2
 6774 00aa 9B00     		lsls	r3, r3, #2
 6775 00ac 134A     		ldr	r2, .L438+4
 6776 00ae 1344     		add	r3, r3, r2
 6777              		.loc 1 4181 8
 6778 00b0 9942     		cmp	r1, r3
 6779 00b2 1CD1     		bne	.L437
4182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 6780              		.loc 1 4183 11
 6781 00b4 BB69     		ldr	r3, [r7, #24]
 6782 00b6 0433     		adds	r3, r3, #4
 6783 00b8 1846     		mov	r0, r3
 6784 00ba FFF7FEFF 		bl	uxListRemove
4184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
4186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
4188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
4190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						prvAddTaskToReadyList( pxTCB );
 6785              		.loc 1 4192 7
 6786 00be BB69     		ldr	r3, [r7, #24]
 6787 00c0 DA6A     		ldr	r2, [r3, #44]
 6788 00c2 0F4B     		ldr	r3, .L438+8
 6789 00c4 1B68     		ldr	r3, [r3]
 6790 00c6 9A42     		cmp	r2, r3
 6791 00c8 03D9     		bls	.L436
 6792              		.loc 1 4192 7 is_stmt 0 discriminator 1
 6793 00ca BB69     		ldr	r3, [r7, #24]
 6794 00cc DB6A     		ldr	r3, [r3, #44]
 6795 00ce 0C4A     		ldr	r2, .L438+8
 6796 00d0 1360     		str	r3, [r2]
 6797              	.L436:
 6798              		.loc 1 4192 7 discriminator 3
 6799 00d2 BB69     		ldr	r3, [r7, #24]
 6800 00d4 DA6A     		ldr	r2, [r3, #44]
 6801 00d6 1346     		mov	r3, r2
 6802 00d8 9B00     		lsls	r3, r3, #2
 6803 00da 1344     		add	r3, r3, r2
 6804 00dc 9B00     		lsls	r3, r3, #2
 6805 00de 074A     		ldr	r2, .L438+4
 6806 00e0 1A44     		add	r2, r2, r3
 6807 00e2 BB69     		ldr	r3, [r7, #24]
 6808 00e4 0433     		adds	r3, r3, #4
 6809 00e6 1946     		mov	r1, r3
 6810 00e8 1046     		mov	r0, r2
 6811 00ea FFF7FEFF 		bl	vListInsertEnd
 6812              	.L437:
4193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 198


4197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6813              		.loc 1 4213 2 is_stmt 1
 6814 00ee 00BF     		nop
 6815 00f0 2037     		adds	r7, r7, #32
 6816              	.LCFI270:
 6817              		.cfi_def_cfa_offset 8
 6818 00f2 BD46     		mov	sp, r7
 6819              	.LCFI271:
 6820              		.cfi_def_cfa_register 13
 6821              		@ sp needed
 6822 00f4 80BD     		pop	{r7, pc}
 6823              	.L439:
 6824 00f6 00BF     		.align	2
 6825              	.L438:
 6826 00f8 00000000 		.word	pxCurrentTCB
 6827 00fc 00000000 		.word	pxReadyTasksLists
 6828 0100 00000000 		.word	uxTopReadyPriority
 6829              		.cfi_endproc
 6830              	.LFE56:
 6832              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 6833              		.align	1
 6834              		.global	uxTaskResetEventItemValue
 6835              		.syntax unified
 6836              		.thumb
 6837              		.thumb_func
 6839              	uxTaskResetEventItemValue:
 6840              	.LFB57:
4214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskEnterCritical( void )
4221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
4223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
4227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 199


4228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
4229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function so	assert() if it is being called from an interrupt
4230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
4231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
4232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			protect against recursive calls if the assert function also uses a
4233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			critical section. */
4234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
4235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portASSERT_IF_IN_ISR();
4237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskExitCritical( void )
4251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
4255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
4257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
4259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portENABLE_INTERRUPTS();
4261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
4284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 200


4285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	size_t x;
4286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Start by copying the entire string. */
4288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		strcpy( pcBuffer, pcTaskName );
4289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
4291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		printed out. */
4292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
4293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pcBuffer[ x ] = ' ';
4295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Terminate. */
4298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pcBuffer[ x ] = ( char ) 0x00;
4299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return the new end of string. */
4301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return &( pcBuffer[ x ] );
4302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
4305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( config
4308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
4310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxArraySize, x;
4313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cStatus;
4314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
4316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
4321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
4323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
4324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays task names, states and stack usage.
4325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
4327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
4328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
4329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
4330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
4331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
4332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * snprintf() implementation!).
4333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskList().
4337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
4338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = ( char ) 0x00;
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 201


4342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
4345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  if
4348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
4350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e907
4351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
4355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
4356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Create a human readable table from the binary data. */
4358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
4359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
4361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eRunning:		cStatus = tskRUNNING_CHAR;
4363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
4366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
4369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
4372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
4375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eInvalid:		/* Fall through. */
4378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					default:			/* Should not get here, but it is included
4379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										to prevent static checking errors. */
4380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										cStatus = ( char ) 0x00;
4381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the task name to the string, padding with spaces so it
4385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				can be printed in tabular form more easily. */
4386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the rest of the string. */
4389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
4390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers 
4391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 202


4399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( 
4404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
4405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( c
4407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
4409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxArraySize, x;
4412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
4413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
4415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
4417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
4419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
4421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
4426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
4429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
4430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * in both absolute and percentage terms.
4431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
4434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * provide different results on different platforms.  An alternative,
4435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
4436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a full snprintf() implementation!).
4439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
4443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
4444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = ( char ) 0x00;
4447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
4450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  If
4453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
4455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e907
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 203


4456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
4460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* For percentage calculations. */
4463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulTotalTime /= 100UL;
4464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Avoid divide by zero errors. */
4466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulTotalTime > 0UL )
4467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Create a human readable table from the binary data. */
4469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
4470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* What percentage of the total run time has the task used?
4472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This will always be rounded down to the nearest integer.
4473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
4474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Write the task name to the string, padding with
4477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					spaces so it can be printed in tabular form more
4478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					easily. */
4479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
4482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
4486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* If the percentage is zero here then the task has
4498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						consumed less than 1% of the total run time. */
4499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
4502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 204


4513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 6841              		.loc 1 4534 1
 6842              		.cfi_startproc
 6843              		@ args = 0, pretend = 0, frame = 8
 6844              		@ frame_needed = 1, uses_anonymous_args = 0
 6845              		@ link register save eliminated.
 6846 0000 80B4     		push	{r7}
 6847              	.LCFI272:
 6848              		.cfi_def_cfa_offset 4
 6849              		.cfi_offset 7, -4
 6850 0002 83B0     		sub	sp, sp, #12
 6851              	.LCFI273:
 6852              		.cfi_def_cfa_offset 16
 6853 0004 00AF     		add	r7, sp, #0
 6854              	.LCFI274:
 6855              		.cfi_def_cfa_register 7
4535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxReturn;
4536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 6856              		.loc 1 4537 13
 6857 0006 094B     		ldr	r3, .L442
 6858 0008 1B68     		ldr	r3, [r3]
 6859              		.loc 1 4537 11
 6860 000a 9B69     		ldr	r3, [r3, #24]
 6861 000c 7B60     		str	r3, [r7, #4]
4538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
4540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queues and semaphores. */
4541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
 6862              		.loc 1 4541 2
 6863 000e 074B     		ldr	r3, .L442
 6864 0010 1B68     		ldr	r3, [r3]
 6865 0012 DA6A     		ldr	r2, [r3, #44]
 6866 0014 054B     		ldr	r3, .L442
 6867 0016 1B68     		ldr	r3, [r3]
 6868 0018 C2F13802 		rsb	r2, r2, #56
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 205


 6869 001c 9A61     		str	r2, [r3, #24]
4542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxReturn;
 6870              		.loc 1 4543 9
 6871 001e 7B68     		ldr	r3, [r7, #4]
4544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 6872              		.loc 1 4544 1
 6873 0020 1846     		mov	r0, r3
 6874 0022 0C37     		adds	r7, r7, #12
 6875              	.LCFI275:
 6876              		.cfi_def_cfa_offset 4
 6877 0024 BD46     		mov	sp, r7
 6878              	.LCFI276:
 6879              		.cfi_def_cfa_register 13
 6880              		@ sp needed
 6881 0026 80BC     		pop	{r7}
 6882              	.LCFI277:
 6883              		.cfi_restore 7
 6884              		.cfi_def_cfa_offset 0
 6885 0028 7047     		bx	lr
 6886              	.L443:
 6887 002a 00BF     		.align	2
 6888              	.L442:
 6889 002c 00000000 		.word	pxCurrentTCB
 6890              		.cfi_endproc
 6891              	.LFE57:
 6893              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 6894              		.align	1
 6895              		.global	pvTaskIncrementMutexHeldCount
 6896              		.syntax unified
 6897              		.thumb
 6898              		.thumb_func
 6900              	pvTaskIncrementMutexHeldCount:
 6901              	.LFB58:
4545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
4550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 6902              		.loc 1 4550 2
 6903              		.cfi_startproc
 6904              		@ args = 0, pretend = 0, frame = 0
 6905              		@ frame_needed = 1, uses_anonymous_args = 0
 6906              		@ link register save eliminated.
 6907 0000 80B4     		push	{r7}
 6908              	.LCFI278:
 6909              		.cfi_def_cfa_offset 4
 6910              		.cfi_offset 7, -4
 6911 0002 00AF     		add	r7, sp, #0
 6912              	.LCFI279:
 6913              		.cfi_def_cfa_register 7
4551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
4552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then pxCurrentTCB will be NULL. */
4553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB != NULL )
 6914              		.loc 1 4553 20
 6915 0004 074B     		ldr	r3, .L447
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 206


 6916 0006 1B68     		ldr	r3, [r3]
 6917              		.loc 1 4553 5
 6918 0008 002B     		cmp	r3, #0
 6919 000a 04D0     		beq	.L445
4554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
 6920              		.loc 1 4555 18
 6921 000c 054B     		ldr	r3, .L447
 6922 000e 1B68     		ldr	r3, [r3]
 6923 0010 1A6D     		ldr	r2, [r3, #80]
 6924              		.loc 1 4555 35
 6925 0012 0132     		adds	r2, r2, #1
 6926 0014 1A65     		str	r2, [r3, #80]
 6927              	.L445:
4556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxCurrentTCB;
 6928              		.loc 1 4558 10
 6929 0016 034B     		ldr	r3, .L447
 6930 0018 1B68     		ldr	r3, [r3]
4559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6931              		.loc 1 4559 2
 6932 001a 1846     		mov	r0, r3
 6933 001c BD46     		mov	sp, r7
 6934              	.LCFI280:
 6935              		.cfi_def_cfa_register 13
 6936              		@ sp needed
 6937 001e 80BC     		pop	{r7}
 6938              	.LCFI281:
 6939              		.cfi_restore 7
 6940              		.cfi_def_cfa_offset 0
 6941 0020 7047     		bx	lr
 6942              	.L448:
 6943 0022 00BF     		.align	2
 6944              	.L447:
 6945 0024 00000000 		.word	pxCurrentTCB
 6946              		.cfi_endproc
 6947              	.LFE58:
 6949              		.section	.text.ulTaskNotifyTake,"ax",%progbits
 6950              		.align	1
 6951              		.global	ulTaskNotifyTake
 6952              		.syntax unified
 6953              		.thumb
 6954              		.thumb_func
 6956              	ulTaskNotifyTake:
 6957              	.LFB59:
4560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
4567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 6958              		.loc 1 4567 2
 6959              		.cfi_startproc
 6960              		@ args = 0, pretend = 0, frame = 16
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 207


 6961              		@ frame_needed = 1, uses_anonymous_args = 0
 6962 0000 80B5     		push	{r7, lr}
 6963              	.LCFI282:
 6964              		.cfi_def_cfa_offset 8
 6965              		.cfi_offset 7, -8
 6966              		.cfi_offset 14, -4
 6967 0002 84B0     		sub	sp, sp, #16
 6968              	.LCFI283:
 6969              		.cfi_def_cfa_offset 24
 6970 0004 00AF     		add	r7, sp, #0
 6971              	.LCFI284:
 6972              		.cfi_def_cfa_register 7
 6973 0006 7860     		str	r0, [r7, #4]
 6974 0008 3960     		str	r1, [r7]
4568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
4569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 6975              		.loc 1 4570 3
 6976 000a FFF7FEFF 		bl	vPortEnterCritical
4571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if the notification count is not already non-zero. */
4573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 6977              		.loc 1 4573 20
 6978 000e 1E4B     		ldr	r3, .L454
 6979 0010 1B68     		ldr	r3, [r3]
 6980 0012 5B6D     		ldr	r3, [r3, #84]
 6981              		.loc 1 4573 6
 6982 0014 002B     		cmp	r3, #0
 6983 0016 13D1     		bne	.L450
4574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 6984              		.loc 1 4576 17
 6985 0018 1B4B     		ldr	r3, .L454
 6986 001a 1B68     		ldr	r3, [r3]
 6987              		.loc 1 4576 33
 6988 001c 0122     		movs	r2, #1
 6989 001e 83F85820 		strb	r2, [r3, #88]
4577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
 6990              		.loc 1 4578 7
 6991 0022 3B68     		ldr	r3, [r7]
 6992 0024 002B     		cmp	r3, #0
 6993 0026 0BD0     		beq	.L450
4579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 6994              		.loc 1 4580 6
 6995 0028 0121     		movs	r1, #1
 6996 002a 3868     		ldr	r0, [r7]
 6997 002c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
4581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
4582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 208


 6998              		.loc 1 4587 6
 6999 0030 164B     		ldr	r3, .L454+4
 7000 0032 4FF08052 		mov	r2, #268435456
 7001 0036 1A60     		str	r2, [r3]
 7002              		.syntax unified
 7003              	@ 4587 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 7004 0038 BFF34F8F 		dsb
 7005              	@ 0 "" 2
 7006              	@ 4587 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 7007 003c BFF36F8F 		isb
 7008              	@ 0 "" 2
 7009              		.thumb
 7010              		.syntax unified
 7011              	.L450:
4588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 7012              		.loc 1 4599 3
 7013 0040 FFF7FEFF 		bl	vPortExitCritical
4600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 7014              		.loc 1 4601 3
 7015 0044 FFF7FEFF 		bl	vPortEnterCritical
4602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_TAKE();
4604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
 7016              		.loc 1 4604 27
 7017 0048 0F4B     		ldr	r3, .L454
 7018 004a 1B68     		ldr	r3, [r3]
 7019              		.loc 1 4604 13
 7020 004c 5B6D     		ldr	r3, [r3, #84]
 7021 004e FB60     		str	r3, [r7, #12]
4605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulReturn != 0UL )
 7022              		.loc 1 4606 6
 7023 0050 FB68     		ldr	r3, [r7, #12]
 7024 0052 002B     		cmp	r3, #0
 7025 0054 0CD0     		beq	.L451
4607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xClearCountOnExit != pdFALSE )
 7026              		.loc 1 4608 7
 7027 0056 7B68     		ldr	r3, [r7, #4]
 7028 0058 002B     		cmp	r3, #0
 7029 005a 04D0     		beq	.L452
4609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
 7030              		.loc 1 4610 18
 7031 005c 0A4B     		ldr	r3, .L454
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 209


 7032 005e 1B68     		ldr	r3, [r3]
 7033              		.loc 1 4610 36
 7034 0060 0022     		movs	r2, #0
 7035 0062 5A65     		str	r2, [r3, #84]
 7036 0064 04E0     		b	.L451
 7037              	.L452:
4611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 7038              		.loc 1 4614 18
 7039 0066 084B     		ldr	r3, .L454
 7040 0068 1B68     		ldr	r3, [r3]
 7041              		.loc 1 4614 47
 7042 006a FA68     		ldr	r2, [r7, #12]
 7043 006c 013A     		subs	r2, r2, #1
 7044              		.loc 1 4614 36
 7045 006e 5A65     		str	r2, [r3, #84]
 7046              	.L451:
4615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 7047              		.loc 1 4622 16
 7048 0070 054B     		ldr	r3, .L454
 7049 0072 1B68     		ldr	r3, [r3]
 7050              		.loc 1 4622 32
 7051 0074 0022     		movs	r2, #0
 7052 0076 83F85820 		strb	r2, [r3, #88]
4623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 7053              		.loc 1 4624 3
 7054 007a FFF7FEFF 		bl	vPortExitCritical
4625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ulReturn;
 7055              		.loc 1 4626 10
 7056 007e FB68     		ldr	r3, [r7, #12]
4627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 7057              		.loc 1 4627 2
 7058 0080 1846     		mov	r0, r3
 7059 0082 1037     		adds	r7, r7, #16
 7060              	.LCFI285:
 7061              		.cfi_def_cfa_offset 8
 7062 0084 BD46     		mov	sp, r7
 7063              	.LCFI286:
 7064              		.cfi_def_cfa_register 13
 7065              		@ sp needed
 7066 0086 80BD     		pop	{r7, pc}
 7067              	.L455:
 7068              		.align	2
 7069              	.L454:
 7070 0088 00000000 		.word	pxCurrentTCB
 7071 008c 04ED00E0 		.word	-536810236
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 210


 7072              		.cfi_endproc
 7073              	.LFE59:
 7075              		.section	.text.xTaskNotifyWait,"ax",%progbits
 7076              		.align	1
 7077              		.global	xTaskNotifyWait
 7078              		.syntax unified
 7079              		.thumb
 7080              		.thumb_func
 7082              	xTaskNotifyWait:
 7083              	.LFB60:
4628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
4635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 7084              		.loc 1 4635 2
 7085              		.cfi_startproc
 7086              		@ args = 0, pretend = 0, frame = 24
 7087              		@ frame_needed = 1, uses_anonymous_args = 0
 7088 0000 80B5     		push	{r7, lr}
 7089              	.LCFI287:
 7090              		.cfi_def_cfa_offset 8
 7091              		.cfi_offset 7, -8
 7092              		.cfi_offset 14, -4
 7093 0002 86B0     		sub	sp, sp, #24
 7094              	.LCFI288:
 7095              		.cfi_def_cfa_offset 32
 7096 0004 00AF     		add	r7, sp, #0
 7097              	.LCFI289:
 7098              		.cfi_def_cfa_register 7
 7099 0006 F860     		str	r0, [r7, #12]
 7100 0008 B960     		str	r1, [r7, #8]
 7101 000a 7A60     		str	r2, [r7, #4]
 7102 000c 3B60     		str	r3, [r7]
4636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
4637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 7103              		.loc 1 4638 3
 7104 000e FFF7FEFF 		bl	vPortEnterCritical
4639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if a notification is not already pending. */
4641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 7105              		.loc 1 4641 20
 7106 0012 264B     		ldr	r3, .L462
 7107 0014 1B68     		ldr	r3, [r3]
 7108 0016 93F85830 		ldrb	r3, [r3, #88]
 7109 001a DBB2     		uxtb	r3, r3
 7110              		.loc 1 4641 6
 7111 001c 022B     		cmp	r3, #2
 7112 001e 1AD0     		beq	.L457
4642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Clear bits in the task's notification value as bits may get
4644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				clear the value to zero. */
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 211


4646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 7113              		.loc 1 4646 35
 7114 0020 224B     		ldr	r3, .L462
 7115 0022 1B68     		ldr	r3, [r3]
 7116 0024 596D     		ldr	r1, [r3, #84]
 7117              		.loc 1 4646 38
 7118 0026 FA68     		ldr	r2, [r7, #12]
 7119 0028 D243     		mvns	r2, r2
 7120              		.loc 1 4646 35
 7121 002a 0A40     		ands	r2, r2, r1
 7122 002c 5A65     		str	r2, [r3, #84]
4647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 7123              		.loc 1 4649 17
 7124 002e 1F4B     		ldr	r3, .L462
 7125 0030 1B68     		ldr	r3, [r3]
 7126              		.loc 1 4649 33
 7127 0032 0122     		movs	r2, #1
 7128 0034 83F85820 		strb	r2, [r3, #88]
4650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
 7129              		.loc 1 4651 7
 7130 0038 3B68     		ldr	r3, [r7]
 7131 003a 002B     		cmp	r3, #0
 7132 003c 0BD0     		beq	.L457
4652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 7133              		.loc 1 4653 6
 7134 003e 0121     		movs	r1, #1
 7135 0040 3868     		ldr	r0, [r7]
 7136 0042 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
4654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
 7137              		.loc 1 4660 6
 7138 0046 1A4B     		ldr	r3, .L462+4
 7139 0048 4FF08052 		mov	r2, #268435456
 7140 004c 1A60     		str	r2, [r3]
 7141              		.syntax unified
 7142              	@ 4660 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 7143 004e BFF34F8F 		dsb
 7144              	@ 0 "" 2
 7145              	@ 4660 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 7146 0052 BFF36F8F 		isb
 7147              	@ 0 "" 2
 7148              		.thumb
 7149              		.syntax unified
 7150              	.L457:
4661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 212


4665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 7151              		.loc 1 4672 3
 7152 0056 FFF7FEFF 		bl	vPortExitCritical
4673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 7153              		.loc 1 4674 3
 7154 005a FFF7FEFF 		bl	vPortEnterCritical
4675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_WAIT();
4677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulNotificationValue != NULL )
 7155              		.loc 1 4678 6
 7156 005e 7B68     		ldr	r3, [r7, #4]
 7157 0060 002B     		cmp	r3, #0
 7158 0062 04D0     		beq	.L458
4679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Output the current notification value, which may or may not
4681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				have changed. */
4682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 7159              		.loc 1 4682 41
 7160 0064 114B     		ldr	r3, .L462
 7161 0066 1B68     		ldr	r3, [r3]
 7162 0068 5A6D     		ldr	r2, [r3, #84]
 7163              		.loc 1 4682 27
 7164 006a 7B68     		ldr	r3, [r7, #4]
 7165 006c 1A60     		str	r2, [r3]
 7166              	.L458:
4683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If ucNotifyValue is set then either the task never entered the
4686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			blocked state (because a notification was already pending) or the
4687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			unblocked because of a timeout. */
4689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 7167              		.loc 1 4689 20
 7168 006e 0F4B     		ldr	r3, .L462
 7169 0070 1B68     		ldr	r3, [r3]
 7170 0072 93F85830 		ldrb	r3, [r3, #88]
 7171 0076 DBB2     		uxtb	r3, r3
 7172              		.loc 1 4689 6
 7173 0078 022B     		cmp	r3, #2
 7174 007a 02D0     		beq	.L459
4690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was not received. */
4692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
 7175              		.loc 1 4692 13
 7176 007c 0023     		movs	r3, #0
 7177 007e 7B61     		str	r3, [r7, #20]
 7178 0080 08E0     		b	.L460
 7179              	.L459:
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 213


4693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was already pending or a notification was
4697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				received while the task was waiting. */
4698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 7180              		.loc 1 4698 35
 7181 0082 0A4B     		ldr	r3, .L462
 7182 0084 1B68     		ldr	r3, [r3]
 7183 0086 596D     		ldr	r1, [r3, #84]
 7184              		.loc 1 4698 38
 7185 0088 BA68     		ldr	r2, [r7, #8]
 7186 008a D243     		mvns	r2, r2
 7187              		.loc 1 4698 35
 7188 008c 0A40     		ands	r2, r2, r1
 7189 008e 5A65     		str	r2, [r3, #84]
4699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
 7190              		.loc 1 4699 13
 7191 0090 0123     		movs	r3, #1
 7192 0092 7B61     		str	r3, [r7, #20]
 7193              	.L460:
4700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 7194              		.loc 1 4702 16
 7195 0094 054B     		ldr	r3, .L462
 7196 0096 1B68     		ldr	r3, [r3]
 7197              		.loc 1 4702 32
 7198 0098 0022     		movs	r2, #0
 7199 009a 83F85820 		strb	r2, [r3, #88]
4703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 7200              		.loc 1 4704 3
 7201 009e FFF7FEFF 		bl	vPortExitCritical
4705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 7202              		.loc 1 4706 10
 7203 00a2 7B69     		ldr	r3, [r7, #20]
4707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 7204              		.loc 1 4707 2
 7205 00a4 1846     		mov	r0, r3
 7206 00a6 1837     		adds	r7, r7, #24
 7207              	.LCFI290:
 7208              		.cfi_def_cfa_offset 8
 7209 00a8 BD46     		mov	sp, r7
 7210              	.LCFI291:
 7211              		.cfi_def_cfa_register 13
 7212              		@ sp needed
 7213 00aa 80BD     		pop	{r7, pc}
 7214              	.L463:
 7215              		.align	2
 7216              	.L462:
 7217 00ac 00000000 		.word	pxCurrentTCB
 7218 00b0 04ED00E0 		.word	-536810236
 7219              		.cfi_endproc
 7220              	.LFE60:
 7222              		.section	.text.xTaskGenericNotify,"ax",%progbits
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 214


 7223              		.align	1
 7224              		.global	xTaskGenericNotify
 7225              		.syntax unified
 7226              		.thumb
 7227              		.thumb_func
 7229              	xTaskGenericNotify:
 7230              	.LFB61:
4708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 7231              		.loc 1 4715 2
 7232              		.cfi_startproc
 7233              		@ args = 0, pretend = 0, frame = 40
 7234              		@ frame_needed = 1, uses_anonymous_args = 0
 7235 0000 80B5     		push	{r7, lr}
 7236              	.LCFI292:
 7237              		.cfi_def_cfa_offset 8
 7238              		.cfi_offset 7, -8
 7239              		.cfi_offset 14, -4
 7240 0002 8AB0     		sub	sp, sp, #40
 7241              	.LCFI293:
 7242              		.cfi_def_cfa_offset 48
 7243 0004 00AF     		add	r7, sp, #0
 7244              	.LCFI294:
 7245              		.cfi_def_cfa_register 7
 7246 0006 F860     		str	r0, [r7, #12]
 7247 0008 B960     		str	r1, [r7, #8]
 7248 000a 3B60     		str	r3, [r7]
 7249 000c 1346     		mov	r3, r2
 7250 000e FB71     		strb	r3, [r7, #7]
4716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
 7251              		.loc 1 4717 13
 7252 0010 0123     		movs	r3, #1
 7253 0012 7B62     		str	r3, [r7, #36]
4718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
 7254              		.loc 1 4720 3
 7255 0014 FB68     		ldr	r3, [r7, #12]
 7256 0016 002B     		cmp	r3, #0
 7257 0018 0AD1     		bne	.L465
 7258              	.LBB218:
 7259              	.LBB219:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 7260              		.loc 2 195 2
 7261              		.syntax unified
 7262              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 7263 001a 4FF05003 			mov r3, #80												
 7264 001e 83F31188 		msr basepri, r3											
 7265 0022 BFF36F8F 		isb														
 7266 0026 BFF34F8F 		dsb														
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 215


 7267              	
 7268              	@ 0 "" 2
 7269              		.thumb
 7270              		.syntax unified
 7271 002a BB61     		str	r3, [r7, #24]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 7272              		.loc 2 203 1
 7273 002c 00BF     		nop
 7274              	.L466:
 7275              	.LBE219:
 7276              	.LBE218:
 7277              		.loc 1 4720 3 discriminator 1
 7278 002e FEE7     		b	.L466
 7279              	.L465:
4721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
 7280              		.loc 1 4721 9
 7281 0030 FB68     		ldr	r3, [r7, #12]
 7282 0032 3B62     		str	r3, [r7, #32]
4722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 7283              		.loc 1 4723 3
 7284 0034 FFF7FEFF 		bl	vPortEnterCritical
4724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
 7285              		.loc 1 4725 6
 7286 0038 3B68     		ldr	r3, [r7]
 7287 003a 002B     		cmp	r3, #0
 7288 003c 03D0     		beq	.L467
4726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 7289              		.loc 1 4727 42
 7290 003e 3B6A     		ldr	r3, [r7, #32]
 7291 0040 5A6D     		ldr	r2, [r3, #84]
 7292              		.loc 1 4727 35
 7293 0042 3B68     		ldr	r3, [r7]
 7294 0044 1A60     		str	r2, [r3]
 7295              	.L467:
4728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 7296              		.loc 1 4730 26
 7297 0046 3B6A     		ldr	r3, [r7, #32]
 7298 0048 93F85830 		ldrb	r3, [r3, #88]
 7299 004c FB77     		strb	r3, [r7, #31]
4731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 7300              		.loc 1 4732 25
 7301 004e 3B6A     		ldr	r3, [r7, #32]
 7302 0050 0222     		movs	r2, #2
 7303 0052 83F85820 		strb	r2, [r3, #88]
4733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
 7304              		.loc 1 4734 4
 7305 0056 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 7306 0058 042B     		cmp	r3, #4
 7307 005a 28D8     		bhi	.L468
 7308 005c 01A2     		adr	r2, .L470
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 216


 7309 005e 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 7310 0062 00BF     		.p2align 2
 7311              	.L470:
 7312 0064 CF000000 		.word	.L485+1
 7313 0068 79000000 		.word	.L473+1
 7314 006c 87000000 		.word	.L472+1
 7315 0070 93000000 		.word	.L471+1
 7316 0074 9B000000 		.word	.L469+1
 7317              		.p2align 1
 7318              	.L473:
4735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
 7319              		.loc 1 4737 29
 7320 0078 3B6A     		ldr	r3, [r7, #32]
 7321 007a 5A6D     		ldr	r2, [r3, #84]
 7322 007c BB68     		ldr	r3, [r7, #8]
 7323 007e 1A43     		orrs	r2, r2, r3
 7324 0080 3B6A     		ldr	r3, [r7, #32]
 7325 0082 5A65     		str	r2, [r3, #84]
4738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 7326              		.loc 1 4738 6
 7327 0084 26E0     		b	.L475
 7328              	.L472:
4739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
 7329              		.loc 1 4741 13
 7330 0086 3B6A     		ldr	r3, [r7, #32]
 7331 0088 5B6D     		ldr	r3, [r3, #84]
 7332              		.loc 1 4741 32
 7333 008a 5A1C     		adds	r2, r3, #1
 7334 008c 3B6A     		ldr	r3, [r7, #32]
 7335 008e 5A65     		str	r2, [r3, #84]
4742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 7336              		.loc 1 4742 6
 7337 0090 20E0     		b	.L475
 7338              	.L471:
4743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
 7339              		.loc 1 4745 29
 7340 0092 3B6A     		ldr	r3, [r7, #32]
 7341 0094 BA68     		ldr	r2, [r7, #8]
 7342 0096 5A65     		str	r2, [r3, #84]
4746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 7343              		.loc 1 4746 6
 7344 0098 1CE0     		b	.L475
 7345              	.L469:
4747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 7346              		.loc 1 4749 8
 7347 009a FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 7348 009c 022B     		cmp	r3, #2
 7349 009e 03D0     		beq	.L476
4750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 217


4751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
 7350              		.loc 1 4751 30
 7351 00a0 3B6A     		ldr	r3, [r7, #32]
 7352 00a2 BA68     		ldr	r2, [r7, #8]
 7353 00a4 5A65     		str	r2, [r3, #84]
4752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 7354              		.loc 1 4758 6
 7355 00a6 15E0     		b	.L475
 7356              	.L476:
4756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 7357              		.loc 1 4756 15
 7358 00a8 0023     		movs	r3, #0
 7359 00aa 7B62     		str	r3, [r7, #36]
 7360              		.loc 1 4758 6
 7361 00ac 12E0     		b	.L475
 7362              	.L468:
4759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction:
4761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				default:
4766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Should not get here if all enums are handled.
4767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Artificially force an assert by testing a value the
4768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					compiler can't assume is const. */
4769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 7363              		.loc 1 4769 6
 7364 00ae 3B6A     		ldr	r3, [r7, #32]
 7365 00b0 5B6D     		ldr	r3, [r3, #84]
 7366 00b2 B3F1FF3F 		cmp	r3, #-1
 7367 00b6 0CD0     		beq	.L486
 7368              	.LBB220:
 7369              	.LBB221:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 7370              		.loc 2 195 2
 7371              		.syntax unified
 7372              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 7373 00b8 4FF05003 			mov r3, #80												
 7374 00bc 83F31188 		msr basepri, r3											
 7375 00c0 BFF36F8F 		isb														
 7376 00c4 BFF34F8F 		dsb														
 7377              	
 7378              	@ 0 "" 2
 7379              		.thumb
 7380              		.syntax unified
 7381 00c8 7B61     		str	r3, [r7, #20]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 7382              		.loc 2 203 1
 7383 00ca 00BF     		nop
 7384              	.L479:
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 218


 7385              	.LBE221:
 7386              	.LBE220:
 7387              		.loc 1 4769 6 discriminator 2
 7388 00cc FEE7     		b	.L479
 7389              	.L485:
4763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 7390              		.loc 1 4763 6
 7391 00ce 00BF     		nop
 7392 00d0 00E0     		b	.L475
 7393              	.L486:
4770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 7394              		.loc 1 4771 6
 7395 00d2 00BF     		nop
 7396              	.L475:
4772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY();
4775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 7397              		.loc 1 4778 6
 7398 00d4 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 7399 00d6 012B     		cmp	r3, #1
 7400 00d8 3AD1     		bne	.L480
4779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 7401              		.loc 1 4780 14
 7402 00da 3B6A     		ldr	r3, [r7, #32]
 7403 00dc 0433     		adds	r3, r3, #4
 7404 00de 1846     		mov	r0, r3
 7405 00e0 FFF7FEFF 		bl	uxListRemove
4781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 7406              		.loc 1 4781 5
 7407 00e4 3B6A     		ldr	r3, [r7, #32]
 7408 00e6 DA6A     		ldr	r2, [r3, #44]
 7409 00e8 1D4B     		ldr	r3, .L487
 7410 00ea 1B68     		ldr	r3, [r3]
 7411 00ec 9A42     		cmp	r2, r3
 7412 00ee 03D9     		bls	.L481
 7413              		.loc 1 4781 5 is_stmt 0 discriminator 1
 7414 00f0 3B6A     		ldr	r3, [r7, #32]
 7415 00f2 DB6A     		ldr	r3, [r3, #44]
 7416 00f4 1A4A     		ldr	r2, .L487
 7417 00f6 1360     		str	r3, [r2]
 7418              	.L481:
 7419              		.loc 1 4781 5 discriminator 3
 7420 00f8 3B6A     		ldr	r3, [r7, #32]
 7421 00fa DA6A     		ldr	r2, [r3, #44]
 7422 00fc 1346     		mov	r3, r2
 7423 00fe 9B00     		lsls	r3, r3, #2
 7424 0100 1344     		add	r3, r3, r2
 7425 0102 9B00     		lsls	r3, r3, #2
 7426 0104 174A     		ldr	r2, .L487+4
 7427 0106 1A44     		add	r2, r2, r3
 7428 0108 3B6A     		ldr	r3, [r7, #32]
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 219


 7429 010a 0433     		adds	r3, r3, #4
 7430 010c 1946     		mov	r1, r3
 7431 010e 1046     		mov	r0, r2
 7432 0110 FFF7FEFF 		bl	vListInsertEnd
4782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 7433              		.loc 1 4784 5 is_stmt 1 discriminator 3
 7434 0114 3B6A     		ldr	r3, [r7, #32]
 7435 0116 9B6A     		ldr	r3, [r3, #40]
 7436 0118 002B     		cmp	r3, #0
 7437 011a 0AD0     		beq	.L482
 7438              	.LBB222:
 7439              	.LBB223:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 7440              		.loc 2 195 2
 7441              		.syntax unified
 7442              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 7443 011c 4FF05003 			mov r3, #80												
 7444 0120 83F31188 		msr basepri, r3											
 7445 0124 BFF36F8F 		isb														
 7446 0128 BFF34F8F 		dsb														
 7447              	
 7448              	@ 0 "" 2
 7449              		.thumb
 7450              		.syntax unified
 7451 012c 3B61     		str	r3, [r7, #16]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 7452              		.loc 2 203 1
 7453 012e 00BF     		nop
 7454              	.L483:
 7455              	.LBE223:
 7456              	.LBE222:
 7457              		.loc 1 4784 5 discriminator 3
 7458 0130 FEE7     		b	.L483
 7459              	.L482:
4785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
4787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If a task is blocked waiting for a notification then
4789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
4790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					out time.  If the task is unblocked for a reason other than
4791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					because it will automatically get reset to a new value when
4793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tickless idling is used it might be more important to enter
4795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					sleep mode at the earliest possible time - so reset
4796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
4797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					earliest possible time. */
4798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
4799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
4801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 7460              		.loc 1 4802 14
 7461 0132 3B6A     		ldr	r3, [r7, #32]
 7462 0134 DA6A     		ldr	r2, [r3, #44]
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 220


 7463              		.loc 1 4802 41
 7464 0136 0C4B     		ldr	r3, .L487+8
 7465 0138 1B68     		ldr	r3, [r3]
 7466 013a DB6A     		ldr	r3, [r3, #44]
 7467              		.loc 1 4802 7
 7468 013c 9A42     		cmp	r2, r3
 7469 013e 07D9     		bls	.L480
4803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 7470              		.loc 1 4806 6
 7471 0140 0A4B     		ldr	r3, .L487+12
 7472 0142 4FF08052 		mov	r2, #268435456
 7473 0146 1A60     		str	r2, [r3]
 7474              		.syntax unified
 7475              	@ 4806 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 7476 0148 BFF34F8F 		dsb
 7477              	@ 0 "" 2
 7478              	@ 4806 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 7479 014c BFF36F8F 		isb
 7480              	@ 0 "" 2
 7481              		.thumb
 7482              		.syntax unified
 7483              	.L480:
4807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 7484              		.loc 1 4818 3
 7485 0150 FFF7FEFF 		bl	vPortExitCritical
4819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 7486              		.loc 1 4820 10
 7487 0154 7B6A     		ldr	r3, [r7, #36]
4821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 7488              		.loc 1 4821 2
 7489 0156 1846     		mov	r0, r3
 7490 0158 2837     		adds	r7, r7, #40
 7491              	.LCFI295:
 7492              		.cfi_def_cfa_offset 8
 7493 015a BD46     		mov	sp, r7
 7494              	.LCFI296:
 7495              		.cfi_def_cfa_register 13
 7496              		@ sp needed
 7497 015c 80BD     		pop	{r7, pc}
 7498              	.L488:
 7499 015e 00BF     		.align	2
 7500              	.L487:
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 221


 7501 0160 00000000 		.word	uxTopReadyPriority
 7502 0164 00000000 		.word	pxReadyTasksLists
 7503 0168 00000000 		.word	pxCurrentTCB
 7504 016c 04ED00E0 		.word	-536810236
 7505              		.cfi_endproc
 7506              	.LFE61:
 7508              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 7509              		.align	1
 7510              		.global	xTaskGenericNotifyFromISR
 7511              		.syntax unified
 7512              		.thumb
 7513              		.thumb_func
 7515              	xTaskGenericNotifyFromISR:
 7516              	.LFB62:
4822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
4829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 7517              		.loc 1 4829 2
 7518              		.cfi_startproc
 7519              		@ args = 4, pretend = 0, frame = 56
 7520              		@ frame_needed = 1, uses_anonymous_args = 0
 7521 0000 80B5     		push	{r7, lr}
 7522              	.LCFI297:
 7523              		.cfi_def_cfa_offset 8
 7524              		.cfi_offset 7, -8
 7525              		.cfi_offset 14, -4
 7526 0002 8EB0     		sub	sp, sp, #56
 7527              	.LCFI298:
 7528              		.cfi_def_cfa_offset 64
 7529 0004 00AF     		add	r7, sp, #0
 7530              	.LCFI299:
 7531              		.cfi_def_cfa_register 7
 7532 0006 F860     		str	r0, [r7, #12]
 7533 0008 B960     		str	r1, [r7, #8]
 7534 000a 3B60     		str	r3, [r7]
 7535 000c 1346     		mov	r3, r2
 7536 000e FB71     		strb	r3, [r7, #7]
4830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
 7537              		.loc 1 4832 13
 7538 0010 0123     		movs	r3, #1
 7539 0012 7B63     		str	r3, [r7, #52]
4833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
 7540              		.loc 1 4835 3
 7541 0014 FB68     		ldr	r3, [r7, #12]
 7542 0016 002B     		cmp	r3, #0
 7543 0018 0AD1     		bne	.L490
 7544              	.LBB224:
 7545              	.LBB225:
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 222


 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 7546              		.loc 2 195 2
 7547              		.syntax unified
 7548              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 7549 001a 4FF05003 			mov r3, #80												
 7550 001e 83F31188 		msr basepri, r3											
 7551 0022 BFF36F8F 		isb														
 7552 0026 BFF34F8F 		dsb														
 7553              	
 7554              	@ 0 "" 2
 7555              		.thumb
 7556              		.syntax unified
 7557 002a 7B62     		str	r3, [r7, #36]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 7558              		.loc 2 203 1
 7559 002c 00BF     		nop
 7560              	.L491:
 7561              	.LBE225:
 7562              	.LBE224:
 7563              		.loc 1 4835 3 discriminator 1
 7564 002e FEE7     		b	.L491
 7565              	.L490:
4836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
4852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 7566              		.loc 1 4853 3
 7567 0030 FFF7FEFF 		bl	vPortValidateInterruptPriority
4854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
 7568              		.loc 1 4855 9
 7569 0034 FB68     		ldr	r3, [r7, #12]
 7570 0036 3B63     		str	r3, [r7, #48]
 7571              	.LBB226:
 7572              	.LBB227:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 7573              		.loc 2 211 2
 7574              		.syntax unified
 7575              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 7576 0038 EFF31182 			mrs r2, basepri											
 7577 003c 4FF05003 		mov r3, #80												
 7578 0040 83F31188 		msr basepri, r3											
 7579 0044 BFF36F8F 		isb														
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 223


 7580 0048 BFF34F8F 		dsb														
 7581              	
 7582              	@ 0 "" 2
 7583              		.thumb
 7584              		.syntax unified
 7585 004c 3A62     		str	r2, [r7, #32]
 7586 004e FB61     		str	r3, [r7, #28]
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** }
 7587              		.loc 2 223 9
 7588 0050 3B6A     		ldr	r3, [r7, #32]
 7589              	.LBE227:
 7590              	.LBE226:
4856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 7591              		.loc 1 4857 28
 7592 0052 FB62     		str	r3, [r7, #44]
4858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
 7593              		.loc 1 4859 6
 7594 0054 3B68     		ldr	r3, [r7]
 7595 0056 002B     		cmp	r3, #0
 7596 0058 03D0     		beq	.L493
4860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 7597              		.loc 1 4861 42
 7598 005a 3B6B     		ldr	r3, [r7, #48]
 7599 005c 5A6D     		ldr	r2, [r3, #84]
 7600              		.loc 1 4861 35
 7601 005e 3B68     		ldr	r3, [r7]
 7602 0060 1A60     		str	r2, [r3]
 7603              	.L493:
4862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 7604              		.loc 1 4864 26
 7605 0062 3B6B     		ldr	r3, [r7, #48]
 7606 0064 93F85830 		ldrb	r3, [r3, #88]
 7607 0068 87F82B30 		strb	r3, [r7, #43]
4865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 7608              		.loc 1 4865 25
 7609 006c 3B6B     		ldr	r3, [r7, #48]
 7610 006e 0222     		movs	r2, #2
 7611 0070 83F85820 		strb	r2, [r3, #88]
4866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
 7612              		.loc 1 4867 4
 7613 0074 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 7614 0076 042B     		cmp	r3, #4
 7615 0078 28D8     		bhi	.L494
 7616 007a 01A2     		adr	r2, .L496
 7617 007c 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 7618              		.p2align 2
 7619              	.L496:
 7620 0080 ED000000 		.word	.L514+1
 7621 0084 95000000 		.word	.L499+1
 7622 0088 A3000000 		.word	.L498+1
 7623 008c AF000000 		.word	.L497+1
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 224


 7624 0090 B7000000 		.word	.L495+1
 7625              		.p2align 1
 7626              	.L499:
4868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
 7627              		.loc 1 4870 29
 7628 0094 3B6B     		ldr	r3, [r7, #48]
 7629 0096 5A6D     		ldr	r2, [r3, #84]
 7630 0098 BB68     		ldr	r3, [r7, #8]
 7631 009a 1A43     		orrs	r2, r2, r3
 7632 009c 3B6B     		ldr	r3, [r7, #48]
 7633 009e 5A65     		str	r2, [r3, #84]
4871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 7634              		.loc 1 4871 6
 7635 00a0 27E0     		b	.L501
 7636              	.L498:
4872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
 7637              		.loc 1 4874 13
 7638 00a2 3B6B     		ldr	r3, [r7, #48]
 7639 00a4 5B6D     		ldr	r3, [r3, #84]
 7640              		.loc 1 4874 32
 7641 00a6 5A1C     		adds	r2, r3, #1
 7642 00a8 3B6B     		ldr	r3, [r7, #48]
 7643 00aa 5A65     		str	r2, [r3, #84]
4875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 7644              		.loc 1 4875 6
 7645 00ac 21E0     		b	.L501
 7646              	.L497:
4876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
 7647              		.loc 1 4878 29
 7648 00ae 3B6B     		ldr	r3, [r7, #48]
 7649 00b0 BA68     		ldr	r2, [r7, #8]
 7650 00b2 5A65     		str	r2, [r3, #84]
4879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 7651              		.loc 1 4879 6
 7652 00b4 1DE0     		b	.L501
 7653              	.L495:
4880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 7654              		.loc 1 4882 8
 7655 00b6 97F82B30 		ldrb	r3, [r7, #43]	@ zero_extendqisi2
 7656 00ba 022B     		cmp	r3, #2
 7657 00bc 03D0     		beq	.L502
4883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
 7658              		.loc 1 4884 30
 7659 00be 3B6B     		ldr	r3, [r7, #48]
 7660 00c0 BA68     		ldr	r2, [r7, #8]
 7661 00c2 5A65     		str	r2, [r3, #84]
4885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 225


4887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 7662              		.loc 1 4891 6
 7663 00c4 15E0     		b	.L501
 7664              	.L502:
4889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 7665              		.loc 1 4889 15
 7666 00c6 0023     		movs	r3, #0
 7667 00c8 7B63     		str	r3, [r7, #52]
 7668              		.loc 1 4891 6
 7669 00ca 12E0     		b	.L501
 7670              	.L494:
4892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction :
4894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				default:
4899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Should not get here if all enums are handled.
4900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Artificially force an assert by testing a value the
4901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					compiler can't assume is const. */
4902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 7671              		.loc 1 4902 6
 7672 00cc 3B6B     		ldr	r3, [r7, #48]
 7673 00ce 5B6D     		ldr	r3, [r3, #84]
 7674 00d0 B3F1FF3F 		cmp	r3, #-1
 7675 00d4 0CD0     		beq	.L515
 7676              	.LBB228:
 7677              	.LBB229:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 7678              		.loc 2 195 2
 7679              		.syntax unified
 7680              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 7681 00d6 4FF05003 			mov r3, #80												
 7682 00da 83F31188 		msr basepri, r3											
 7683 00de BFF36F8F 		isb														
 7684 00e2 BFF34F8F 		dsb														
 7685              	
 7686              	@ 0 "" 2
 7687              		.thumb
 7688              		.syntax unified
 7689 00e6 BB61     		str	r3, [r7, #24]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 7690              		.loc 2 203 1
 7691 00e8 00BF     		nop
 7692              	.L505:
 7693              	.LBE229:
 7694              	.LBE228:
 7695              		.loc 1 4902 6 discriminator 2
 7696 00ea FEE7     		b	.L505
 7697              	.L514:
4896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 7698              		.loc 1 4896 6
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 226


 7699 00ec 00BF     		nop
 7700 00ee 00E0     		b	.L501
 7701              	.L515:
4903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 7702              		.loc 1 4903 6
 7703 00f0 00BF     		nop
 7704              	.L501:
4904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
4907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 7705              		.loc 1 4910 6
 7706 00f2 97F82B30 		ldrb	r3, [r7, #43]	@ zero_extendqisi2
 7707 00f6 012B     		cmp	r3, #1
 7708 00f8 46D1     		bne	.L506
4911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 7709              		.loc 1 4913 5
 7710 00fa 3B6B     		ldr	r3, [r7, #48]
 7711 00fc 9B6A     		ldr	r3, [r3, #40]
 7712 00fe 002B     		cmp	r3, #0
 7713 0100 0AD0     		beq	.L507
 7714              	.LBB230:
 7715              	.LBB231:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 7716              		.loc 2 195 2
 7717              		.syntax unified
 7718              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 7719 0102 4FF05003 			mov r3, #80												
 7720 0106 83F31188 		msr basepri, r3											
 7721 010a BFF36F8F 		isb														
 7722 010e BFF34F8F 		dsb														
 7723              	
 7724              	@ 0 "" 2
 7725              		.thumb
 7726              		.syntax unified
 7727 0112 7B61     		str	r3, [r7, #20]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 7728              		.loc 2 203 1
 7729 0114 00BF     		nop
 7730              	.L508:
 7731              	.LBE231:
 7732              	.LBE230:
 7733              		.loc 1 4913 5 discriminator 3
 7734 0116 FEE7     		b	.L508
 7735              	.L507:
4914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 7736              		.loc 1 4915 30
 7737 0118 214B     		ldr	r3, .L516
 7738 011a 1B68     		ldr	r3, [r3]
 7739              		.loc 1 4915 7
 7740 011c 002B     		cmp	r3, #0
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 227


 7741 011e 1DD1     		bne	.L509
4916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 7742              		.loc 1 4917 15
 7743 0120 3B6B     		ldr	r3, [r7, #48]
 7744 0122 0433     		adds	r3, r3, #4
 7745 0124 1846     		mov	r0, r3
 7746 0126 FFF7FEFF 		bl	uxListRemove
4918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 7747              		.loc 1 4918 6
 7748 012a 3B6B     		ldr	r3, [r7, #48]
 7749 012c DA6A     		ldr	r2, [r3, #44]
 7750 012e 1D4B     		ldr	r3, .L516+4
 7751 0130 1B68     		ldr	r3, [r3]
 7752 0132 9A42     		cmp	r2, r3
 7753 0134 03D9     		bls	.L510
 7754              		.loc 1 4918 6 is_stmt 0 discriminator 1
 7755 0136 3B6B     		ldr	r3, [r7, #48]
 7756 0138 DB6A     		ldr	r3, [r3, #44]
 7757 013a 1A4A     		ldr	r2, .L516+4
 7758 013c 1360     		str	r3, [r2]
 7759              	.L510:
 7760              		.loc 1 4918 6 discriminator 3
 7761 013e 3B6B     		ldr	r3, [r7, #48]
 7762 0140 DA6A     		ldr	r2, [r3, #44]
 7763 0142 1346     		mov	r3, r2
 7764 0144 9B00     		lsls	r3, r3, #2
 7765 0146 1344     		add	r3, r3, r2
 7766 0148 9B00     		lsls	r3, r3, #2
 7767 014a 174A     		ldr	r2, .L516+8
 7768 014c 1A44     		add	r2, r2, r3
 7769 014e 3B6B     		ldr	r3, [r7, #48]
 7770 0150 0433     		adds	r3, r3, #4
 7771 0152 1946     		mov	r1, r3
 7772 0154 1046     		mov	r0, r2
 7773 0156 FFF7FEFF 		bl	vListInsertEnd
 7774 015a 05E0     		b	.L511
 7775              	.L509:
4919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 7776              		.loc 1 4924 6 is_stmt 1
 7777 015c 3B6B     		ldr	r3, [r7, #48]
 7778 015e 1833     		adds	r3, r3, #24
 7779 0160 1946     		mov	r1, r3
 7780 0162 1248     		ldr	r0, .L516+12
 7781 0164 FFF7FEFF 		bl	vListInsertEnd
 7782              	.L511:
4925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 7783              		.loc 1 4927 14
 7784 0168 3B6B     		ldr	r3, [r7, #48]
 7785 016a DA6A     		ldr	r2, [r3, #44]
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 228


 7786              		.loc 1 4927 41
 7787 016c 104B     		ldr	r3, .L516+16
 7788 016e 1B68     		ldr	r3, [r3]
 7789 0170 DB6A     		ldr	r3, [r3, #44]
 7790              		.loc 1 4927 7
 7791 0172 9A42     		cmp	r2, r3
 7792 0174 08D9     		bls	.L506
4928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
 7793              		.loc 1 4931 8
 7794 0176 3B6C     		ldr	r3, [r7, #64]
 7795 0178 002B     		cmp	r3, #0
 7796 017a 02D0     		beq	.L512
4932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
 7797              		.loc 1 4933 34
 7798 017c 3B6C     		ldr	r3, [r7, #64]
 7799 017e 0122     		movs	r2, #1
 7800 0180 1A60     		str	r2, [r3]
 7801              	.L512:
4934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Mark that a yield is pending in case the user is not
4937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					using the "xHigherPriorityTaskWoken" parameter to an ISR
4938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					safe FreeRTOS function. */
4939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldPending = pdTRUE;
 7802              		.loc 1 4939 20
 7803 0182 0C4B     		ldr	r3, .L516+20
 7804 0184 0122     		movs	r2, #1
 7805 0186 1A60     		str	r2, [r3]
 7806              	.L506:
 7807 0188 FB6A     		ldr	r3, [r7, #44]
 7808 018a 3B61     		str	r3, [r7, #16]
 7809              	.LBB232:
 7810              	.LBB233:
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 7811              		.loc 2 229 2
 7812 018c 3B69     		ldr	r3, [r7, #16]
 7813              		.syntax unified
 7814              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 7815 018e 83F31188 			msr basepri, r3	
 7816              	@ 0 "" 2
 7817              		.loc 2 233 1
 7818              		.thumb
 7819              		.syntax unified
 7820 0192 00BF     		nop
 7821              	.LBE233:
 7822              	.LBE232:
4940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 229


4947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 7823              		.loc 1 4949 10
 7824 0194 7B6B     		ldr	r3, [r7, #52]
4950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 7825              		.loc 1 4950 2
 7826 0196 1846     		mov	r0, r3
 7827 0198 3837     		adds	r7, r7, #56
 7828              	.LCFI300:
 7829              		.cfi_def_cfa_offset 8
 7830 019a BD46     		mov	sp, r7
 7831              	.LCFI301:
 7832              		.cfi_def_cfa_register 13
 7833              		@ sp needed
 7834 019c 80BD     		pop	{r7, pc}
 7835              	.L517:
 7836 019e 00BF     		.align	2
 7837              	.L516:
 7838 01a0 00000000 		.word	uxSchedulerSuspended
 7839 01a4 00000000 		.word	uxTopReadyPriority
 7840 01a8 00000000 		.word	pxReadyTasksLists
 7841 01ac 00000000 		.word	xPendingReadyList
 7842 01b0 00000000 		.word	pxCurrentTCB
 7843 01b4 00000000 		.word	xYieldPending
 7844              		.cfi_endproc
 7845              	.LFE62:
 7847              		.section	.text.vTaskNotifyGiveFromISR,"ax",%progbits
 7848              		.align	1
 7849              		.global	vTaskNotifyGiveFromISR
 7850              		.syntax unified
 7851              		.thumb
 7852              		.thumb_func
 7854              	vTaskNotifyGiveFromISR:
 7855              	.LFB63:
4951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
4958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 7856              		.loc 1 4958 2
 7857              		.cfi_startproc
 7858              		@ args = 0, pretend = 0, frame = 40
 7859              		@ frame_needed = 1, uses_anonymous_args = 0
 7860 0000 80B5     		push	{r7, lr}
 7861              	.LCFI302:
 7862              		.cfi_def_cfa_offset 8
 7863              		.cfi_offset 7, -8
 7864              		.cfi_offset 14, -4
 7865 0002 8AB0     		sub	sp, sp, #40
 7866              	.LCFI303:
 7867              		.cfi_def_cfa_offset 48
 7868 0004 00AF     		add	r7, sp, #0
 7869              	.LCFI304:
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 230


 7870              		.cfi_def_cfa_register 7
 7871 0006 7860     		str	r0, [r7, #4]
 7872 0008 3960     		str	r1, [r7]
4959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
 7873              		.loc 1 4963 3
 7874 000a 7B68     		ldr	r3, [r7, #4]
 7875 000c 002B     		cmp	r3, #0
 7876 000e 0AD1     		bne	.L519
 7877              	.LBB234:
 7878              	.LBB235:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 7879              		.loc 2 195 2
 7880              		.syntax unified
 7881              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 7882 0010 4FF05003 			mov r3, #80												
 7883 0014 83F31188 		msr basepri, r3											
 7884 0018 BFF36F8F 		isb														
 7885 001c BFF34F8F 		dsb														
 7886              	
 7887              	@ 0 "" 2
 7888              		.thumb
 7889              		.syntax unified
 7890 0020 BB61     		str	r3, [r7, #24]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 7891              		.loc 2 203 1
 7892 0022 00BF     		nop
 7893              	.L520:
 7894              	.LBE235:
 7895              	.LBE234:
 7896              		.loc 1 4963 3 discriminator 1
 7897 0024 FEE7     		b	.L520
 7898              	.L519:
4964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
4980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 7899              		.loc 1 4981 3
 7900 0026 FFF7FEFF 		bl	vPortValidateInterruptPriority
4982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 231


4983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
 7901              		.loc 1 4983 9
 7902 002a 7B68     		ldr	r3, [r7, #4]
 7903 002c 7B62     		str	r3, [r7, #36]
 7904              	.LBB236:
 7905              	.LBB237:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 7906              		.loc 2 211 2
 7907              		.syntax unified
 7908              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 7909 002e EFF31182 			mrs r2, basepri											
 7910 0032 4FF05003 		mov r3, #80												
 7911 0036 83F31188 		msr basepri, r3											
 7912 003a BFF36F8F 		isb														
 7913 003e BFF34F8F 		dsb														
 7914              	
 7915              	@ 0 "" 2
 7916              		.thumb
 7917              		.syntax unified
 7918 0042 7A61     		str	r2, [r7, #20]
 7919 0044 3B61     		str	r3, [r7, #16]
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** }
 7920              		.loc 2 223 9
 7921 0046 7B69     		ldr	r3, [r7, #20]
 7922              	.LBE237:
 7923              	.LBE236:
4984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 7924              		.loc 1 4985 28
 7925 0048 3B62     		str	r3, [r7, #32]
4986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 7926              		.loc 1 4987 26
 7927 004a 7B6A     		ldr	r3, [r7, #36]
 7928 004c 93F85830 		ldrb	r3, [r3, #88]
 7929 0050 FB77     		strb	r3, [r7, #31]
4988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 7930              		.loc 1 4988 25
 7931 0052 7B6A     		ldr	r3, [r7, #36]
 7932 0054 0222     		movs	r2, #2
 7933 0056 83F85820 		strb	r2, [r3, #88]
4989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
4991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			semaphore. */
4992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->ulNotifiedValue )++;
 7934              		.loc 1 4992 11
 7935 005a 7B6A     		ldr	r3, [r7, #36]
 7936 005c 5B6D     		ldr	r3, [r3, #84]
 7937              		.loc 1 4992 30
 7938 005e 5A1C     		adds	r2, r3, #1
 7939 0060 7B6A     		ldr	r3, [r7, #36]
 7940 0062 5A65     		str	r2, [r3, #84]
4993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
4995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 232


4998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 7941              		.loc 1 4998 6
 7942 0064 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 7943 0066 012B     		cmp	r3, #1
 7944 0068 46D1     		bne	.L522
4999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
5001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 7945              		.loc 1 5001 5
 7946 006a 7B6A     		ldr	r3, [r7, #36]
 7947 006c 9B6A     		ldr	r3, [r3, #40]
 7948 006e 002B     		cmp	r3, #0
 7949 0070 0AD0     		beq	.L523
 7950              	.LBB238:
 7951              	.LBB239:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 7952              		.loc 2 195 2
 7953              		.syntax unified
 7954              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 7955 0072 4FF05003 			mov r3, #80												
 7956 0076 83F31188 		msr basepri, r3											
 7957 007a BFF36F8F 		isb														
 7958 007e BFF34F8F 		dsb														
 7959              	
 7960              	@ 0 "" 2
 7961              		.thumb
 7962              		.syntax unified
 7963 0082 FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 
 7964              		.loc 2 203 1
 7965 0084 00BF     		nop
 7966              	.L524:
 7967              	.LBE239:
 7968              	.LBE238:
 7969              		.loc 1 5001 5 discriminator 2
 7970 0086 FEE7     		b	.L524
 7971              	.L523:
5002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 7972              		.loc 1 5003 30
 7973 0088 204B     		ldr	r3, .L529
 7974 008a 1B68     		ldr	r3, [r3]
 7975              		.loc 1 5003 7
 7976 008c 002B     		cmp	r3, #0
 7977 008e 1DD1     		bne	.L525
5004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 7978              		.loc 1 5005 15
 7979 0090 7B6A     		ldr	r3, [r7, #36]
 7980 0092 0433     		adds	r3, r3, #4
 7981 0094 1846     		mov	r0, r3
 7982 0096 FFF7FEFF 		bl	uxListRemove
5006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 7983              		.loc 1 5006 6
 7984 009a 7B6A     		ldr	r3, [r7, #36]
 7985 009c DA6A     		ldr	r2, [r3, #44]
 7986 009e 1C4B     		ldr	r3, .L529+4
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 233


 7987 00a0 1B68     		ldr	r3, [r3]
 7988 00a2 9A42     		cmp	r2, r3
 7989 00a4 03D9     		bls	.L526
 7990              		.loc 1 5006 6 is_stmt 0 discriminator 1
 7991 00a6 7B6A     		ldr	r3, [r7, #36]
 7992 00a8 DB6A     		ldr	r3, [r3, #44]
 7993 00aa 194A     		ldr	r2, .L529+4
 7994 00ac 1360     		str	r3, [r2]
 7995              	.L526:
 7996              		.loc 1 5006 6 discriminator 3
 7997 00ae 7B6A     		ldr	r3, [r7, #36]
 7998 00b0 DA6A     		ldr	r2, [r3, #44]
 7999 00b2 1346     		mov	r3, r2
 8000 00b4 9B00     		lsls	r3, r3, #2
 8001 00b6 1344     		add	r3, r3, r2
 8002 00b8 9B00     		lsls	r3, r3, #2
 8003 00ba 164A     		ldr	r2, .L529+8
 8004 00bc 1A44     		add	r2, r2, r3
 8005 00be 7B6A     		ldr	r3, [r7, #36]
 8006 00c0 0433     		adds	r3, r3, #4
 8007 00c2 1946     		mov	r1, r3
 8008 00c4 1046     		mov	r0, r2
 8009 00c6 FFF7FEFF 		bl	vListInsertEnd
 8010 00ca 05E0     		b	.L527
 8011              	.L525:
5007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
5009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
5011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
5012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8012              		.loc 1 5012 6 is_stmt 1
 8013 00cc 7B6A     		ldr	r3, [r7, #36]
 8014 00ce 1833     		adds	r3, r3, #24
 8015 00d0 1946     		mov	r1, r3
 8016 00d2 1148     		ldr	r0, .L529+12
 8017 00d4 FFF7FEFF 		bl	vListInsertEnd
 8018              	.L527:
5013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8019              		.loc 1 5015 14
 8020 00d8 7B6A     		ldr	r3, [r7, #36]
 8021 00da DA6A     		ldr	r2, [r3, #44]
 8022              		.loc 1 5015 41
 8023 00dc 0F4B     		ldr	r3, .L529+16
 8024 00de 1B68     		ldr	r3, [r3]
 8025 00e0 DB6A     		ldr	r3, [r3, #44]
 8026              		.loc 1 5015 7
 8027 00e2 9A42     		cmp	r2, r3
 8028 00e4 08D9     		bls	.L522
5016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
5018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
5019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
 8029              		.loc 1 5019 8
 8030 00e6 3B68     		ldr	r3, [r7]
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 234


 8031 00e8 002B     		cmp	r3, #0
 8032 00ea 02D0     		beq	.L528
5020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
5021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
 8033              		.loc 1 5021 34
 8034 00ec 3B68     		ldr	r3, [r7]
 8035 00ee 0122     		movs	r2, #1
 8036 00f0 1A60     		str	r2, [r3]
 8037              	.L528:
5022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
5023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Mark that a yield is pending in case the user is not
5025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					using the "xHigherPriorityTaskWoken" parameter in an ISR
5026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					safe FreeRTOS function. */
5027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldPending = pdTRUE;
 8038              		.loc 1 5027 20
 8039 00f2 0B4B     		ldr	r3, .L529+20
 8040 00f4 0122     		movs	r2, #1
 8041 00f6 1A60     		str	r2, [r3]
 8042              	.L522:
 8043 00f8 3B6A     		ldr	r3, [r7, #32]
 8044 00fa BB60     		str	r3, [r7, #8]
 8045              	.LBB240:
 8046              	.LBB241:
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h **** 	(
 8047              		.loc 2 229 2
 8048 00fc BB68     		ldr	r3, [r7, #8]
 8049              		.syntax unified
 8050              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM3/portmacro.h" 1
 8051 00fe 83F31188 			msr basepri, r3	
 8052              	@ 0 "" 2
 8053              		.loc 2 233 1
 8054              		.thumb
 8055              		.syntax unified
 8056 0102 00BF     		nop
 8057              	.LBE241:
 8058              	.LBE240:
5028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
5030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
5032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
5036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 8059              		.loc 1 5036 2
 8060 0104 00BF     		nop
 8061 0106 2837     		adds	r7, r7, #40
 8062              	.LCFI305:
 8063              		.cfi_def_cfa_offset 8
 8064 0108 BD46     		mov	sp, r7
 8065              	.LCFI306:
 8066              		.cfi_def_cfa_register 13
 8067              		@ sp needed
 8068 010a 80BD     		pop	{r7, pc}
 8069              	.L530:
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 235


 8070              		.align	2
 8071              	.L529:
 8072 010c 00000000 		.word	uxSchedulerSuspended
 8073 0110 00000000 		.word	uxTopReadyPriority
 8074 0114 00000000 		.word	pxReadyTasksLists
 8075 0118 00000000 		.word	xPendingReadyList
 8076 011c 00000000 		.word	pxCurrentTCB
 8077 0120 00000000 		.word	xYieldPending
 8078              		.cfi_endproc
 8079              	.LFE63:
 8081              		.section	.text.xTaskNotifyStateClear,"ax",%progbits
 8082              		.align	1
 8083              		.global	xTaskNotifyStateClear
 8084              		.syntax unified
 8085              		.thumb
 8086              		.thumb_func
 8088              	xTaskNotifyStateClear:
 8089              	.LFB64:
5037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
5043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
5045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 8090              		.loc 1 5045 2
 8091              		.cfi_startproc
 8092              		@ args = 0, pretend = 0, frame = 16
 8093              		@ frame_needed = 1, uses_anonymous_args = 0
 8094 0000 80B5     		push	{r7, lr}
 8095              	.LCFI307:
 8096              		.cfi_def_cfa_offset 8
 8097              		.cfi_offset 7, -8
 8098              		.cfi_offset 14, -4
 8099 0002 84B0     		sub	sp, sp, #16
 8100              	.LCFI308:
 8101              		.cfi_def_cfa_offset 24
 8102 0004 00AF     		add	r7, sp, #0
 8103              	.LCFI309:
 8104              		.cfi_def_cfa_register 7
 8105 0006 7860     		str	r0, [r7, #4]
5046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
5047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
5048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
5050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		its notification state cleared. */
5051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 8106              		.loc 1 5051 11
 8107 0008 7B68     		ldr	r3, [r7, #4]
 8108 000a 002B     		cmp	r3, #0
 8109 000c 02D1     		bne	.L532
 8110              		.loc 1 5051 11 is_stmt 0 discriminator 1
 8111 000e 0E4B     		ldr	r3, .L537
 8112 0010 1B68     		ldr	r3, [r3]
 8113 0012 00E0     		b	.L533
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 236


 8114              	.L532:
 8115              		.loc 1 5051 11 discriminator 2
 8116 0014 7B68     		ldr	r3, [r7, #4]
 8117              	.L533:
 8118              		.loc 1 5051 9 is_stmt 1 discriminator 4
 8119 0016 BB60     		str	r3, [r7, #8]
5052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 8120              		.loc 1 5053 3 discriminator 4
 8121 0018 FFF7FEFF 		bl	vPortEnterCritical
5054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 8122              		.loc 1 5055 13 discriminator 4
 8123 001c BB68     		ldr	r3, [r7, #8]
 8124 001e 93F85830 		ldrb	r3, [r3, #88]
 8125 0022 DBB2     		uxtb	r3, r3
 8126              		.loc 1 5055 6 discriminator 4
 8127 0024 022B     		cmp	r3, #2
 8128 0026 06D1     		bne	.L534
5056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8129              		.loc 1 5057 26
 8130 0028 BB68     		ldr	r3, [r7, #8]
 8131 002a 0022     		movs	r2, #0
 8132 002c 83F85820 		strb	r2, [r3, #88]
5058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 8133              		.loc 1 5058 13
 8134 0030 0123     		movs	r3, #1
 8135 0032 FB60     		str	r3, [r7, #12]
 8136 0034 01E0     		b	.L535
 8137              	.L534:
5059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
5061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
 8138              		.loc 1 5062 13
 8139 0036 0023     		movs	r3, #0
 8140 0038 FB60     		str	r3, [r7, #12]
 8141              	.L535:
5063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 8142              		.loc 1 5065 3
 8143 003a FFF7FEFF 		bl	vPortExitCritical
5066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 8144              		.loc 1 5067 10
 8145 003e FB68     		ldr	r3, [r7, #12]
5068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 8146              		.loc 1 5068 2
 8147 0040 1846     		mov	r0, r3
 8148 0042 1037     		adds	r7, r7, #16
 8149              	.LCFI310:
 8150              		.cfi_def_cfa_offset 8
 8151 0044 BD46     		mov	sp, r7
 8152              	.LCFI311:
 8153              		.cfi_def_cfa_register 13
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 237


 8154              		@ sp needed
 8155 0046 80BD     		pop	{r7, pc}
 8156              	.L538:
 8157              		.align	2
 8158              	.L537:
 8159 0048 00000000 		.word	pxCurrentTCB
 8160              		.cfi_endproc
 8161              	.LFE64:
 8163              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 8164              		.align	1
 8165              		.syntax unified
 8166              		.thumb
 8167              		.thumb_func
 8169              	prvAddCurrentTaskToDelayedList:
 8170              	.LFB65:
5069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) )
5074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xTaskGetIdleRunTimeCounter( void )
5075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xIdleTaskHandle->ulRunTimeCounter;
5077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
5079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
5082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 8171              		.loc 1 5082 1
 8172              		.cfi_startproc
 8173              		@ args = 0, pretend = 0, frame = 16
 8174              		@ frame_needed = 1, uses_anonymous_args = 0
 8175 0000 80B5     		push	{r7, lr}
 8176              	.LCFI312:
 8177              		.cfi_def_cfa_offset 8
 8178              		.cfi_offset 7, -8
 8179              		.cfi_offset 14, -4
 8180 0002 84B0     		sub	sp, sp, #16
 8181              	.LCFI313:
 8182              		.cfi_def_cfa_offset 24
 8183 0004 00AF     		add	r7, sp, #0
 8184              	.LCFI314:
 8185              		.cfi_def_cfa_register 7
 8186 0006 7860     		str	r0, [r7, #4]
 8187 0008 3960     		str	r1, [r7]
5083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTimeToWake;
5084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** const TickType_t xConstTickCount = xTickCount;
 8188              		.loc 1 5084 18
 8189 000a 214B     		ldr	r3, .L544
 8190 000c 1B68     		ldr	r3, [r3]
 8191 000e FB60     		str	r3, [r7, #12]
5085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
5087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
5089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		reset to pdFALSE so it can be detected as having been set to pdTRUE
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 238


5090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		when the task leaves the Blocked state. */
5091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxCurrentTCB->ucDelayAborted = pdFALSE;
5092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
5094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the ready list before adding it to the blocked list
5096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	as the same list item is used for both lists. */
5097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8192              		.loc 1 5097 35
 8193 0010 204B     		ldr	r3, .L544+4
 8194 0012 1B68     		ldr	r3, [r3]
 8195              		.loc 1 5097 6
 8196 0014 0433     		adds	r3, r3, #4
 8197 0016 1846     		mov	r0, r3
 8198 0018 FFF7FEFF 		bl	uxListRemove
5098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
5100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		check, and the port reset macro can be called directly. */
5101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentT
5102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
5104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
5106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
5109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8199              		.loc 1 5110 5
 8200 001c 7B68     		ldr	r3, [r7, #4]
 8201 001e B3F1FF3F 		cmp	r3, #-1
 8202 0022 0AD1     		bne	.L540
 8203              		.loc 1 5110 41 discriminator 1
 8204 0024 3B68     		ldr	r3, [r7]
 8205 0026 002B     		cmp	r3, #0
 8206 0028 07D0     		beq	.L540
5111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
5113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
5114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			indefinitely. */
5115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8207              		.loc 1 5115 56
 8208 002a 1A4B     		ldr	r3, .L544+4
 8209 002c 1B68     		ldr	r3, [r3]
 8210              		.loc 1 5115 4
 8211 002e 0433     		adds	r3, r3, #4
 8212 0030 1946     		mov	r1, r3
 8213 0032 1948     		ldr	r0, .L544+8
 8214 0034 FFF7FEFF 		bl	vListInsertEnd
5116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
5118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
5120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
5121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			kernel will manage it correctly. */
5122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = xConstTickCount + xTicksToWait;
5123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 239


5124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The list item will be inserted in wake time order. */
5125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
5126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xTimeToWake < xConstTickCount )
5128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow
5130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list. */
5131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
5134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The wake time has not overflowed, so the current block list
5136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
5137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task entering the blocked state was placed at the
5140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				head of the list of blocked tasks then xNextTaskUnblockTime
5141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				needs to be updated too. */
5142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTimeToWake < xNextTaskUnblockTime )
5143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = xTimeToWake;
5145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
5147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
5149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* INCLUDE_vTaskSuspend */
5154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Calculate the time at which the task should be woken if the event
5156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		does not occur.  This may overflow but this doesn't matter, the kernel
5157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		will manage it correctly. */
5158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTimeToWake = xConstTickCount + xTicksToWait;
5159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The list item will be inserted in wake time order. */
5161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
5162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTimeToWake < xConstTickCount )
5164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Wake time has overflowed.  Place this item in the overflow list. */
5166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
5169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The wake time has not overflowed, so the current block list is used. */
5171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task entering the blocked state was placed at the head of the
5174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			list of blocked tasks then xNextTaskUnblockTime needs to be updated
5175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			too. */
5176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xTimeToWake < xNextTaskUnblockTime )
5177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xNextTaskUnblockTime = xTimeToWake;
5179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 240


5181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
5183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
5187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xCanBlockIndefinitely;
5188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
5190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 8215              		.loc 1 5190 1
 8216 0038 26E0     		b	.L543
 8217              	.L540:
5122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 8218              		.loc 1 5122 16
 8219 003a FA68     		ldr	r2, [r7, #12]
 8220 003c 7B68     		ldr	r3, [r7, #4]
 8221 003e 1344     		add	r3, r3, r2
 8222 0040 BB60     		str	r3, [r7, #8]
5125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 8223              		.loc 1 5125 4
 8224 0042 144B     		ldr	r3, .L544+4
 8225 0044 1B68     		ldr	r3, [r3]
 8226 0046 BA68     		ldr	r2, [r7, #8]
 8227 0048 5A60     		str	r2, [r3, #4]
5127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 8228              		.loc 1 5127 6
 8229 004a BA68     		ldr	r2, [r7, #8]
 8230 004c FB68     		ldr	r3, [r7, #12]
 8231 004e 9A42     		cmp	r2, r3
 8232 0050 09D2     		bcs	.L542
5131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 8233              		.loc 1 5131 5
 8234 0052 124B     		ldr	r3, .L544+12
 8235 0054 1A68     		ldr	r2, [r3]
5131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 8236              		.loc 1 5131 60
 8237 0056 0F4B     		ldr	r3, .L544+4
 8238 0058 1B68     		ldr	r3, [r3]
5131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 8239              		.loc 1 5131 5
 8240 005a 0433     		adds	r3, r3, #4
 8241 005c 1946     		mov	r1, r3
 8242 005e 1046     		mov	r0, r2
 8243 0060 FFF7FEFF 		bl	vListInsert
 8244              		.loc 1 5190 1
 8245 0064 10E0     		b	.L543
 8246              	.L542:
5137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 8247              		.loc 1 5137 5
 8248 0066 0E4B     		ldr	r3, .L544+16
 8249 0068 1A68     		ldr	r2, [r3]
5137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 8250              		.loc 1 5137 52
 8251 006a 0A4B     		ldr	r3, .L544+4
 8252 006c 1B68     		ldr	r3, [r3]
5137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 241


 8253              		.loc 1 5137 5
 8254 006e 0433     		adds	r3, r3, #4
 8255 0070 1946     		mov	r1, r3
 8256 0072 1046     		mov	r0, r2
 8257 0074 FFF7FEFF 		bl	vListInsert
5142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 8258              		.loc 1 5142 21
 8259 0078 0A4B     		ldr	r3, .L544+20
 8260 007a 1B68     		ldr	r3, [r3]
5142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 8261              		.loc 1 5142 7
 8262 007c BA68     		ldr	r2, [r7, #8]
 8263 007e 9A42     		cmp	r2, r3
 8264 0080 02D2     		bcs	.L543
5144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 8265              		.loc 1 5144 27
 8266 0082 084A     		ldr	r2, .L544+20
 8267 0084 BB68     		ldr	r3, [r7, #8]
 8268 0086 1360     		str	r3, [r2]
 8269              	.L543:
 8270              		.loc 1 5190 1
 8271 0088 00BF     		nop
 8272 008a 1037     		adds	r7, r7, #16
 8273              	.LCFI315:
 8274              		.cfi_def_cfa_offset 8
 8275 008c BD46     		mov	sp, r7
 8276              	.LCFI316:
 8277              		.cfi_def_cfa_register 13
 8278              		@ sp needed
 8279 008e 80BD     		pop	{r7, pc}
 8280              	.L545:
 8281              		.align	2
 8282              	.L544:
 8283 0090 00000000 		.word	xTickCount
 8284 0094 00000000 		.word	pxCurrentTCB
 8285 0098 00000000 		.word	xSuspendedTaskList
 8286 009c 00000000 		.word	pxOverflowDelayedTaskList
 8287 00a0 00000000 		.word	pxDelayedTaskList
 8288 00a4 00000000 		.word	xNextTaskUnblockTime
 8289              		.cfi_endproc
 8290              	.LFE65:
 8292              		.text
 8293              	.Letext0:
 8294              		.file 3 "d:\\zodhya projects\\technical doccuments\\stm32_vscode_make\\tools\\gcc-arm-none-eabi-10
 8295              		.file 4 "d:\\zodhya projects\\technical doccuments\\stm32_vscode_make\\tools\\gcc-arm-none-eabi-10
 8296              		.file 5 "d:\\zodhya projects\\technical doccuments\\stm32_vscode_make\\tools\\gcc-arm-none-eabi-10
 8297              		.file 6 "Middlewares/Third_Party/FreeRTOS/Source/include/projdefs.h"
 8298              		.file 7 "Middlewares/Third_Party/FreeRTOS/Source/include/FreeRTOS.h"
 8299              		.file 8 "Middlewares/Third_Party/FreeRTOS/Source/include/list.h"
 8300              		.file 9 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 242


DEFINED SYMBOLS
                            *ABS*:00000000 tasks.c
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:22     .bss.pxCurrentTCB:00000000 pxCurrentTCB
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:19     .bss.pxCurrentTCB:00000000 $d
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:25     .bss.pxReadyTasksLists:00000000 $d
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:28     .bss.pxReadyTasksLists:00000000 pxReadyTasksLists
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:31     .bss.xDelayedTaskList1:00000000 $d
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:34     .bss.xDelayedTaskList1:00000000 xDelayedTaskList1
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:37     .bss.xDelayedTaskList2:00000000 $d
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:40     .bss.xDelayedTaskList2:00000000 xDelayedTaskList2
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:43     .bss.pxDelayedTaskList:00000000 $d
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:46     .bss.pxDelayedTaskList:00000000 pxDelayedTaskList
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:49     .bss.pxOverflowDelayedTaskList:00000000 $d
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:52     .bss.pxOverflowDelayedTaskList:00000000 pxOverflowDelayedTaskList
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:55     .bss.xPendingReadyList:00000000 $d
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:58     .bss.xPendingReadyList:00000000 xPendingReadyList
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:61     .bss.xTasksWaitingTermination:00000000 $d
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:64     .bss.xTasksWaitingTermination:00000000 xTasksWaitingTermination
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:67     .bss.uxDeletedTasksWaitingCleanUp:00000000 $d
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:70     .bss.uxDeletedTasksWaitingCleanUp:00000000 uxDeletedTasksWaitingCleanUp
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:73     .bss.xSuspendedTaskList:00000000 $d
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:76     .bss.xSuspendedTaskList:00000000 xSuspendedTaskList
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:79     .bss.uxCurrentNumberOfTasks:00000000 $d
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:82     .bss.uxCurrentNumberOfTasks:00000000 uxCurrentNumberOfTasks
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:85     .bss.xTickCount:00000000 $d
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:88     .bss.xTickCount:00000000 xTickCount
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:91     .bss.uxTopReadyPriority:00000000 $d
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:94     .bss.uxTopReadyPriority:00000000 uxTopReadyPriority
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:97     .bss.xSchedulerRunning:00000000 $d
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:100    .bss.xSchedulerRunning:00000000 xSchedulerRunning
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:103    .bss.uxPendedTicks:00000000 $d
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:106    .bss.uxPendedTicks:00000000 uxPendedTicks
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:109    .bss.xYieldPending:00000000 $d
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:112    .bss.xYieldPending:00000000 xYieldPending
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:115    .bss.xNumOfOverflows:00000000 $d
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:118    .bss.xNumOfOverflows:00000000 xNumOfOverflows
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:121    .bss.uxTaskNumber:00000000 $d
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:124    .bss.uxTaskNumber:00000000 uxTaskNumber
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:127    .bss.xNextTaskUnblockTime:00000000 $d
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:130    .bss.xNextTaskUnblockTime:00000000 xNextTaskUnblockTime
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:133    .bss.xIdleTaskHandle:00000000 $d
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:136    .bss.xIdleTaskHandle:00000000 xIdleTaskHandle
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:139    .bss.uxSchedulerSuspended:00000000 $d
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:142    .bss.uxSchedulerSuspended:00000000 uxSchedulerSuspended
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:145    .text.xTaskCreateStatic:00000000 $t
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:151    .text.xTaskCreateStatic:00000000 xTaskCreateStatic
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:436    .text.prvInitialiseNewTask:00000000 prvInitialiseNewTask
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:653    .text.prvAddNewTaskToReadyList:00000000 prvAddNewTaskToReadyList
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:317    .text.xTaskCreate:00000000 $t
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:323    .text.xTaskCreate:00000000 xTaskCreate
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:431    .text.prvInitialiseNewTask:00000000 $t
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:648    .text.prvAddNewTaskToReadyList:00000000 $t
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:5376   .text.prvInitialiseTaskLists:00000000 prvInitialiseTaskLists
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:803    .text.prvAddNewTaskToReadyList:000000c4 $d
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:814    .text.vTaskDelete:00000000 $t
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:820    .text.vTaskDelete:00000000 vTaskDelete
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:5996   .text.prvDeleteTCB:00000000 prvDeleteTCB
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 243


C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:6090   .text.prvResetNextTaskUnblockTime:00000000 prvResetNextTaskUnblockTime
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:979    .text.vTaskDelete:000000c4 $d
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:991    .text.vTaskDelayUntil:00000000 $t
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:997    .text.vTaskDelayUntil:00000000 vTaskDelayUntil
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:2774   .text.vTaskSuspendAll:00000000 vTaskSuspendAll
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:8169   .text.prvAddCurrentTaskToDelayedList:00000000 prvAddCurrentTaskToDelayedList
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:2820   .text.xTaskResumeAll:00000000 xTaskResumeAll
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:1204   .text.vTaskDelayUntil:000000f0 $d
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:1211   .text.vTaskDelay:00000000 $t
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:1217   .text.vTaskDelay:00000000 vTaskDelay
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:1310   .text.vTaskDelay:00000060 $d
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:1316   .text.eTaskGetState:00000000 $t
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:1322   .text.eTaskGetState:00000000 eTaskGetState
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:1480   .text.eTaskGetState:000000b8 $d
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:1489   .text.uxTaskPriorityGet:00000000 $t
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:1495   .text.uxTaskPriorityGet:00000000 uxTaskPriorityGet
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:1550   .text.uxTaskPriorityGet:00000030 $d
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:1555   .text.uxTaskPriorityGetFromISR:00000000 $t
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:1561   .text.uxTaskPriorityGetFromISR:00000000 uxTaskPriorityGetFromISR
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:1652   .text.uxTaskPriorityGetFromISR:00000054 $d
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:1657   .text.vTaskPrioritySet:00000000 $t
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:1663   .text.vTaskPrioritySet:00000000 vTaskPrioritySet
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:1893   .text.vTaskPrioritySet:0000012c $d
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:1901   .text.vTaskSuspend:00000000 $t
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:1907   .text.vTaskSuspend:00000000 vTaskSuspend
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:4088   .text.vTaskSwitchContext:00000000 vTaskSwitchContext
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:2079   .text.vTaskSuspend:000000d4 $d
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:2089   .text.prvTaskIsTaskSuspended:00000000 $t
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:2094   .text.prvTaskIsTaskSuspended:00000000 prvTaskIsTaskSuspended
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:2187   .text.prvTaskIsTaskSuspended:00000058 $d
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:2193   .text.vTaskResume:00000000 $t
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:2199   .text.vTaskResume:00000000 vTaskResume
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:2338   .text.vTaskResume:000000ac $d
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:2346   .text.xTaskResumeFromISR:00000000 $t
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:2352   .text.xTaskResumeFromISR:00000000 xTaskResumeFromISR
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:2525   .text.xTaskResumeFromISR:000000d0 $d
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:2534   .rodata:00000000 $d
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:2538   .text.vTaskStartScheduler:00000000 $t
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:2544   .text.vTaskStartScheduler:00000000 vTaskStartScheduler
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:2693   .text.vTaskStartScheduler:000000b4 $d
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:5320   .text.prvIdleTask:00000000 prvIdleTask
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:2703   .text.vTaskEndScheduler:00000000 $t
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:2709   .text.vTaskEndScheduler:00000000 vTaskEndScheduler
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:2763   .text.vTaskEndScheduler:0000002c $d
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:2768   .text.vTaskSuspendAll:00000000 $t
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:2809   .text.vTaskSuspendAll:00000018 $d
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:2814   .text.xTaskResumeAll:00000000 $t
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:3821   .text.xTaskIncrementTick:00000000 xTaskIncrementTick
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:3039   .text.xTaskResumeAll:00000118 $d
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:3052   .text.xTaskGetTickCount:00000000 $t
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:3058   .text.xTaskGetTickCount:00000000 xTaskGetTickCount
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:3098   .text.xTaskGetTickCount:00000018 $d
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:3103   .text.xTaskGetTickCountFromISR:00000000 $t
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:3109   .text.xTaskGetTickCountFromISR:00000000 xTaskGetTickCountFromISR
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:3150   .text.xTaskGetTickCountFromISR:00000020 $d
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:3155   .text.uxTaskGetNumberOfTasks:00000000 $t
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:3161   .text.uxTaskGetNumberOfTasks:00000000 uxTaskGetNumberOfTasks
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 244


C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:3192   .text.uxTaskGetNumberOfTasks:00000010 $d
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:3197   .text.pcTaskGetName:00000000 $t
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:3203   .text.pcTaskGetName:00000000 pcTaskGetName
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:3281   .text.pcTaskGetName:00000044 $d
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:3286   .text.prvSearchForNameWithinSingleList:00000000 $t
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:3291   .text.prvSearchForNameWithinSingleList:00000000 prvSearchForNameWithinSingleList
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:3469   .text.xTaskGetHandle:00000000 $t
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:3475   .text.xTaskGetHandle:00000000 xTaskGetHandle
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:3617   .text.xTaskGetHandle:000000b8 $d
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:3626   .text.uxTaskGetSystemState:00000000 $t
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:3632   .text.uxTaskGetSystemState:00000000 uxTaskGetSystemState
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:5727   .text.prvListTasksWithinSingleList:00000000 prvListTasksWithinSingleList
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:3805   .text.uxTaskGetSystemState:00000104 $d
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:3815   .text.xTaskIncrementTick:00000000 $t
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:4067   .text.xTaskIncrementTick:00000148 $d
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:4082   .text.vTaskSwitchContext:00000000 $t
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:4228   .text.vTaskSwitchContext:000000a4 $d
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:4237   .text.vTaskPlaceOnEventList:00000000 $t
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:4243   .text.vTaskPlaceOnEventList:00000000 vTaskPlaceOnEventList
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:4313   .text.vTaskPlaceOnEventList:00000044 $d
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:4318   .text.vTaskPlaceOnUnorderedEventList:00000000 $t
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:4324   .text.vTaskPlaceOnUnorderedEventList:00000000 vTaskPlaceOnUnorderedEventList
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:4428   .text.vTaskPlaceOnUnorderedEventList:00000070 $d
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:4434   .text.vTaskPlaceOnEventListRestricted:00000000 $t
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:4440   .text.vTaskPlaceOnEventListRestricted:00000000 vTaskPlaceOnEventListRestricted
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:4519   .text.vTaskPlaceOnEventListRestricted:00000054 $d
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:4524   .text.xTaskRemoveFromEventList:00000000 $t
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:4530   .text.xTaskRemoveFromEventList:00000000 xTaskRemoveFromEventList
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:4670   .text.xTaskRemoveFromEventList:000000b0 $d
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:4680   .text.vTaskRemoveFromUnorderedEventList:00000000 $t
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:4686   .text.vTaskRemoveFromUnorderedEventList:00000000 vTaskRemoveFromUnorderedEventList
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:4830   .text.vTaskRemoveFromUnorderedEventList:000000b0 $d
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:4839   .text.vTaskSetTimeOutState:00000000 $t
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:4845   .text.vTaskSetTimeOutState:00000000 vTaskSetTimeOutState
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:4916   .text.vTaskSetTimeOutState:00000044 $d
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:4922   .text.vTaskInternalSetTimeOutState:00000000 $t
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:4928   .text.vTaskInternalSetTimeOutState:00000000 vTaskInternalSetTimeOutState
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:4973   .text.vTaskInternalSetTimeOutState:00000024 $d
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:4979   .text.xTaskCheckForTimeOut:00000000 $t
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:4985   .text.xTaskCheckForTimeOut:00000000 xTaskCheckForTimeOut
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:5150   .text.xTaskCheckForTimeOut:000000bc $d
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:5156   .text.vTaskMissedYield:00000000 $t
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:5162   .text.vTaskMissedYield:00000000 vTaskMissedYield
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:5194   .text.vTaskMissedYield:00000014 $d
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:5199   .text.uxTaskGetTaskNumber:00000000 $t
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:5205   .text.uxTaskGetTaskNumber:00000000 uxTaskGetTaskNumber
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:5260   .text.vTaskSetTaskNumber:00000000 $t
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:5266   .text.vTaskSetTaskNumber:00000000 vTaskSetTaskNumber
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:5315   .text.prvIdleTask:00000000 $t
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:5471   .text.prvCheckTasksWaitingTermination:00000000 prvCheckTasksWaitingTermination
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:5365   .text.prvIdleTask:00000028 $d
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:5371   .text.prvInitialiseTaskLists:00000000 $t
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:5454   .text.prvInitialiseTaskLists:00000060 $d
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:5466   .text.prvCheckTasksWaitingTermination:00000000 $t
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:5544   .text.prvCheckTasksWaitingTermination:00000050 $d
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:5551   .text.vTaskGetInfo:00000000 $t
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:5557   .text.vTaskGetInfo:00000000 vTaskGetInfo
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 245


C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:5859   .text.prvTaskCheckFreeStackSpace:00000000 prvTaskCheckFreeStackSpace
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:5717   .text.vTaskGetInfo:000000c8 $d
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:5722   .text.prvListTasksWithinSingleList:00000000 $t
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:5854   .text.prvTaskCheckFreeStackSpace:00000000 $t
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:5923   .text.uxTaskGetStackHighWaterMark:00000000 $t
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:5929   .text.uxTaskGetStackHighWaterMark:00000000 uxTaskGetStackHighWaterMark
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:5986   .text.uxTaskGetStackHighWaterMark:00000034 $d
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:5991   .text.prvDeleteTCB:00000000 $t
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:6085   .text.prvResetNextTaskUnblockTime:00000000 $t
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:6152   .text.prvResetNextTaskUnblockTime:00000038 $d
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:6158   .text.xTaskGetCurrentTaskHandle:00000000 $t
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:6164   .text.xTaskGetCurrentTaskHandle:00000000 xTaskGetCurrentTaskHandle
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:6204   .text.xTaskGetCurrentTaskHandle:00000018 $d
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:6209   .text.xTaskGetSchedulerState:00000000 $t
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:6215   .text.xTaskGetSchedulerState:00000000 xTaskGetSchedulerState
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:6277   .text.xTaskGetSchedulerState:00000034 $d
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:6283   .text.xTaskPriorityInherit:00000000 $t
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:6289   .text.xTaskPriorityInherit:00000000 xTaskPriorityInherit
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:6438   .text.xTaskPriorityInherit:000000c4 $d
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:6445   .text.xTaskPriorityDisinherit:00000000 $t
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:6451   .text.xTaskPriorityDisinherit:00000000 xTaskPriorityDisinherit
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:6619   .text.xTaskPriorityDisinherit:000000d0 $d
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:6626   .text.vTaskPriorityDisinheritAfterTimeout:00000000 $t
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:6632   .text.vTaskPriorityDisinheritAfterTimeout:00000000 vTaskPriorityDisinheritAfterTimeout
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:6826   .text.vTaskPriorityDisinheritAfterTimeout:000000f8 $d
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:6833   .text.uxTaskResetEventItemValue:00000000 $t
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:6839   .text.uxTaskResetEventItemValue:00000000 uxTaskResetEventItemValue
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:6889   .text.uxTaskResetEventItemValue:0000002c $d
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:6894   .text.pvTaskIncrementMutexHeldCount:00000000 $t
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:6900   .text.pvTaskIncrementMutexHeldCount:00000000 pvTaskIncrementMutexHeldCount
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:6945   .text.pvTaskIncrementMutexHeldCount:00000024 $d
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:6950   .text.ulTaskNotifyTake:00000000 $t
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:6956   .text.ulTaskNotifyTake:00000000 ulTaskNotifyTake
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:7070   .text.ulTaskNotifyTake:00000088 $d
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:7076   .text.xTaskNotifyWait:00000000 $t
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:7082   .text.xTaskNotifyWait:00000000 xTaskNotifyWait
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:7217   .text.xTaskNotifyWait:000000ac $d
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:7223   .text.xTaskGenericNotify:00000000 $t
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:7229   .text.xTaskGenericNotify:00000000 xTaskGenericNotify
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:7312   .text.xTaskGenericNotify:00000064 $d
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:7317   .text.xTaskGenericNotify:00000078 $t
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:7501   .text.xTaskGenericNotify:00000160 $d
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:7509   .text.xTaskGenericNotifyFromISR:00000000 $t
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:7515   .text.xTaskGenericNotifyFromISR:00000000 xTaskGenericNotifyFromISR
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:7620   .text.xTaskGenericNotifyFromISR:00000080 $d
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:7625   .text.xTaskGenericNotifyFromISR:00000094 $t
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:7838   .text.xTaskGenericNotifyFromISR:000001a0 $d
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:7848   .text.vTaskNotifyGiveFromISR:00000000 $t
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:7854   .text.vTaskNotifyGiveFromISR:00000000 vTaskNotifyGiveFromISR
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:8072   .text.vTaskNotifyGiveFromISR:0000010c $d
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:8082   .text.xTaskNotifyStateClear:00000000 $t
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:8088   .text.xTaskNotifyStateClear:00000000 xTaskNotifyStateClear
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:8159   .text.xTaskNotifyStateClear:00000048 $d
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:8164   .text.prvAddCurrentTaskToDelayedList:00000000 $t
C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s:8283   .text.prvAddCurrentTaskToDelayedList:00000090 $d

UNDEFINED SYMBOLS
ARM GAS  C:\Users\Lenovo\AppData\Local\Temp\ccpZ90u0.s 			page 246


pvPortMalloc
vPortFree
memset
vListInitialiseItem
pxPortInitialiseStack
vPortEnterCritical
vListInsertEnd
vPortExitCritical
uxListRemove
vPortValidateInterruptPriority
vApplicationGetIdleTaskMemory
xTimerCreateTimerTask
xPortStartScheduler
vPortEndScheduler
strlen
vListInsert
vListInitialise
